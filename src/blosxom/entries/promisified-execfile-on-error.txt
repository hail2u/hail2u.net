<h1>Promise化されたexecFile()でのエラー</h1>

<p><code>child_process</code>モジュールの関数群も<code>util.promisify()</code>を使ってPromise化できる。しかし<code>execFile()</code>などは元々のコールバックに3つ引数が渡されることから少し使い方が違ってくる。ここまでは皆が通る道だろう。実はそれだけでなくリジェクトされた時も少し違うことが<a href="https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback">公式ドキュメントの該当する項の最後</a>に記載されていた。</p>

<figure>

<blockquote>
<p>In case of an error, a rejected promise is returned, with the same <code>error</code> object given in the callback, but with an additional two properties <code>stdout</code> and <code>stderr</code></p>
</blockquote>
<figcaption>— <cite><a href="https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback"><code>child_process.execFile(file[, args][, options][, callback])</code></a></cite></figcaption>
</figure>

<p>ちゃんと<code>catch()</code>されているなら、エラーが起きた場合にその中で標準出力と標準エラーにアクセスできるわけだ。こうなっていることでプロミス化した<code>execFile()</code>を<code>await</code>してエラーになった時、その解決に必要になる重要なメッセージを記録でき、実行したファイルが起こしたエラーの解決につなげられる。</p>

<pre><code class="language-javascript">const util = require(&quot;util&quot;);
const { execFile } = require(&quot;child_process&quot;);
const execFileAsync = util.promisify(execFile);

const getVersion = async () =&gt; {
  const { stdout } = await execFile(&quot;node&quot;, [&quot;--version&quot;]);
  console.log(stdout);
};

getVersion().catch(e =&gt; {
  if (<mark>e.stderr</mark>) {
    console.error(<mark>e.stderr</mark>);
  }

  console.trace(e);
});
</code></pre>

<p>Promiseの<code>catch()</code>側でやる。これはこれで専用の<code>catch()</code>を書くことになるのがちょっと気になる。大抵の場合は<code>Error</code>オブジェクトがいい感じになっているような気がするので、実はあまり考えなくて良いのかもしれない。</p>

<hr>

<p>僕は当初<code>try..catch</code>でやるものと考えていて、書きづらいな……と感じていた。</p>

<pre><code class="language-javascript">const util = require(&quot;util&quot;);
const { execFile } = require(&quot;child_process&quot;);
const execFileAsync = util.promisify(execFile);

const getVersion = async () =&gt; {
  let stdout;
  let stderr;

  try {
    ({ stdout, stderr }) = await execFileAsync(&quot;node&quot;, [&quot;--version&quot;]);
  } catch (e) {
    console.error(stderr);
    throw e;
  }

  console.log(stdout);
};

getVersion().catch(e =&gt; {
  console.trace(e);
});
</code></pre>

<p><code>let</code>を前出ししたり、そのおかげで<code>await</code>で受け取る時に<code>()</code>で括らなければならない。結局はそれ以前の問題で、これでは<code>catch</code>節で<code>stderr</code>が拾えない。</p>