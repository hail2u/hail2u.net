git subtreeの練習

<p>Gitのサブモジュールでは面倒そうな、頻繁に更新される別のリポジトリを取り込む方法としてサブツリーマージを行うラッパーである<code>git subtree</code>コマンドを使う練習を始めた。どちらかというと「参照する」要素の強いサブモジュールに対して、サブツリーは「切り分ける」や「取り込む」という感じなんじゃないかと理解している。全般的に間違ってそうで怖い。</p>

<p>「切り分ける」、つまりリポジトリのサブディレクトリを別のリポジトリにしたい場合は、単純なケースだと親にあたる方で<code>.gitignore</code>や<code>.git/info/exclude</code>を使ってサブディレクトリを除外してやれば良い。でもこの場合、両方のリポジトリで関連した変更がある時にそれぞれのリポジトリでコミットしてやらないとならないので面倒くさい。</p>

<p>「取り込む」場合はサブモジュールが基本なわけだけど、他で作業して戻ってきてたりする必要があるし、サブモジュールの更新ほど面倒くさい作業はない。理解が足らないとミスもしやすいと思う。</p>

<p>サブツリーを使うと、親となるリポジトリでまとめてコミットしたり、子になるリモート・リポジトリを取り込んだサブディレクトリでシームレスに作業を行ったりしたりできる。そしてその後、サブツリーとして登録したリモート・リポジトリへ、サブディレクトリのファイルへのコミットだけを反映させることもできる。</p>

<pre><samp>$ <kbd>git subtree push --prefix=subtree_dir/ subtree_origin master</kbd>
</samp></pre>

<p>まさにこれを目的としていた。つまり作業を一元化し、特定のディレクトリへ加わった変更だけを別のリポジトリに投げる、という感じ。親の方にプライベートなファイルが存在していたりして公開したくない(バージョン管理はしたい)が、サブディレクトリは普通に公開しておきたいとかそういうの。単一のリポジトリで普通に扱うので、ミスはしづらいような気がする。</p>

<h2>リモート・リポジトリをサブツリーとして登録</h2>

<p><code>git remote add</code>と<code>git subtree add</code>を使う。</p>

<pre><samp>$ <kbd>git remote add -f subtree_origin https://example.com/bob/foo.git</kbd>
$ <kbd>git subtree add --prefix=foo/ --squash subtree_origin master</kbd>
</samp></pre>

<p>取り込みたいリモート・リポジトリを<code>subtree_origin</code>として登録し、サブディレクトリ<code>foo/</code>として取り込む。<del><code>--squash</code>を省略すると履歴を継承できるので、サブモジュールや上述のようなリポジトリのネストから移行する場合はつけない方が良さそう。履歴が読みづらくなるのがちょっとアレだけど、<code>log</code>コマンドに<code>--date-order</code>オプションを付ければなんとかなる気がする(または<a href="http://www.sourcetreeapp.com/">SourceTree</a>で)。</del><ins>リモートに反映させる時に死ぬので必ず<code>--squash</code>を付けるべきとした方が良さそう。</ins></p>

<h2>コミット</h2>

<p>ファイルへ加えた変更のコミットはサブツリーのファイルだろうとそうでなかろうと普通にコミットするだけ。</p>

<pre><samp>$ <kbd>git add file-a.txt</kbd>
$ <kbd>git add foo/file-b.txt</kbd>
$ <kbd>git commit -m &#39;Modified!&#39;</kbd>
</samp></pre>

<p>単純にひとつのリポジトリとみなして操作すれば良い。</p>

<h2>コミットをリモート・リポジトリへ反映</h2>

<p><code>git push</code>と<code>git subtree push</code>を使う。</p>

<pre><samp>$ <kbd>git push origin master</kbd>
$ <kbd>git subtree push --prefix=foo/ subtree_origin master</kbd>
</samp></pre>

<p>これで<code>origin</code>には<code>file-a.txt</code>と<code>foo/file-b.txt</code>へ加わった変更が、<code>subtree_origin</code>へは<code>foo/file-b.txt</code>へ加わった変更<em>のみ</em>が反映される。</p>

<hr>

<p>サブツリー関係はウェブで調べてもノイズが多くてよくわからなかった。古い情報も勿論混ざっているし、新しく書かれた記事でも古い情報を元にしていたり、混ぜこぜになっていたり。前提知識がなさすぎて取捨選択できなかったので、一旦全て忘れてとにかく<code>git subtree -h</code>と<a href="https://github.com/git/git/blob/v2.0.0/contrib/subtree/git-subtree.txt"><code>contirib/subtree/git-subtree.txt</code></a>だけを読んで、色々試してみて覚えることにした。</p>

<p>このウェブサイト全体のリポジトリをBitbucketでプライベートなリポジトリとして作り、<a href="https://github.com/hail2u/hail2u.net-weblog">ウェブログ</a>や<a href="https://github.com/hail2u/hail2u.net-documents">ドキュメント</a>、<a href="https://github.com/hail2u/hail2u.net-styles">CSS</a>のリポジトリをsubtreeとして混ぜるみたいな形で色々試行錯誤してみて、なんとなく理解できたような気がする。<code>git reset --hard</code>と<code>git push -f</code>を数十回繰り返した価値はあった。</p>

<p>誰かが管理してるリポジトリはサブモジュールで特定のコミットに縛り、自分がメインで管理しているリポジトリはサブツリーでいじりやすいようにしておく、というのが良いのかな。他のリポジトリを取り込むという利用だけでなく、サンプルを置いたディレクトリを<code>gh-pages</code>ブランチを使ったサブツリーにして、GitHub Pagesの生成をシームレスに行うとかも出来そう。</p>
