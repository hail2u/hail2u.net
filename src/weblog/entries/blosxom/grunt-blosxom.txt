Blosxom用Gruntプラグイン

<figure>
  <img src="/images/blog/grunt-blosxom.png" alt="Generat Blosxom files with Grunt">
</figure>

<p>前にちょっと書いたけど<a href="http://blosxom.sourceforge.net/">Blosxom</a>の動的生成インターフェイスを<a href="http://gruntjs.com/">Grunt</a>から叩き、その結果を指定ディレクトリに保存するだけのGruntプラグインを書いて使ってる。汎用性はあんまり考えてないけど、Blosxom側が優秀なのでそれなりにあるような気がする。本体の書き換えが不要で、特殊なプラグインを必要とせず、動的生成向けのプラグインたちが普通に動くといった辺りが、ビルトインの静的生成システムと比べた利点。</p>

<p class="seealso">Download: <a href="/pub/grunt-blosxom.js">grunt-blosxom.js</a></p>

<p>設定は以下の様な形で書く。普通のGruntプラグインとは違うので、混乱しないように<code>src</code>や<code>dest</code>は使わず、固定か<code>--file</code>オプションで生成すべきファイルのパスを指定する。</p>

<pre><code class="language-javascript">blosxom: {
  options: {
    root: &#39;.grunt/weblog/&#39;,
    datadir: &#39;.grunt/weblog/entries/&#39;,
    static_dir: &#39;blog/&#39;
  },

  article: {
    file: grunt.option(&#39;file&#39;)
  },

  feed: {
    file: &#39;index.rss&#39;
  }
}
</code></pre>

<p><code>options</code>は以下の様な構成になっている。本当はほとんど同じことが書かれるはずの<code>blosxom.conf</code>を読みたい所だけど、<code>blosxom.conf</code>はPerlスクリプトのため、Node.jsからパースするのは面倒そうなのでやめた。</p>

<ul>
<li><code>root</code>: <code>blosxom.cgi</code>が置かれているディレクトリ</li>
<li><code>datadir</code>: <code>$blosxom::datadir</code>と同じディレクトリ</li>
<li><code>static_dir</code>: 生成したファイルを保存するディレクトリ</li>
</ul>

<p>実行は、生成するファイルを固定で指定したターゲット(上記設定だと<code>feed</code>ターゲット)の場合はそのまま、それ以外では<code>--file</code>オプションで、以下のいずれかの形のパスを渡す。</p>

<ul>
<li>生成したい記事データの絶対パス</li>
<li><em><code>$blosxom::datadir</code></em>からの相対パス</li>
<li>サーバー上で動かす場合と同じ<code>path/to/entry.flavour</code></li>
</ul>

<p>日付指定などを組み合わせることも可能(のはず)。相対パスのみ許可するとGruntプラグイン側では何もすることなくて簡単なんだけど、ターミナルではともかく、エディタ等の他のプログラムから呼ぶ場合は絶対パスの方が手軽なので、プラグイン側に相対パスに変換する機能をもたせた。</p>

<pre><samp>$ <kbd>grunt blosxom:article --file=blosxom/grunt-blosxom.txt</kbd>
</samp></pre>

<p>上記設定だと、このようなコマンドで<code>blog/blosxom/grunt-blosxom.html</code>が作成される。わかりやすい！</p>

<hr>

<p>実際に使ってるものはもうちょっと汎用性を犠牲にした特化型のもの(<code>index.rss</code>を<code>feed</code>にリネームして保存する機能とかがある)だけど、まぁ大体はこんな感じ。Blosxomを叩くこういった補助ツールは結構昔から作っていた。古くは秀丸マクロでリレイアウトからFTPでアップロードなどとしてたものから、Perlでフロントエンドを作るようになった。一時Vimスクリプトで書き直したけど、それはすぐ投げ捨て、Node.jsで書き直した。一年ほど前にGruntプラグインにするように路線変更をし、今に至ってローカルで生成するように書き直した。という遍歴。変歴。</p>
