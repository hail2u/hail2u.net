interpolate_fancyプラグインの使い方

<p>手軽に<a href="http://www.blosxom.com/" title="blosxom :: the zen of blogging ::">blosxom</a>のflavourシステムを強化することが出来るようになる<a href="http://www.blosxom.com/plugins/interpolate/interpolate_fancy.htm" title="blosxom :: the zen of blogging :: plugins/interpolate/interpolate_fancy.txt">interpolate_fancyプラグイン</a>について今さら書いてみようかとか。本当に今さらすぎて笑えない。今さらとはいえ、blosxomのflavourシステムを強化するプラグインとしてはこれくらいしか選択肢はないので書いておいても損ではないはず。</p>

<p>少し前にもちょっとだけ使い方を書いたけど、<del>文字数稼ぎ</del><ins>興味を持てずに飛ばしてしまった人のため</ins>に簡単に使い方を説明してみる。基本は、</p>

<pre>&lt;$foo /&gt; = $foo
&lt;?$foo&gt;$fooがdefinedなら表示される&lt;/?&gt;
&lt;!?$foo&gt;$fooがundefinedなら表示される&lt;/?&gt;
</pre>

<p>の3つで、これらに加えて、</p>

<pre>&lt;?$foo eq=&quot;1&quot;&gt;$fooが1なら表示される。&lt;/?&gt;
&lt;?$foo ne=&quot;1&quot;&gt;$fooが1でないなら表示される。&lt;/?&gt;
&lt;?$foo lt=&quot;1&quot;&gt;$fooが1より小さいなら表示される。&lt;/?&gt;
&lt;?$foo gt=&quot;1&quot;&gt;$fooが1より大きいなら表示される。&lt;/?&gt;
&lt;?$foo like=&quot;^[a-z]$&quot;&gt;$fooが正規表現^[a-z]$にマッチするなら表示される。&lt;/?&gt;
&lt;?$foo unlike=&quot;^[a-z]$&quot;&gt;$fooが正規表現^[a-z]$にマッチしないなら表示される。&lt;/?&gt;
</pre>

<p>などといった条件比較も可能。更に、他にインストールしているプラグインのサブルーチンを呼べたりとかもする。</p>

<p>以下に具体的な利用例を挙げてみる。</p>

<h2>permalinkではタイトルにリンクを張らない</h2>

<p>このblogのように、<code>$path/$fn.html</code>という形のpermalinkを採用している場合は、<code>$path_info</code>が<code>.html</code>で終わっているかどうかを調べることによってpermalinkかどうかを判断できる。つまり、</p>

<pre><code class="language-html">&lt;h3&gt;
  &lt;?$path_info unlike=&quot;\.html$&quot;&gt;
    &lt;a href=&quot;/blog$path/$fn.$default_flavour&quot; title=&quot;&amp;quot;$title&amp;quot; への恒久的なリンク&quot;&gt;
  &lt;/?&gt;
  $title
  &lt;?$path_info unlike=&quot;\.html$&quot;&gt;
    &lt;/a&gt;
  &lt;/?&gt;
&lt;/h3&gt;
</code></pre>

<p>というような書き方(見やすいように改行を入れている)をしてやれば、permalinkではタイトルにリンクが張られなくなる。else系の条件分岐が無いのでくだくだしい書き方。</p>

<h2>文字列を保護する</h2>

<p>blosxomの<code>interpolate()</code>の仕様上、<code>$yr-$mo_num-$daT$ti:00</code>とか書いた場合、意図した通りに表示されない。しかし、適当な変数名を利用して、</p>

<pre>$yr-$mo_num-$da<em>&lt;?$yr&gt;T&lt;/?&gt;</em>$ti<em>&lt;?$yr&gt;:&lt;/?&gt;</em>00+09:00
</pre>

<p>と、書くことができる。こうすると「T」や「:」が保護されるので、きちんと意図した通りに表示される。バッド・ノウハウ。</p>

<h2>簡単な条件分岐を利用して都合よく体裁を整える</h2>

<p>このサイトのトップ・ページに表示している最近のエントリ一覧を実現しているjs flavourで利用してたりします。<a href="/blog/entries/story.js" title="story.js">story.js</a>の中身は、</p>

<pre><em>&lt;?$push_if_first::is_first eq=&quot;1&quot;&gt;</em>
  document.write(&#39;&lt;h4&gt;&lt;a href=&quot;$url$path/$fn.$default_flavour&quot; title=&quot;&amp;quot;$title&amp;quot; への恒久的なリンク&quot;&gt;$title&lt;/a&gt;&lt;/h4&gt;&#39;);
  document.write(&#39;&lt;p class=&quot;date&quot;&gt;Posted at $yr-$mo_num-$da&lt;?$yr&gt;T&lt;/?&gt;$ti&lt;?$yr&gt;:&lt;/?&gt;00+09:00 in &lt;a href=&quot;/blog$path/&quot; title=&quot;&amp;quot;$categories::name&amp;quot; 関連のエントリを閲覧する&quot;&gt;$categories::name&lt;/a&gt;&lt;/p&gt;&#39;);
  document.write(&#39;&lt;p&gt;$rss::excerpt&lt;/p&gt;&#39;);
  document.write(&#39;&lt;p class=&quot;seemore&quot;&gt;&lt;a href=&quot;$url$path/$fn.$default_flavour&quot; title=&quot;&amp;quot;$title&amp;quot; の全文を読む&quot;&gt;&amp;#187; Read full entry&lt;/a&gt;&lt;/p&gt;&#39;);
  document.write(&#39;&lt;ul&gt;&#39;);
<em>&lt;/?&gt;</em>

<em>&lt;?$push_if_first::is_first ne=&quot;1&quot;&gt;</em>
  document.write(&#39;&lt;li&gt;&lt;a href=&quot;$url$path/$fn.$default_flavour&quot; title=&quot;$title Posted at $yr/$mo_num/$da ($dw) $ti in $categories::name&quot;&gt;$title&lt;/a&gt;&lt;/li&gt;&#39;);
<em>&lt;/?&gt;</em>
</pre>

<p>と、<a href="/archives/blugins.html#push_if_first" title="hail2u.net - Archives - blosxom plugins">push_if_firstプラグイン</a>と組み合わせることによって、最初のエントリの場合は概要まで表示しエントリ全文へのリンクを追加、それ以外の場合はタイトルをリストで並べるという形を実現している。</p>

<h2>特定のエントリではwritebackを禁止する</h2>

<p>特定のエントリということを判断させるために<a href="http://www.blosxom.com/plugins/meta/meta.htm" title="blosxom :: the zen of blogging :: plugins/meta/meta.txt">metaプラグイン</a>が必要になるが、作業的には面倒ではない。まず、writebackのフォームを表示しているstory.htmlなどで、</p>

<pre>&lt;?!$meta::nowriteback&gt;
  &lt;form ...&gt;
  ...
  &lt;/form&gt;
&lt;/?&gt;
</pre>

<p>といったように、writebackのフォームをくくる。その上で、その特定のエントリに、</p>

<pre>meta-nowriteback: 1
</pre>

<p>と書いておけば良い。metaプラグインはエントリに対してメタ・データを付与できるプラグインなので、こういったケースでもわかるようにinterpolate_fancyプラグインとは相性が良い。</p>

<p>禁止するというかフォームを表示させないだけ。指定の日数すぎたらwritebackを禁止するとかいう場合は、プラグインを書かないとならない(と思う)。例えば、現在の時間とエントリの時間の差を秒数で取得し、変数に格納するだけのプラグインをつくり、<code>lt</code>でその指定の日数を秒に変換した数字(30日なら2592000)と比較とか。</p>

<hr>

<p>基本的には他のプラグインとうまく組み合わせてやると力を発揮するプラグインだと思う。また、逆に他のプラグイン側も条件分岐をinterpolate_fancy側に任せたりすることも可能なので、プラグインが多少書きやすくなる。これがデフォルトの<code>interpolate()</code>だったらなぁ・・・とかは思っていても口に出してはいけない。</p>
