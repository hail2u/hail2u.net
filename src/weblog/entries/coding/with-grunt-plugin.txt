Gruntプラグインの同梱

<p>遂に別々に管理するのが面倒になったので、PostCSSを使ったツールにGruntプラグインも同梱するようにした。<a href="https://github.com/nDmitry/grunt-postcss">grunt-postcss</a>などから使う方が効率的なので、もはや単体のGruntプラグインはメンテナンスが放棄されがちだ。<a href="https://github.com/hail2u/node-csswring/tree/ba3642d9d94149e3519de5db2993ca5232752d2b">CSSWring v2.1.0</a>と<a href="https://github.com/hail2u/node-css-mqpacker/tree/e234fdb3d7565740f68450b5f33b81c9d777dddf">CSS MQPacker v2.1.0</a>には既に同梱されている（まだPostCSS v4.0.0にはなっていない）。</p>

<p><a href="https://github.com/sindresorhus/load-grunt-tasks">load-grunt-tasks</a>などのGruntプラグイン読み込み自動化パッケージの恩恵には預かれないため、<code>Gruntfile.js</code>で自前で読み込んでやる必要がある。</p>

<pre><code class="language-javascript">module.exports = function (grunt) {
  grunt.loadNpmTasks(&#39;css-mqpacker&#39;);
  grunt.loadNpmTasks(&#39;csswring&#39;);
};
</code></pre>

<p>両者とも設定はないが、PostCSSの<code>process()</code>の第二引数にしていするオプションを<code>options</code>を使って指定できるようにはなっている。のでSource Mapsも自在に吐ける。継承したい場合は<code>map: true</code>を指定してやるだけで、PostCSSが賢いのでだいたい動く。</p>

<hr>

<p>PostCSSを利用する単体のGruntプラグインのgrunt-postcssに対する優位性は、<code>peerDependencies</code>によるPostCSSのバージョンの束縛を無視できることだ。</p>

<p>grunt-postcssを使う場合、要求するPostCSSのバージョンが食い違っているもの同士を組み合わせることができなくなる。<code>peerDependencies</code>でそれぞれバージョンを束縛できるが、そうなると食い違うものがそもそもインストール出来なくなる。解決のためにはパッケージ側のアップデートが必須になる。</p>

<p>単体のGruntプラグインの場合はそれぞれが独自にPostCSSをインストールして使うので、ほとんどのケースで組み合わせることが可能になる。その分、無駄が多くなるということでもあるけれども。</p>

<p>この辺りはGruntもPostCSSもプラグイン・システムとして失敗した感がある部分で、もうちょっとなんとかしないとメンテナンスが放棄されているけどまだ動くものが最新版の環境ではうまく動かせなくなってしまう。その点、gulpでは<a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">gulpパッケージが<code>dependencies</code>にも<code>peerDependencies</code>にも現れないように書くべき</a>としており、柔軟性と将来性で優っている。</p>
