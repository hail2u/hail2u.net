<h1>GitHub互換の見出しID</h1>

<p><a href="https://github.com/hail2u/node-gfmtoc">gfmtoc（mdtocから名前を変えた）</a>を作っている時にGitHub flavored Markdown（本当は<a href="https://github.com/jch/html-pipeline/">HTML Pipeline</a>）互換の見出しIDをNode.jsで生成する方法を考えていた。GitHubではRubyでサポートされているPOSIX文字クラスをユニコードへ対応させた<code>\p{Word}</code>を使っているので、それを作ればあとは簡単なようだ。</p>

<p><a href="https://github.com/ruby/ruby/blob/1026907467ea3d5441e1bfa95f5f37b431a684f3/doc/regexp.rdoc#character-properties">Rubyのソースコードにある正規表現のドキュメント</a>によると、以下のユニコード文字プロパティーのカテゴリーを組み合わせたものが<code>\p{Word}</code>ということのようだ。</p>

<ul>
<li><code>\p{L}</code>: Letter</li>
<li><code>\p{M}</code>: Mark</li>
<li><code>\p{N}</code>: Number</li>
<li><code>\p{Pc}</code>: Connector_Punctuation</li>
</ul>

<p>つまりこれらを連結した正規表現パターンを作れば良い。まともにやったら日が暮れるので、Node.jsでは<a href="https://www.npmjs.com/package/unicode-7.0.0">unicode-7.0.0</a>と<a href="https://www.npmjs.com/package/regenerate">regenerate</a>の両パッケージを使って生成してやる。</p>

<pre><code class="language-javascript">var regenerate = require(&#39;regenerate&#39;);

var word = regenerate().add(
  require(&#39;unicode-7.0.0/<mark>properties/Any</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/L</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/M</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/N</mark>/code-points&#39;)
).remove(
  require(&#39;unicode-7.0.0/<mark>categories/Pc</mark>/code-points&#39;)
).remove(
  &#39;-&#39;,
  &#39; &#39;
);

console.log(word.toString());
</code></pre>

<p>ここでは否定形が欲しいので、Anyプロパティーを<code>add()</code>してから上記カテゴリーを<code>remove()</code>していく。最終的には特別視される<code>-</code>と<code> </code>もここでついでに削除しておく。gfmtocでは<a href="https://github.com/hail2u/node-gfmtoc/blob/master/lib/regexp-word.js">生成結果をファイルに保存したもの</a>をライブラリとして使っている。普通はそのまま書けば良い（毎回動的に生成させるととても遅いことには注意が必要）。あとはHTML Pipelineがやっていることをなぞるのみだ。</p>

<ol>
<li>小文字に変換</li>
<li><code>\p{Word}</code>と<code>-</code>、<code> </code>（半角空白）以外を削除</li>
<li>半角空白を<code>-</code>に置換</li>
<li>IDが被らないように数字を追加</li>
</ol>

<p>HTML Pipelineではこのような<a href="https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb">生成手順</a>になっているようだ。</p>

<pre><code class="language-javascript">var h = {};

function genID(s, h) {
  var u = &#39;&#39;;
  var word = /.../g;
  s = s.toLowerCase();
  s = s.replace(word, &#39;&#39;);
  s = s.replace(/ /g, &#39;-&#39;);

  if (h[s] &gt; 0) {
    u = &#39;-&#39; + h[s];
  }

  if (!h[s]) {
    h[s] = 0;
  }

  h[s] += 1;

  return s + u;
}
</code></pre>

<p>確認した限りではうまくいっているようだ。<code>id</code>属性の値として使う場合はこのままで問題ないが、<code>href</code>属性の値として使う場合は<code>encodeURIComponent()</code>でURLエンコードしてやることを忘れない方が良い……ような気がするけど、最近のブラウザーはカシコイのでどっちでも良さそう。</p>
