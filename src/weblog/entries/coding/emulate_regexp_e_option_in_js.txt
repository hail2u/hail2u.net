正規表現のeオプションをJavaScriptでエミュレート
<p>Perlなどの置換系の正規表現では<code>e</code>というオプション(フラグ)をつけると、置換後の文字列をプログラム・コードとみなしてくれるわけですが、JavaScriptの<code>replace()</code>の第一引数で指定する正規表現には<code>e</code>オプションなどというモノはありません。しかし、<code>replace()</code>の第二引数である置換後の文字列にはStringオブジェクトや文字列リテラル以外にも関数を指定することもできるので、事実上<code>e</code>オプション相当のことが実現できます。エミュレートというのは正確ではない気がするけど気にしない。</p>
<p>具体的には、</p>
<pre><code class="language-js">var s = &quot;asdf123asdf123456asdf123asdf&quot;;
document.write(
  s.replace(
    /123/g,
    function (num, idx, old) {
      return parseInt(num) + 333;
    }
  )
);
</code></pre>
<p>という感じ。上記例では「asdf456asdf456456asdf456asdf」と書き出されます。</p>
<p>第二引数に指定した関数には、強制的に引数が渡されます。その引数は<code>replace()</code>によって随時変更されるグローバルな<code>RegExp</code>オブジェクトのプロパティの一部で、「<code>RegExp.lastMatch</code>, <code>RegExp.$1</code>..<code>RegExp.$9</code>, <code>RegExp.index</code>, <code>RegExp.input</code>」となっています(引数の数は正規表現に依存)。上記例では</p>
<pre>123, 4, asdf123asdf123456asdf123asdf
123, 11, asdf123asdf123456asdf123asdf
123, 21, asdf123asdf123456asdf123asdf
</pre>
<p>などと渡されることになります(上記例の正規表現では<code>()</code>によるグルーピングはしていないので<code>RegExp.$1</code>..<code>RegExp.$9</code>は飛ばされます)。</p>
<p>ちなみに、僕は知らなかったのですが、<a href="http://tdiary.ishinao.net/20050329.html#p01" title="tdiary.ishinao.net - JavaScriptでpreg_replace_callback (17:16) , WikiParserをアップデート (18:19)">JavaScriptでpreg_replace_callback</a>というエントリが某所で話題になった時、「無いことは無いだろー」とWSH 5.6のヘルプの<code>replace()</code>のページを読んでみたところ、そのものずばりな答えが載ってたりしました。知られざる常識・・・じゃなくてめちゃくちゃ常識だったりして。</p>
<p>JavaScriptの<code>replace()</code>ではベタな正規表現による置換くらいしかやったことが無かったので、これを使えばエレガントなコードを書けるような気がしないでもない。</p>
