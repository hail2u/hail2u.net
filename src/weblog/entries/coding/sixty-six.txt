SIXTY-SIXとかいうの
<p><a href="http://www.amazon.com/gp/browse.html?node=3435361" title="Amazon.com: Web Services">Amazon E-Commerce Service 4.0</a>のXSLTサービスを利用してJSONに整形するという<a href="/blog/coding/ecs4_to_feed_and_json.html" title="hail2u.net - Weblog - Amazon ECS 4.0のXMLからフィードやJSONに">ひとつ前のエントリ</a>でのアイディアを利用した<del>和書ストアの</del>Amazon.co.jpを検索をするSIXTY-SIXってものを作ってみました。作ってみただけ・・・ですが、一応あまりメジャーでない感じのJavaScriptテクニックも使ったりしたのでそれの紹介も兼ねてエントリってみた。</p>
<p><a href="http://www.crockford.com/JSON/" title="Introducing JSON">JSON</a>への変換は<a href="http://www.w3.org/TR/xslt" title="XSL Transformations (XSLT)">XSLT</a>がなんとなくわかってれば簡単です。注意するのはちゃんと値が帰ってきているかチェックしてやることくらい。前回のエントリでも言及したように、<code>ContentType</code>パラメータで<code>text-javascript</code>も指定するのも忘れずに。</p>
<p>問題はどうやってそのJSONに整形された検索結果を動的に(フォームに入力されたキーワードに合わせて)受け取ってやるかってことです。どうやるかというとJSONに整形されているので<code>script</code>要素で読み込んでやれば良いわけです。つまり、</p>
<pre><code class="language-js">var s = document.createElement(&quot;script&quot;);
s.setAttribute(&#39;type&#39;, &#39;text/javascript&#39;);
s.setAttribute(&#39;src&#39;, &#39;http://webservices.amazon.co.jp/...&amp;Keywords=&#39; + q);
document.body.appendChild(s);
showResults();
</code></pre>
<p>とまあこんな感じ。</p>
<p>しかし、このままではJSONに整形された結果を受け取る前に結果をHTMLとして表示する関数、<code>showResults()</code>が実行されてしまいます。そこで上記コードを、</p>
<pre><code class="language-js">var s = document.createElement(&quot;script&quot;);
s.setAttribute(&#39;type&#39;, &#39;text/javascript&#39;);
s.setAttribute(&#39;src&#39;, &#39;http://webservices.amazon.co.jp/...&amp;Keywords=&#39; + q);
<em>s.addEventListener(&#39;load&#39;, showResults, true);</em>
document.body.appendChild(s);
</code></pre>
<p>と、<code>script</code>要素の<code>load</code>イベントに、結果をHTMLとして表示する関数を登録してやると、JSONに整形された結果を受け取った後に<code>showResults()</code>が実行されるようになります。<a href="http://www.mozilla.org/products/firefox/" title="Firefox - Rediscover the web">Firefox</a>では。このテクニックは<a href="http://tokyoenvious.xrea.jp/b/" title="weblog | 東京嫉妬">JavaScriptマイスターの人</a>のスクリプトを見て知りました。モテメン！モテメン！</p>
<p>Amazonの検索ならXSLT+JavaScriptでガンガン作れちゃいますよ？とかそういう話でした。</p>
<h2>追記</h2>
<p><code>SearchIndex</code>を<code>Blended</code>にして、なんとなく全体から検索できるようにしたつもり。ていうかBlendedダメダメすぎてヤバイ。他にもハッシュにクエリをプットしたり、HTMLを読み込んだ時にハッシュに何か文字列が指定されていたら自動的にその検索を実行したりするようにとか。XSLTスタイルシートもBlended用に書き換えてみたりもしました。JSONの出力の仕方は、アーティスト(Artist)とか著者(Author)とかその他諸々の情報をいちいち考えるのが面倒なので、見つかった重要そうな情報を添え字なしで<code>Details</code>というリストに放り込んでみました。ちょっとずるい感じ。</p>
<h2>追記 #2</h2>
<p>Blendedはダメすぎるのでストアごとに検索できるようにしました。そのついでに<code>location.hash</code>にクエリを保存するようにして、ハッシュ付きでHTMLにアクセスがあった場合は検索を実行するようにとか。なので、</p>
<ul>
<li>和書から&quot;Perl&quot;を検索</li>
<li>エレクトロニクスから&quot;iPod&quot;を検索</li>
</ul>
<p>といったように検索結果をブックマークできます。</p>
