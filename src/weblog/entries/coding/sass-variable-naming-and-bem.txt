Sassの変数命名規則とBEM

<p><code>$type-subtype-component-context</code>というような形でSassの変数を命名していたけど、これにも<a href="http://bem.info/">BEM</a>を使うかという感じになってきた。ただでさえ長いのが、セパレーターで更に長くなるけど、元々そんなに短くないので気にしないことにした。BEMをクラス名で使うような形で単純に利用するケースと、3.3で導入される予定のマップを使って構造化して定義し、複雑に参照するケースを比較して検証している。</p>

<p>検索ボックスに使う、以下の8つの色の変数定義を例にする。</p>

<ul>
  <li>検索フォーム
    <ul>
      <li><em>背景色</em></li>
      <li>入力フォーム
        <ul>
          <li><em>文字色</em></li>
          <li><em>背景色</em></li>
          <li><em>枠線色</em></li>
          <li>フォーカス
            <ul>
              <li><em>枠線色</em></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>ボタン
        <ul>
          <li><em>文字色</em></li>
          <li><em>背景色</em></li>
          <li>オンマウス
            <ul>
              <li><em>枠線色</em></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2>BEMを使った簡単な実装</h2>

<pre><code class="language-scss">$<mark>color-bg</mark>_searchbox: #f9f9f9;

$color-fg_<mark>searchbox</mark>__input: black;
$color-bg_searchbox__<mark>input</mark>: white;
$color-border_searchbox__input: lighten(black, 25%);
$color-border_searchbox__input--focus: cyan;

$color-fg_searchbox__button: white;
$color-bg_searchbox__button: grayscale(mix(cyan, white, 60%));
$color-bg_searchbox__button<mark>--hover</mark>: cyan;
</code></pre>

<p>まず、変数の型をプリフィックスとして付けたい。変数を参照する時は「どういう変数を参照するか」が優先的に意識されるので、先に型があった方が良い。ハンガリアン記法と同じと考えるとわかりやすそう。IDEの補完に向くとかそういう実用上の理由もある。</p>

<p>後はアンダースコア(<code>_</code>)1つを区切りにしてBEMのブロック、アンダースコア(<code>_</code>)2つでエレメント、ハイフン(<code>-</code>)2つでモディファイアと繋げる。</p>

<h2>マップを使って構造化</h2>

<pre><code class="language-scss"><mark>$searchbox</mark>: (
  <mark>color_bg</mark>: #f9f9f9,

  <mark>input</mark>: (
    color_fg: black,
    color_bg: white,
    color_border: lighten(black, 25%),
    <mark>_focus</mark>: (
      color_border: cyan
    )
  ),

  button: (
    color_fg: white,
    color_bg: grayscale(mix(cyan, white, 60%)),
    _hover: (
      color_bg: cyan
    )
  )
);
</code></pre>

<p>Sass 3.3で導入されることになっているマップを使う場合は、型で大きなマップを作ると巨大な変数になってしまうので、まずブロックをルートに作る。そのキーで変数の型を指定するわけだけど、マップをネストした場合はエレメントとする。モディファイアもマップのネストだけど、キーの先頭に<code>_</code>を付けて区別する。</p>

<p>参照は<code>map-get()</code>関数を使う。</p>

<pre><code class="language-scss">.searchbox {
  background-color: <mark>map-get($searchbox, color_bg)</mark>;

  input {
    <mark>$input: map-get($searchbox, input);</mark>

    border: 1px solid map-get($input, color_border);
    color: map-get($input, color_fg);
    background-color: map-get($input, color_bg);

    &amp;:focus {
      $focus: map-get($input, _focus);

      border-color: map-get($focus, color_border);
    }
  }
}
</code></pre>

<p><code>map-get()</code>関数を直接ネストすると読みづらいし、繰り返し書く必要が出てくる。普通にエレメントやモディファイア単位でネストを作ると思うので、そこでローカル変数を作ってやると良い。</p>

<p>ちゃんと実戦投入してないので、うまく動かないかもしれない……。</p>

<hr>

<p>BEM手法の単純な利用は<em>長い</em>・<em>気持ち悪い</em>に目をつぶれば、明確なルールに成りうるし、特にBEM道的なものから外れた使い方でもない。ただしSassの変数では<a href="/blog/coding/hyphen-and-underscore-in-sass-variable.html"><code>-</code>と<code>_</code>が同一視される仕様</a>があるので、エラーを特定しにくく、安心して使えるとは言い難い。コードが間違っているのにエラーなしに正常にコンパイルされてしまうので、変数のあたりで問題が起こった時に混乱する。</p>

<p>マップは未知数だけど、BEMのようなツリー構造を持つシステムには良くマッチしている。<code>map-get()</code>関数の使われ方も<a href="http://www.w3.org/TR/2013/WD-css-variables-1-20130620/#using-variables">CSS Variablesの<code>var()</code></a>とちょっと似ていて、それほどCSSからかけ離れた感じでもないんじゃないかと思う。</p>

<hr>

<p>将来のSass (3.3でではない)ではローカル・コンテキストでの変数はそのスコープで新しく作成され、スコープを抜けると削除されるらしいので、ローカル・コンテキストで変数を作るようにすれば<code>$type_subtype</code>くらいで済むようになる。BEMツリーの再現もファイルベースとセレクターのネストでやれば良い。けど、使えるようになるまではかなりの時間がかかりそうなので、それまで安定して使える手法として上記のいずれかか他の何かを確立したい。</p>
