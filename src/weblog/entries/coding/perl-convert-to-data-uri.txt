Data URIに変換するPerlスクリプト

<p>Data URIはまだそれほど使いまくっているわけでもないので、ブラウザーでやったりVimからWSHでやったりいろいろしてたけど、必要な時はだいたい複数ファイルを何回も変換する必要があったりしていろいろ大変なのでPerlで書き直して右クリックから使う方法も考えた。<a href="https://github.com/cho45/dotfiles/blob/master/bin/data-scheme">@cho45が書いたの</a>を見て重い腰が上がった。</p>

<pre><code class="language-perl">#!/usr/bin/env perl

use strict;
use warnings;

use MIME::Base64;
use MIME::Types;
use Path::Extended qw(file);

my $mt = MIME::Types-&gt;new();
my @r;

foreach (@ARGV) {
  my $f = file($_);
  my $t = $mt-&gt;mimeTypeOf($file-&gt;stringify);
  push(@r, 'data:' . ($t ? $t : 'text/plain') . ';base64,' . encode_base64(scalar($f-&gt;slurp(binmode =&gt; 1)), ''));
}

print join("\n", @r);

exit;
</code></pre>

<p><a href="https://metacpan.org/module/URI">URI</a>モジュールでの<code>new('data:')</code>だとBase64でエンコードするかどうかよしなにしてくれちゃうので、普通に<a href="https://metacpan.org/module/MIME::Base64">MIME::Base64</a>を使った。メディアタイプ判別のモジュールはいくつか試したけど、未知の時に例外吐いて死ぬ奴とか常に配列で返す奴とか色々アレなのが多くて、未知の場合は空で返ってくる<a href="https://metacpan.org/module/MIME::Types">MIME::Types</a>が結局一番ましな感じだった。</p>

<p>右クリックから使う場合は、</p>

<pre><code class="language-bat">@echo off

perl -S convert-to-data-uri.pl %* | clip
</code></pre>

<p>というようなバッチファイルを送るに置いておくとクリップボードに即コピーとかできる。</p>

<p><a href="http://sass-lang.com/">Sass</a>でコンパイル時にData URIに変換する関数とか書いて使ってたことも少しあったけど、コンパイルが遅くなりがちで辛いので直ぐに止めた……。</p>

<h2>追記</h2>

<p>Windowsだとバイナリ・ファイルがうまくいかないので<a href="https://metacpan.org/module/Path::Extended">Path::Extended</a>に変えて明示的に<code>binmode</code>を指定して読むようにした。<a href="/blog/coding/perl-load-binary-file-with-path-class.html">自分で書いて</a>て、<a href="http://b.hatena.ne.jp/charsbar/20100102#bookmark-18079992">id:charsbarに教えてもらった</a>のをきれいさっぱり忘れてた……。</p>
