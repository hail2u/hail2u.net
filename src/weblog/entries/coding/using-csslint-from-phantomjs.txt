PhantomJSからCSS Lintを使う

<p><a href="http://csslint.net/">CSS Lint</a>のCLIは<a href="http://nodejs.org/">Node</a>や<a href="http://www.mozilla.org/rhino/">Rhino</a>から使うようになっているので、Windowsだとちゃんと動くようにするまで結構面倒です(勿論ちゃんと動かせるようにはなります)。また、僕の場合はそもそもCSS Lintしか必要としていないので、Nodeを入れるのはちょっと大げさな気もします。そこで<a href="http://www.phantomjs.org/">PhantomJS</a>からCSS Lintを使うスクリプトを書いてみました。</p>

<pre><code class="language-js">var fs = require("fs"),
  f = phantom.args[0],
  css = fs.read(f);

if (phantom.injectJs("csslint.js")) {
  var i,
    r = CSSLint.verify(css),
    l = r.messages.length;

  if (l > 0) {
    for (i = 0; i &lt; l; i++) {
      var e = r.messages[i];

      if (!e.rollup) {
        console.log([f, e.line, e.col, e.message].join(":"));
      }
    }
  }
}

phantom.exit();
</code></pre>

<p>今のPhantomJSにはfsモジュールがあり、ファイルの読み書きができるようになっています。CommonJS由来のやつですね。実装済みのfsモジュールのプロパティや関数は<a href="http://code.google.com/p/phantomjs/wiki/ReleaseNotes">ReleaseNotes</a>に載っています。</p>

<p>CSS LintのJavaScriptライブラリを読み込むには<code>phantom</code>オブジェクトの<code>injectJs()</code>を使います。読み込みに成功した場合だけ<code>true</code>が返るようになっているので普通に<code>if</code>文で使ってやります。</p>

<p>あとは<code>CSSLint.verify()</code>するだけ！オプションを指定する場合はここで指定してやればいいので、引数でオプションを設定できるようにするのもそんなに難しくない……というかNode向けのCLIスクリプトからコピペするだけで動きそうです。</p>

<pre><samp>$ <kbd>phantomjs /path/to/csslint-phantomjs.js style.css</kbd>
</samp></pre>

<p>あとはこのようにCSSファイルを引数にして実行してやれば叱ってくれます。</p>

<pre><samp>style.css:7:1:Don't use IDs in selectors.
style.css:15:1:Don't use IDs in selectors.
style.css:21:1:Don't use IDs in selectors.
style.css:30:1:Don't use IDs in selectors.
style.css:35:1:Don't use IDs in selectors.
</samp></pre>

<p>うるさいよ。</p>

<p>PhantomJSは実行ファイルだけで動きますし、WindowsにおけるCSS Lintや<a href="http://www.jslint.com/">JSLint</a>の実行環境としてなかなか良いんじゃないかと思いました。</p>

<h2>追記</h2>

<p><code>rollup</code>が<code>true</code>の時はまとめメッセージのようなので出力には含めないようにしました。</p>
