npmのd*ependenciesでの~と^

<p>npmでは<a href="https://github.com/npm/npm/releases/tag/v1.4.3">v1.4.3</a>からデフォルトでは<code>^</code>を使ったバージョン指定でインストールした依存パッケージを<code>package.json</code>へ保存するようになった。後方互換性が確保されているはずなので、マイナーまでは無言で更新して良いということなのだろう。ただ、他からプラグイン的に利用されることを(も)想定しているNode.jsパッケージでは<code>~</code>の方が良いのかもしれないと思った。</p>

<p>例えば<a href="http://gruntjs.com/">Grunt</a>のプラグインなどだ。<a href="https://github.com/ai/postcss">PostCSS</a>のプロセッサーとしても使えるNode.jsパッケージもそう。これらは<code>^</code>でもそれ自体の後方互換性は維持されるわけだが、その上流との互換性は<code>dependencies</code>では解決できない。もちろん<code>peerDependencies</code>がそのためにできたので、きちんと使えばうまく機能するはずだ。しかし、それは動作が保証されるというだけにすぎない。</p>

<p>ここで<code>~</code>を使い互換性のある変更すらも排除したバージョン範囲に固定しておくと、動作のような曖昧なものではなく機能ベースで使うNode.jsパッケージの性格を固定できる。</p>

<p>互換性を確保したまま機能追加されたけど、その変わり別の機能の速度が落ちたなどということはよくある。特に将来的に削除する予定になってしまった機能ではありがちだろう。そういった機能<em>性</em>の面での変更は<a href="http://semver.org/">semver</a>では表現できないので、<code>~</code>のような機能性をもフリーズさせるであろう範囲に絞っておくというのは、プラグイン的に利用されるものでは効果的なのではないか。</p>
