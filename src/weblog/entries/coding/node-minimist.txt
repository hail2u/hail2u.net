minimist

<p>Node.jsでCLIツールを作る時に使えるコマンドライン・オプションのパーサーとして<a href="https://github.com/substack/minimist">minimist</a>をよく使うようになった。なかなかの好感触。同様のものとして<a href="https://github.com/substack/node-optimist">optimist</a>やその後継の<a href="https://github.com/chevex/yargs">yargs</a>が有名で、しっかりと作るならそっちの方がよく出来ているけど、数個のオプションの切り替えと余りの抽出くらいならminimistの方が楽。</p>

<p>インストールしたら以下のようにパースしたいコマンドライン・オプションの配列を渡すと、良きに計らってくれたオブジェクトが返ってくるので、それを使うことになる。</p>

<pre><code class="language-javascript">#!/usr/bin/env node

&#39;use strict&#39;;

var minimist = require(&#39;minimist&#39;);

var argv = minimist(process.argv.alice(2), {
  string: [&#39;output&#39;],
  boolean: [
    &#39;sourcemap&#39;,
    &#39;help&#39;,
    &#39;version&#39;
  ],
  alias: {
    h: &#39;help&#39;,
    o: &#39;output&#39;,
    v: &#39;version&#39;
  },
  default: {
    sourcemap: false,
    help: false,
    version: false
  }
});
</code></pre>

<p>やってくれるのはそれだけなので、例えばyargsではメソッドチェーンで書ける使い方の例示などは自分でゴリゴリ書くことになる。逆に言うとそういうのをあまり必要としなかったり、オプションを複雑に組み合わせて実行しないようなCLIツールを書くのに向いているということになる。</p>

<dl>
<dt>stringとboolean</dt>
<dd>配列で指定したオプション名の値を、文字列または真偽値として必ず解釈されるようにする。</dd>
<dt>alias</dt>
<dd>短いバージョンのコマンドの定義に主に使う。短いバージョンをキーに、参照先を値にして指定し、パース結果のオブジェクトでは参照先のみにまとめられる。</dd>
<dt>default</dt>
<dd>それぞれのコマンドライン・オプションが省略された時にデフォルトの値として設定される値を設定する。</dd>
</dl>

<p>余った引数や<code>--</code>以降のコマンドライン・オプションは<code>argv._</code>に全て格納されるので、それは自分でどうにかする必要があり、自分でどうにでも出来る。</p>

<hr>

<p>こういったCLIツールのためのコマンドライン・オプションのパーサー・ライブラリは、以下のようなゆらぎのある指定を同一視してくれるとツール自体が書きやすいだけでなく、利用するユーザーにも利便性がある。</p>

<pre><samp>$ <kbd>foo --output=out.txt</kbd>
$ <kbd>foo -o out.txt</kbd>
</samp></pre>

<p>こういう点でminimistはやり過ぎない程度にうまく出来ていて、かつ習得が容易で良いと感じた。なんとなくで使える。余った引数もうまいことしてくれるので色々面倒くさくなくて良かった。</p>
