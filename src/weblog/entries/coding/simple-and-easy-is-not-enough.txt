シンプルで簡単なだけでは十分ではない

<p>ある機能を追加しようとした時、いくつかある手法から選択する条件として、シンプルであることや簡単であることをが重要視されることは多い。けど、それと同じくらい今だけでなくこれからの機能との兼ね合いも考慮するべきで、シンプルで簡単という作業上のメリットのみで選択してしまうのは良くない。フロントエンドの人なのでclearfixを例にして書く。</p>

<p>マークアップの追加によるものを論外とすると、clearfixの実装としては主に以下の4つが挙げられると思う。</p>

<ol>
  <li><a href="http://www.positioniseverything.net/easyclearing.html">オリジナルの<code>content: &quot;.&quot;</code>を使ったもの</a></li>
  <li><a href="http://perishablepress.com/new-clearfix-hack/">マージンの相殺を考慮したもの</a></li>
  <li><a href="http://nicolasgallagher.com/micro-clearfix-hack/">Micro clearfix</a></li>
  <li><code>overflow: hidden</code>を指定するだけのもの</li>
</ol>

<p>シンプルであることや簡単であることのみを考えるのなら、間違いなく<code>overflow: hidden</code>を指定するだけのものを選択することになると思う。</p>

<p>なんといっても1行で済むことと、擬似要素が不要なことは魅力的。またclearfixを適用したい要素そのものに対して指定すれば良いという点も簡単でわかりやすい。その手軽さから採用されることが増えているような感じもする。一部フレームワークではほとんどベスト・プラクティス扱いだったり。</p>

<h2>使った結果どうなるのか</h2>

<p>今とこれからの機能との兼ね合いという点では<code>overflow: hidden</code>による手法にはかなりの難点がある。この手法が脚光を浴びた頃には使われていなかった<code>box-shadow</code>プロパティーや、ネガティブ・マージンによる飛び出した配置、<code>transform</code>プロパティーによるはみ出しなど、競合するものは多い。こういった影響の大きさを考えるとちょっと使いづらい。</p>

<p>競合とは少し違うが、マージンの相殺というCSSの(厄介だが)特徴的な機能を無効化してしまうMicro clearfixも、CSSの振る舞いに大きな変更を加えてしまうという点が気になる。知っててあえて使うのなら構わないという気もするけど、<code>* { box-sizing: border-box }</code>と似た危うさを抱えている気がする。</p>

<p>つまり、実現できること以外になにがしかが起き、それが未知数だったり、CSSとしては当たり前の挙動を崩しかねないものだったりするわけ。</p>

<h2>最小限で抑える</h2>

<aside class="sidenote">
  <p>最終手段や何かとして<code>overflow: hidden</code>を使った手法を覚えておくと助かることもある。違う用途で擬似要素を既に利用していて他の手法が使えない時なんかはまさにそう。また、他の理由で<code>overflow: hidden</code>を使っている要素になら改めてclearfixを使わなくても良いことがわかるので、CSSを少しスッキリさせることもできることになる。なんかの時には思い出してやると良いかも。</p>
</aside>

<p>つまり<em><code>float</code>プロパティーをclearする以外の機能を持っている</em>のが問題ということになる。これからの機能に対して正確に予知することは出来ないわけだし、なるべく影響がないようにやりたいことだけを実装する方が安全で望ましいんじゃないかな、と。</p>

<p>ハックを使わないとか、<a href="http://jquery.com/">jQuery</a>に対する<a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">Polyfill</a>、<a href="http://meyerweb.com/eric/tools/css/reset/">CSS Reset</a>に対する<a href="http://necolas.github.io/normalize.css/">Normalize.css</a>、といった<em>これからのウェブ</em>を意識した思想と通じる考え方だと思う。</p>

<hr>

<p>シンプルなことや簡単なことは、覚えやすさや導入の容易さという面でメリットは大きい。と同時に全容を把握したつもりにもなりやすく、それが万能で最高だと勘違いもしやすい。その機能は本当に必要なのか、その手法は実装したい機能だけを実現するものなのか、他の人はしっかり理解できるのか、デメリットをちゃんと説明できるのか。ある機能を実装する手法を選択するまでにもっといろいろ考えておくと後に苦しまなくて済むし、他人を苦しめなくて済むはず。</p>
