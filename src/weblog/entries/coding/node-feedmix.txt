node-feedmix

<p><a href="https://github.com/Leonidas-from-XIV/node-xml2js">xml2js</a>を使って複数のRSS 2.0をマージするパッケージ、<a href="https://github.com/hail2u/node-feedmix">FeedMix</a>を作った。手元で結構前から使っていたGruntタスクをNode.jsパッケージにして、それを叩くだけのGruntタスクを同梱するという形にした。</p>

<p>混ぜたいRSSファイルを配列として<code>merge()</code>の引数に指定する。XMLファイルではない場合はxml2jsが、RSSファイルではなさそうな場合はFeedMixがそれぞれ例外を吐いて落ちる。落ちる。</p>

<pre><code class="language-javascript">var feedmix = require(&#39;feedmix&#39;);
var fs = require(&#39;fs&#39;);

var a = f.readFileSync(&#39;a.rss&#39;, &#39;utf8&#39;);
var b = f.readFileSync(&#39;b.rss&#39;, &#39;utf8&#39;);
var c = f.readFileSync(&#39;c.rss&#39;, &#39;utf8&#39;);
var m = feedmix.merge([a, b, c], {
  trim: true
});
</code></pre>

<p>これで<code>m</code>の中身が<code>b.rss</code>と<code>c.rss</code>のすべての<code>item</code>要素を<code>a.rss</code>へ混ぜ込んだJavaScriptオブジェクトになる。<code>item</code>は<code>pubDate</code>要素の値を使ってソートされるが、切り詰められたりはしない。<code>channel</code>要素は<code>a.rss</code>のものが採用されるが、<code>lastBuildDate</code>要素の値のみ最初の<code>item</code>要素の<code>pubDate</code>要素の値がコピーされ書き換えられる。</p>

<pre><code class="language-javascript">console.log(feedmix.stringify(m, {
  cdata: true,
  xmldec: {
    encoding: &#39;UTF-8&#39;,
    version: &#39;1.0&#39;
  }
}));
</code></pre>

<p>XMLへの変換は<code>stringify()</code>へパース結果のオブジェクトを渡して行う。xml2jsのビルダーの単なるラッパーで、特に何もしない。</p>

<p>また<code>merge()</code>では第二引数にxmljsのパーサーのオプションが、<code>strigify()</code>ではxml2jsのビルダーのオプションがそれぞれ指定できる。ただしパーサーの<code>explicitArray</code>オプションはパース後のオブジェクトの構造を変えてしまうので、強制的に<code>true</code>にしているため指定しても効果はない。他にも指定するとおかしくなるオプションがあるかもしれない。</p>

<hr>

<p>同梱されているGruntタスクも凝ってはいない。</p>

<pre><code class="language-javascript">feedmix: {
  main: {
    options: {
      builder: {
        cdata: true,
        xmldec: {
          encoding: &#39;UTF-8&#39;,
          version: &#39;1.0&#39;
        }
      },

      parser: {
        trim: true
      }
    },

    dest: &#39;build/feed&#39;,
    src: [
      &#39;src/feed/index.rss&#39;,
      &#39;build/blog/feed&#39;
    ]
  }
}
</code></pre>

<p>こちらは<code>src</code>でファイルを指定してやると<code>dest</code>にマージした結果を吐いてくれる。動的マッピングだと配列の順序が思ったようにいかない可能性があるので、普通に指定したほうが良いだろう。<code>options.builder</code>と<code>options.parser</code>経由で<code>stringify()</code>と<code>merge()</code>に渡すオプションを指定することはできるので、入出力もモジュールと同等に制御することができる。</p>

<hr>

<p>RSS 1.0とかAtomとかもうよく知らないので無視した。RSS 0.9xなどは通ってしまいそうな気がする。</p>
