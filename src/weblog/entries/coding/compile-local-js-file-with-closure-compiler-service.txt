ローカルのJavaScriptファイルをClosure Compiler ServiceのREST APIでコンパイルできるように

<p>前に作って愛用している<a href="/blog/coding/perl-compile-javascript-code-with-google-closure-compiler-service.html">Closure Compiler ServiceのREST APIを叩くPerlスクリプト</a>にローカルのJavaScriptファイルを読み込んでコンパイルに含められる機能を付けた。<a href="http://code.google.com/p/closure-compiler/">Closure Compiler</a>の<a href="http://code.google.com/p/closure-compiler/downloads/detail?name=compiler-latest.zip&amp;can=2&amp;q=">JARファイル</a>を使ってローカルで動かしても良かったんだけど、APIやWeb UIのコメントでオプション設定を書く方法(<a href="http://www.greasespot.net/">Greasemonkey</a>的な奴)が気に入っているので<code>@code_path</code>というパラメーターを追加する形にした。</p>

<p>コンパイルするJavaScriptファイルでは</p>

<pre><code class="language-js">// ==ClosureCompiler==
// @code_path foo.js
// @code_path bar.js
// @code_url  http://example.com/js/buz.js
// ==/ClosureCompiler==
</code></pre>

<p>というように<code>@code_path</code>で取り込むJavaScriptファイルのパスを指定するだけ。<code>@code_url</code>等の他のオプションとはバッティングしないけど、依存関係によって書く順序には注意する必要がある。これらに続けて普通にJavaScriptコードも書けるとかそこらへんはWeb UIと一緒。</p>

<p>コンパイル方法は前のと同じで標準入力と出力で。</p>

<pre><samp>$ <kbd>gccs.pl &lt;test.js &gt;test.min.js</kbd>
</samp></pre>

<p>肝心のgccs.plは以下の通り。</p>

<pre><code class="language-perl">#!/usr/bin/env perl

# gccs.pl - Compile your JavaScript code with Google Closure Compiler Service
# Usage:    gccs.pl &lt; &lt;original file&gt; &gt; &lt;compiled file&gt;
# License:  http://hail2u.mit-license.org/2009
# Modified: 2012-01-04T18:43:15+09:00

use strict;
use warnings;

use JSON;
use LWP::UserAgent;
use Path::Class qw();

my @params = (
  "output_info",   "compiled_code",
  "output_format", "json",
);

&amp;main;
exit;

sub main {
  my @code = &lt;STDIN&gt;;
  push @params, "js_code", join("", @code);
  my $idx = 0;
  my $found_metadata = 0;

  while (my $line = $code[$idx++]) {
    if ($line =~ /^\/\/ ==ClosureCompiler==/) {
      $found_metadata = 1;
      last;
    }
  }

  if ($found_metadata) {
    while (my $line = $code[$idx++]) {
      if ($line =~ /^\/\/ ==\/ClosureCompiler==/) {
        last;
      } elsif ($line =~ /^\/\/ @(\S+)\s*(.*)$/) {
        if ($1 eq "code_path" &amp;&amp; -e $2) {
          my $js_code = ";" . Path::Class::File-&gt;new($2)-&gt;slurp() . ";";
          push @params, "js_code", $js_code;
        } else {
          push @params, $1, $2;
        }
      }
    }
  }

  &amp;compile(@params);
}

sub compile {
  my $ua = LWP::UserAgent-&gt;new;
  my $res = $ua-&gt;post("http://closure-compiler.appspot.com/compile", \@_);

  if ($res-&gt;is_success) {
    my $c = from_json($res-&gt;decoded_content);

    if (defined $c-&gt;{"serverErrors"}) {
      foreach (@{$c-&gt;{"serverErrors"}}) {
        warn "Error(" . $_-&gt;{"code"} . "): " . $_-&gt;{"error"};
      }

      die "Failed to compile";
    } else {
      binmode STDOUT;
      print $c-&gt;{"compiledCode"};
    }
  } else {
    die $res-&gt;status_line;
  }
}
</code></pre>

<p>一応セミコロンの無いダメなJavaScriptファイルのことも考慮して前後にセミコロンを挟んでやったりはしておいた。ちょっと美しくないけどClosure CompilerをSIMPLE_OPTIMIZATIONS以上で通せば消えるのでまぁ良いかなとか。</p>

<p>普通にバラバラにスクリプトを書いて、Makefile的なJavaScriptファイルで<code>@code_path</code>を使って参照し、それをコンパイルとかで使ってください。<code>cat</code>よりはマシ程度ですけどね！</p>
