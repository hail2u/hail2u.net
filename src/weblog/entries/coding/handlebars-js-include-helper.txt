Handlebars.jsのincludeヘルパー

<p><a href="http://handlebarsjs.com/">Handlebars.js</a>でのテンプレートファイルの取り込みはpartial使えみたいな感じだけど、partialにするものを全て定義しなくちゃいけない。partialのテンプレートでの記述もpartialごとに変わる。それをSSIのインクルードみたいに<code>{{include &quot;foo.hbs&quot;}}</code>でコンテキストを考慮して取り込めたら簡単なんじゃないかなーと。でincludeするだけのヘルパーを作って使うようにしたメモ。</p>

<p>色々遠回りしたけど、結局はテンプレート・ファイルを読んでコンパイル→レンダーする関数を作ってそれをヘルパー関数にすれば良いだけだった。Handlebars.jsがカシコイのでコンテキストとかは自動的に良しなにしてくれる。</p>

<pre><code class="language-javascript">var fs = require(&#39;fs&#39;);
var hbs = require(&#39;handlebars&#39;);

function applyTemplate(file, data) {
  var tmpl = hbs.compile(fs.readFileSync(file, &#39;UTF-8&#39;));

  return tmpl(data);
}

hbs.registerHelper(&#39;include&#39;, function (file, options) {
  return new hbs.SafeString(applyTemplate(file, this));
});

console.log(applyTemplate(&#39;./template.hbs&#39;, {
  &quot;he&quot;: {
    &quot;name&quot;: &quot;John&quot;
  },
  &quot;she&quot;: {
    &quot;name&quot;: &quot;Jane&quot;
  }
}));</code></pre>

<p>使うテンプレート・ファイルは、<code>template.hbs</code></p>

<pre><code class="language-handlebars">{{#he}}His name is {{include &quot;./include.hbs&quot;}}{{/he}}
{{#she}}His girlfriend name is {{include &quot;./include.hbs&quot;}}{{/she}}</code></pre>

<p>と、<code>include.hbs</code></p>

<pre><code class="language-handlebars">{{name}}</code></pre>

<p>の2つ。実行すると結果はこうなる。</p>

<pre><samp>His name is John

His girlfriend name is Jane</samp></pre>

<p><code>include</code>ヘルパー関数への引数で指定するテンプレート・ファイルのパスが、それを記述するテンプレート・ファイルからの相対パスにならない辺りが面倒くさいのは直した方が良さそう。</p>

<hr>

<p>テンプレート・ファイルからテンプレート・ファイルを呼ぶ必要があるケースというのはあんまりない。大抵の場合はデータとテンプレート・ファイルの書き方の工夫でどうにかなる。Handlebars.jsでは<code>{{#if}}</code>とかもあるので、そっちでどうにかするのが王道(ロジック入っちゃうけど)で、テンプレート・ファイルも増えずメンテナンス性が高い気がする。</p>

<p>こういったテンプレート・ファイルのインクルードが威力を発揮するのは、微妙に違うテンプレート・ファイルを使わざるを得ない時に共通化したい部分を切り出すというケースやHTML5のようなモジュール化しやすい形式で出力するケース。前者ではテンプレートの一部をコピペしたりすることがなくなり、後者ではテンプレート・ファイルの編集しやすさが向上する。</p>
