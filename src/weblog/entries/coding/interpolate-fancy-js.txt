interpolate-fancy.js: JavaScriptのごく簡単なテンプレート・システム

<p><a href="http://www.blosxom.com/" title="blosxom :: the zen of blogging ::">blosxom</a>のプラグインに<a href="http://www.blosxom.com/downloads/plugins/interpolate_fancy" title="interpolate_fancy">interpolate_fancy</a>というものがある。このプラグインは、あまり強力ではないblosxomのテンプレート・システムを強化するもので、ベーシックなif/unless系の分岐が可能になる(他にインストールしているプラグインのサブルーチンを呼べたりもする)。あまりややこしくない正規表現による置換で実装されている。というわけで、簡単なテンプレートシステムとして使うためにJavaScriptに移植してみた。</p>

<p>ベースになったのは<a href="http://prototype.conio.net/" title="Prototype JavaScript Framework: Class-style OO, Ajax, and more">prototype.js</a>の1.5.0_rc1に実装されている<code>Template</code>クラス。これのテンプレート変数の書き方をinterpolate_fancyに合わせた<code>&lt;foo/&gt;</code>という形固定にして、条件分岐の正規表現を付け加えるという形でライブラリにしてみた。</p>

<p>使い方は、interpolate-fancy.jsを読み込んでおいた上で、</p>

<pre><code class="language-js">var tmpl = new InterpolateFancy(&#39;&lt;foo/&gt; &lt;bar/&gt; &lt;foobar/&gt;&#39;);
return tmpl.evaluate({
  foo:    &#39;this is foo.&#39;,
  bar:    &#39;this is bar.&#39;,
  foobar: &#39;this is foobar.&#39;
});
</code></pre>

<p>と、テンプレートを渡して初期化し、データを渡して<code>evaluate()</code>(つまりprototype.jsのTemplateクラスと一緒)。データはフラットな連想配列で、<a href="http://json.org/" title="Introducing JSON">JSON</a>というわけではない。テンプレートはinterpolate_fancyと一緒、といってもほとんどの人は知らないのでちょこっと書いておく。</p>

<pre>&lt;foo/&gt; display &quot;foo&quot;

&lt;?foo&gt;display if &quot;foo&quot; is defined&lt;/?&gt;
&lt;?!foo&gt;display if &quot;foo&quot; is not defined&lt;/?&gt;

&lt;?foo eq=&quot;123&quot;&gt;display if &quot;foo&quot; is equal 123&lt;/?&gt;
&lt;?foo ne=&quot;123&quot;&gt;display if &quot;foo&quot; is not equal than 123&lt;/?&gt;
&lt;?foo lt=&quot;123&quot;&gt;display if &quot;foo&quot; is less than 123&lt;/?&gt;
&lt;?foo gt=&quot;123&quot;&gt;display if &quot;foo&quot; is greater than 123&lt;/?&gt;
&lt;?foo like=&quot;123&quot;&gt;display if &quot;foo&quot; includes 123&lt;/?&gt;
&lt;?foo unlike=&quot;123&quot;&gt;display if &quot;foo&quot; does not include 123&lt;/?&gt;
</pre>

<p>最初のが基本形で<code>foo</code>の値に置換される。上記のデータの場合だと一行目は<code>this is foo.</code>になるということ。次がdefined/undefinedの分岐で、<code>foo</code>が定義されているかどうか(または定義されていないかどうか)で<code>&lt;/?&gt;</code>までを表示するかどうか分岐する。残りは簡単な比較による分岐で、文字列を比較・数字の大きさを比較・正規表現で検索による結果の真偽値で分岐。簡単な実験HTMLを作っておいたので、これも参考にどうぞ。</p>

<p>渡せるデータがフラットな連想配列のみだったりとか、ループが無いのでループしたいときはテンプレートを小分けにしなくてはならないとか、そもそも書きづらいとかいろいろと欠点がある。特に前者はどっかから拾ってきたJSONのデータを丸投げというとても便利そうな手段が使えないということになるので、JSONが確固たる位置を築きはじめた現在においてはかなり致命的な欠点と言える。</p>

<p>それでも要素をシコシコ作って<code>appendChild()</code>よりはマシ・・・だと思う。てか、こういったテンプレート・システムのことを考えてると「XMLをXSLTで最強じゃん？」みたいな方向に思考が流れていってしまう。</p>
