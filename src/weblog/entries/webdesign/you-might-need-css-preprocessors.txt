CSSプリプロセッサーの必要性

<p>やはり<a href="http://sass-lang.com/">Sass</a>は必要だと考えている。あるいは<a href="http://lesscss.org/">LESS</a>でも<a href="http://learnboost.github.io/stylus/">Stylus</a>でも良い。それは<a href="http://www.w3.org/TR/css-variables-1/">CSS Variables</a>の実装が落ち着き、行き渡っても、だ。もちろんその時にはCSSプリプロセッサーの変数を使わずに、CSS Variablesを使って書いた方が良いけれども。</p>

<p>CSSプリプロセッサーの変数やネスト、そしてミックスインはショートカット記法に過ぎない。DRYを加速させるだけで、それ以上特に付け加えられる何かはあまりない。変数への命名規則の採用による意味付けやネストでの構造化は有用・有益であることには気づくが、本質的な意味付けや構造化をもたらすものではない。これらの機能はCSSの貧弱さと比較すると輝かしく見えるものの、プリプロセッサーを使ってまで利用する価値があるかというと疑問が残る。</p>

<p>ならばなぜ必要だと考えるのか。</p>

<p>それはウェブページの要素間でのルールセットの共有ではなく、セレクター同士での意味合いの共有を行える機能、Sassであるなら<code>@extend</code>があることだ。これによりルールセットを意味のある固まりとして定義でき、複数のセレクターで<em>その意味を</em>共有できるようになる。これによりようやくOOCSSの真なる実現がなされたと言って良い。</p>

<p>つまりここに魅力を感じない、またはそれによるCSSとの乖離を問題視するのならCSSプリプロセッサーは不必要ということだ。<code>@extend</code>を根幹に据えたSassのコードは、CSSだけでCSSらしく書かれたCSSのコードとは大きく違ってくる。それは<code>@extend</code>を使ったSassの生成するCSSコードが複雑なことからも垣間見えるだろう。リニアに上書きされていくCSSとは違い、<code>@extend</code>を使ったSassのコードでは拡張され、継承されていく。</p>

<hr>

<p>Sass 3.3では多くの機能が追加された。マップであったり<code>@at-root</code>であったりだ。これらの機能はちょっと大仰で、CSSからかけ離れたものと感じ、もっとコンパクトな……いっそのことCSSに回帰しようと考えた、考えている人も多いだろう。</p>

<p>僕も少なからずそのような感じを持ったし、実際に新機能の多くは直接的な形では使うべきではないと感じている。これらはプレースホルダー・セレクターでカプセル化した中、またはプレースホルダー・セレクターから参照されるミックスイン等の中で使われるべきものだと思う。そう使うことにより、プレースホルダー・セレクターやその先ではSassを駆使して<em>オブジェクトらしきもの</em>を作成し、それを多少ネストしたくらいの<em>CSSらしく書かれたコード</em>から参照していくように記述できる、というわけだ。</p>

<p>大きな変更に抵抗を感じる人も多いだろうが、これらの変更は<em>CSSらしく書いた上でSassを使ってOOCSSを具現化できる</em>といったような概念的な変化をもたらすものだ。こんな風に、複雑な機能が大量に追加されただけではないと捉えてみると、少し感じ方が変わるのではないだろうか。</p>
