right: 100%か負のマージンか

<figure>
  <img src="/images/blog/right-100-percent-or-negative-margin.png" alt="How to Properly Use CSS Property">
</figure>

<p>これまでCSSにはレイアウト方法があまりなかった。これからは<a href="http://www.w3.org/TR/css3-flexbox/">Flexible Box Layout</a>や<a href="http://www.w3.org/TR/css3-multicol/">Multi-column Layout</a>、<a href="http://www.w3.org/TR/css3-grid-layout/">Grid Layout</a>を始め、<a href="http://www.w3.org/TR/css3-positioning/#position-property"><code>position</code>プロパティーに使える値の拡充</a>などもあり柔軟に行えるようになるだろうが、それはけっして既存のレイアウト方法が不必要になるということではない。選択肢が増えると受け止めるべきだ。例えば<code>right: 100%</code>や負のマージンを使って親要素の外側左にレイアウトする手法はそのまま使い続けることになるだろう。</p>

<p>ほとんど同じレイアウトを実現する<code>right: 100%</code>と負のマージンの使い分けを通して、レイアウト方法の選択をどう行うべきかという基本的な思想を解説することにより、今後増えてくるレイアウトの選択肢にどう相対すべきかがわかるのではないかと思う。そしてそれはCSSプロパティーの意図された使い方を理解するということでもある。</p>

<p>この記事は<a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>の13日目、ちょうど真ん中の記事になる。明日は<a href="https://twitter.com/thleap">@thleap</a>さんが書くようだ。</p>

<h2>right: 100%</h2>

<p><code>right: 100%</code>を使うと、その要素の右端を親要素の左端と揃えることになる。親要素とは<code>margin-right</code>プロパティーにより自由に位置関係を調節することができる。</p>

<p class="seealso">View Demo: <a href="/pub/test/517.html">right: 100%</a></p>

<pre><code class="language-css">.test {
  position: relative;
}

.test figure {
  margin-right: 16px;
  position: absolute;
  top: auto;
  right: 100%;
  width: 320px;
}</code></pre>

<p><code>right: 100%</code>は固定なので、位置調整を行う<code>margin-right</code>プロパティー以外は再利用可能になる。Sassなどではミックスイン化するのも容易だろう。ただし<code>width</code>プロパティーで明示的に幅を指定する必要があるのには注意が必要だ。</p>

<p><code>right: 100%</code>を使うことの意味は、<em>要素の右端を基準にしたい</em>という意思をはっきりさせることだ。更に<em>right</em>と名のつくプロパティーで位置を調節することにより、その意思を補強できる。シングルカラムのブログに良くある日付やタグだけ飛び出させてレイアウトというような場合には、メインに対して右端を基準に揃えたいということになるので、まさにピッタリだろう。</p>

<h2>負のマージン</h2>

<p>負のマージンを使うと要素をその分だけ外側に拡大するような形になる。更に<code>position</code>プロパティーと組み合わせることにより、拡大ではなく<em>ずらす</em>という形にできるので、親要素の外側にレイアウトすることが可能になる。</p>

<p class="seealso">View Demo: <a href="/pub/test/518.html">Negative Margin</a></p>

<pre><code class="language-css">.test {
  position: relative;
}

.test figure {
  margin-left: -336px;
  position: absolute;
}</code></pre>

<p>右端を揃えるコードに比べてシンプルになっているが、それは本質的な部分ではない。<code>-336px</code>はマジック・ナンバー気味だが、<code>calc()</code>で計算できるようなものなのでそれほど問題にはならないだろう。また、<code>top</code>プロパティー等を利用していないので、<code>absolute</code>の代わりに<code>fixed</code>を使うと<a href="/pub/test/518-2.html"><em>その位置で</em>本文についてくるように</a>なってくれたりもする。使い所は限られてはいるが<code>right: 100%</code>では実現できない面白い効果ではあるだろう。</p>

<p><code>margin-left</code>プロパティーで負のマージンを使うことにより、<em>左にずらす</em>という意思をはっきりとさせることができる。具体的には固定幅の12カラム・レイアウトにおいて、1カラム分左にずらしたいなどというケースでは<code>right: 100%</code>よりも適当になるだろう。CSSフレームワークでpullなどと呼ばれている機能がそれにあたり、負のマージンが使われることが多い。</p>

<hr>

<p>簡単に言えば、レイアウト方法の選択はそのコードの簡便さや慣れなどという理由で行うべきではないということだ。<em>なぜ</em>そのレイアウト方法を選択したのかはっきりと説明できないのはもっての外で、できることならそういう説明を言葉で行わなくても、コードによりその意思が十分に伝わることが望ましい。使ったCSSプロパティーの名称などは大いにその助けになる。</p>

<p>今後増えてくる新しいレイアウト方法も含め、<em>どうレイアウトできるか</em>ではなく<em>どのような意図のレイアウトなのか</em>を意識して選択するべきだ。その結果としてあえて意図をストレートに反映したレイアウトを選択しないというケースも十分にありうる。例えばブラウザーのバグや未実装への対応のためなどはそういったケースに当てはまることになる。</p>

<p>いずれにしても簡便さや慣れを元にレイアウトを選択することは、<a href="http://stackoverflow.com/">Stack Overflow</a>の代わりに過去からコピー・アンド・ペーストしているようなものだ。動作は保証されやすいが、コードにその時の意思は込められない。</p>

<hr>

<p>新たなレイアウト方法が置き換えるのは、既存のレイアウト・テクニックのごく一部に過ぎない。それらはまるで魔法のようではあるが、決して全てをまかなえる万能の魔法ではない。様々なレイアウト・テクニックの意図を理解し、適切に選択する必要がある。CSSの仕様ではプロパティーの名前に強い意味が込められているので、多くの場合やりたいことを直感的に表現していたり、近い感覚の名称のCSSプロパティーを使ったレイアウト・テクニックを選択するのが良いだろう。</p>
