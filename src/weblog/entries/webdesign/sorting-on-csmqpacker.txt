CSS MQPackerの行うソート

<p><a href="https://github.com/hail2u/node-css-mqpacker">CSS MQPacker</a>に加わったソート機能は完全なものではない。完全なものを実現するのが難しいこともあるが、必要とされていないからでもある。メインは<code>min-width</code>クエリーに絞り、それ以上は自前で用意してもらうというのは妥協であると同時に、僕の能力の限界でもある。</p>

<p>メディア・クエリーにおいて<code>min-width</code>クエリーは以下のいずれかの書かれ方をする。</p>

<ol>
<li><code>(min-width: 100px)</code></li>
<li><code>(min-width: 100em)</code></li>
<li><code>(min-width: 100px) and (min-width: 200px)</code></li>
<li><code>not (min-width: 100px)</code></li>
<li><code>print and (min-width: 100px)</code></li>
<li><code>print, (min-width: 100px)</code></li>
</ol>

<p>CSS MQPackerのソート機能はこれらすべてを対象にするわけではない。</p>

<section>
<h1 class="subheading">シンプルなもの</h1>

<p>もちろん<code>min-width</code>クエリーのみのものは対象になる。この種類のクエリーには<code>screen</code>など主要なメディア・タイプを含むこともある。後述するが特別に無視されるのは<code>print</code>と同時に指定された場合だけだ。</p>

<p>単一の<code>min-width</code>クエリーが<code>px</code>単位を使って書かれている場合には話は単純で、それらの値を取り出して昇順にソートする。世の7割近くのメディア・クエリーはこれでカバーできるのではないかと思われる。</p>
</section>

<section>
<h1 class="subheading">単位の違い</h1>

<p><code>px</code>単位以外で書かれることももちろんあるし、混ざることもある……かもしれない（このウェブサイトでは混ざっている）。単位の違いは完全に吸収することは出来ない。CSS 2.1の時代からそうだが、CSSのみでは異なる単位間の完全な変換は行えないからだ。<code>v*</code>単位はもちろん、<code>pt</code>や<code>pc</code>も無理がある。それら対応していない単位を使っている場合には、例え<code>min-width</code>クエリーであってもソートの対象には含まれない。</p>

<ol>
<li><code>ch</code></li>
<li><code>em</code></li>
<li><code>ex</code></li>
<li><code>px</code></li>
<li><code>rem</code></li>
</ol>

<p>ソート対象に含まれる単位は以上の5つになる。これらの単位を<code>px</code>単位に変化した上で昇順にソートするというわけだ。<code>em</code>と<code>rem</code>は<code>16px</code>を基準に、<code>ch</code>と<code>ex</code>に関しては初期フォントをArialのNormalと仮定して変換している。</p>
</section>

<section>
<h1 class="subheading">複数のmin-width</h1>

<p>本当は意味が無いのだが、クエリーには<code>and</code>キーワードを使って複数の<code>min-width</code>クエリーが含まれることもあるかもしれない。<code>min-width</code>クエリーの場合、複数指定されるとその最も<em>大きい</em>値で発動することになる（<code>and</code>は論理積だからだ）。</p>

<p>そのため、複数の<code>min-width</code>クエリーが見つかった場合は、その中で最大の値を取り出し、それのみを使ってソートを行うことになる。</p>
</section>

<section>
<h1 class="subheading">否定のクエリー</h1>

<p>メディア・クエリーでは<code>not</code>キーワードを使ってそのクエリーを否定することができる。<code>min-width</code>クエリーの場合は<code>max-width</code>クエリーとほぼ同じような扱いになると考えて良いだろう。</p>

<p>これらはソートに含める必要はないので、無視する。</p>
</section>

<section>
<h1 class="subheading">printメディア・タイプ</h1>

<p>印刷向けスタイルシートはそれなりに需要が増えてきた。今はPDFで印刷するなども手軽に行えるようになったので、そこそこ提供しているウェブサイトも増えてきた印象だ。もちろん<code>min-width</code>クエリーと組み合わさって、用紙の大きさによって調整を行うこともあるだろう。</p>

<p>多くの場合はスクリーン向けと印刷向けのCSSを混ぜて書くことはないと思われるため、これも無視する。本当は<code>print</code>メディア・タイプを含むクエリーを特別扱いしてやると良いのだろうが、まだそこまでの需要はないだろう。</p>
</section>

<section>
<h1 class="subheading">クエリー・リスト</h1>

<p>メディア・クエリーでは複数のクエリーをリストにして指定することもできる。その場合、カンマ区切りで指定してやることになる。このカンマは論理和になるORと同じ意味を持つので、カンマで区切られたクエリーのいずれかにこれまでのルールに従い対象とするクエリーがあった場合、ソートされる。</p>

<p>例え他に<code>print</code>メディア・タイプを含むクエリーがあったとしても、だ。</p>
</section>

<hr>

<p>CSS MQPackerではこのようにしてソートの対象を選び出し、それらのみをソートする。対象ではない他のクエリーは、元のCSSファイルでの出現順を維持してまとめられる。また、ソートされたクエリーは他のクエリーの<em>前に</em>配置されるので、印刷向けCSSが意図せず前に来てしまうなどということは起こらない。</p>

<p>概ねうまく動作していることと思われる。バグはもちろん、対象を広げて欲しいなどといった要望は是非イシューを立てて欲しい。</p>

<hr>

<p>そのうち英語でリポジトリーのWikiにちゃんと書きたい。</p>
