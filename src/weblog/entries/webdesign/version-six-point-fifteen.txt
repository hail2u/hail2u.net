v6.15

<p>ブラウザーのサイズによって文字の大きさを少し変えるようにしたので、それに合わせて<code>em</code>を使ってレイアウトするようにした。縦のリズムもちゃんと計算してやろうかと思ってるけど面倒になってきた。やって思ったのはやっぱり<code>calc()</code>が必要ということ。違う単位を混ぜられるのはとても手軽だ。<a href="http://sass-lang.com/">Sass</a>でも無理だし、将来的にもできるようにならないし。faviconもちょっとだけ変えた。</p>

<h2>カラム定義</h2>

<p>カラムは本文を9カラムで<code>48em</code>程度にしたかったので以下のようにした。</p>

<pre><code class="language-scss">$column: 3.5em;
$gap:    1em;
</code></pre>

<p>これで9カラムで<code>47.5em</code>になる。<a href="/about/style-guide/">Style Guide</a>だとそこらでダブルクリックするとカラムがオーバーレイ表示されるようになってる(<a href="https://github.com/hail2u/scss-partials/blob/master/_grid-overlay.scss">_grid-overlay.scss</a>使った)。12カラムが収まる場合は<a href="http://www.w3.org/TR/css3-multicol/">マルチカラム</a>……にしたかったけど、とりあえずはタイトルや日付けをちょっとずらすだけにした。マルチカラムにまだ慣れてなくて、間に画像や<code>pre</code>要素が挟まるとうまくスタイル書けない。ちゃんとセクショニングしてしっかりマークアップしとくとマルチカラムにしやすそうだなぁ。</p>

<h2>文字サイズの調整</h2>

<p>文字の大きさの切り替えはあまり細かく考えずに計算で誤魔化した。</p>

<pre><code class="language-scss">body {
  // Decrease font size
  $too-narrow: $safe-for-content * 0.875 * 0.875;

  @media screen and (max-width: $too-narrow) {
    font-size: 87.5%; // 14px
  }

  // Increse font size more
  $wide-enough: $safe-for-full * 1.25 * 1.25;

  @media screen and (min-width: $wide-enough) {
    font-size: 125%; // 20px
  }
}
</code></pre>

<p>使うサイズを先に決めて、その倍率の二乗をかけたサイズに横幅が到達したら切り替えている(4段階)。根拠はない。ただこの処理も<code>em</code>を使って振り分けているので、実装によってはおかしくなりそう(切り替えぎりぎりのあたりだと条件を満たして切り替えた後に条件が満たされなくなって元に戻るの無限ループとかありえそう)で不安がある。ここだけは<code>px</code>にした方が安全そう。</p>

<p>リリース版のSassではまだ<a href="http://www.w3.org/TR/css3-mediaqueries/">Media Queries</a>で変数を利用することができないので、こういう書き方をするためには開発版をインストールする必要がある。</p>

<pre><samp>$ <kbd>gem install --prerelease sass</kbd>
</samp></pre>

<p>開発版では<code>%foo</code>という<code>@extend</code>専用のプレースホルダー・セレクターも書けるようになったりしててとても楽しいと思うので、大体Sass覚えたよーという人は試すとライフチェンジングするはず。</p>

<h2>他</h2>

<p>フォントはあまり変えていないけど、見出しに使っていた<a href="http://www.google.com/webfonts/specimen/Andika">Andika</a>はやめた。<a href="/blog/webdesign/opera-and-web-fonts.html">Operaでのバグ</a>の件でLucidaスタックに戻したい感じではある……。</p>

<p>後はフッターのアイコンを<a href="https://github.com/hail2u/scss-partials/blob/master/_corporate-colors.scss">_corporate-colors.scss</a>を使ってオンマウスで色が変わるようにしたくらい。あんま意味ないので最初からカラフルでもいいかも。</p>

<hr>

<p><code>em</code>にした理由は主に2つある。</p>

<p>今のところ<code>px</code>はほぼ絶対的なサイズとして扱えてて、かつ、<code>cm</code>のように非直感的な単位ではないのでだいたい期待した通りに動いてくれるけど、今後のデバイスとOSやブラウザーの実装次第では<code>px</code>では駄目になるんじゃないかと思っていることがひとつ。画面サイズとドットピッチ、DPI、最後にスケーリングという様々な要素が絡みあう世界を<code>px</code>だけでどうにかされることを期待するのはあまりに甘いと思う。<code>em</code>と<code>font-size</code>の<code>%</code>指定を組み合わせなら、そのあたりはブラウザー側で(結果的に)吸収してくれることになり……そう……というかなって欲しい。</p>

<p>勿論DPI等を意識しないという意味では<code>%</code>で全部やっても良いと思うんだけど、<code>%</code>ではどうしてもデバイス(というかブラウザー)の描画領域を強く意識することになる。そもそもの基準が描画領域になるので、<em>このサイズに収まるようなレイアウト</em>という考えから脱却できない。</p>

<p>つまりもうひとつは1行の文字数を基準にしてレイアウトしたくなったということ。今までも全角50文字前後になるようにしてたつもりだけど、<code>px</code>単位に置き換えてやってた。Sass使い始めてからはSassでやればいいかなーと思ってたけど、せっかく<code>em</code>単位あるんだしそれ使うのがいいよね！とかそういう軽い感じ。</p>

<p><code>em</code>だと安心とかそういうことはありえないけど、この<em><code>1px</code>へのこだわり</em>を捨てられた感じはちょっと開放感ある。ただ最初にも書いたけどやはり<code>calc()</code>がないと辛そう。違う単位を混ぜられて簡単便利っていうのも勿論あるんだけど、無いとどうしても<code>em</code>単位を<code>px</code>単位等に脳内で置き換えてイメージしてからCSSを書きがちになる。それでは<code>em</code>を使う意味が薄れてしまうので、<code>em</code>であるべきところは<code>em</code>、<code>px</code>であるべきところは<code>px</code>で書ける<code>calc()</code>は重要になるんじゃないかと思う。</p>

<p>無駄に長くなった。<code>em</code>の話はまた別に書こうかな。<code>%</code>を使ったカラム・レイアウトはダメそうとかそういうのも含めていろいろ書けそう。などと書くとだいたい書かない法則。</p>

<h2>追記</h2>

<p><code>em</code>単位でのMedia Queriesで無限ループになりそうという心配は杞憂だった。</p>

<blockquote>
  <p>For example, in HTML, the ‘em’ unit is relative to the initial value of ‘font-size’.</p>
</blockquote>

<p>&mdash; <cite><a href="http://www.w3.org/TR/css3-mediaqueries/#units">Media Queries</a></cite></p>

<p>と書いてあるので<code>body</code>要素の文字サイズを変更しても影響ない。</p>
