CSSWring

<p>CSSの圧縮を行うCLIツール兼モジュール、<a href="https://github.com/hail2u/node-csswring">CSSWring</a>を<a href="https://github.com/ai/postcss">PostCSS</a>を使って書いた。PostCSSの内蔵機能＋正規表現でゴリ押しみたいな感じなので、テストあるけど不安しか無い……。CLIに至ってはテスト書いてない。意義的にはPostCSSを使った最適化の一角を担える圧縮ツールというもの。CLIの方は少し前にちょっと書いた<a href="https://github.com/substack/minimist">minimist</a>を使ってる。</p>

<ul>
<li>空白文字の削除</li>
<li><code>/*!</code>と<code>/*#</code>で始まるコメント以外の削除</li>
<li>ルールセット最後のセミコロンの削除</li>
<li>不要なセミコロンの削除</li>
<li>空のルールセットの削除</li>
<li><code>0</code>の値から単位の削除</li>
<li>小数の先頭にある不要な<code>0</code>の削除</li>
<li><code>@charset</code>を最初のひとつに制限</li>
<li>色の圧縮</li>
</ul>

<p>以上を行っている。空白文字とコメント、セミコロン、空のルールセットの削除のみをデフォルトにして、それ以外はオプションにしても良い気がする。</p>

<hr>

<p>CSSに限らずJavaScriptも含めて最終的にgzipするという前提ならば、圧縮する作業コストが無駄だという論理は成り立つ。デメリットはあまりないが、<a href="http://gruntjs.com/">Grunt</a>や<a href="http://gulpjs.com/">gulp.js</a>がある今はメリットもあまりない。一方少しでも配信サイズを小さくするというのはフロントエンドにおいては絶対とも言われてきたルールのひとつだ。デメリットは圧縮された時に混入したバグを探査しづらいこと。僕は圧縮時にバグが混入する可能性は低いと考えているので、できるかぎり圧縮した方が良いと考えていた。</p>

<p>JavaScriptにおいては<a href="https://developers.google.com/closure/compiler/">Google Closure Compiler</a>があり、CSSには<a href="https://github.com/buildingblocks/grunt-combine-media-queries">grunt-combine-media-queries</a>や<a href="https://github.com/addyosmani/grunt-uncss">grunt-uncss</a>がある。こういったminify (圧縮)ではなくoptimize (最適化)を主眼において、空白の削除を始めとした圧縮それ自体は補助的なものと捉え直した方が良いのかなと今は考えている。</p>

<p>CSSにおいてそういった最適化ツール(達)がPostCSSで提供されたと仮定し、その補助を目的としてCSSWringは作った。</p>
