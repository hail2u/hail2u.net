<h1>CSSできれいな斜め線</h1>

<figure class="fill">
  <a href="/img/blog/antialiased-diagonal-line-with-css.png"><img alt="斜め" height="627" src="/img/blog/antialiased-diagonal-line-with-css.png" width="1200"></a>
</figure>

<p>CSSで斜めに線を引くようなことをするには多少なりとも工夫が必要だった。つまり<a href="/blog/webdesign/pure-css-speech-bubble.html">CSSで作る吹き出し</a>（もう5年前の記事だ）のように<code>border</code>プロパティーを使って頑張るしかなかったわけだ。今は<code>linear-gradient()</code>があるので直感的に作ることができるようになった。しかしきれいに引くとなるとまだ工夫が必要そうだ。</p>

<p>Demo: <a href="/pub/test/614.html">CSS Diagonal Line</a></p>

<p><code>border</code>プロパティーを使ったもの、<code>linear-gradient()</code>を背景で使ったもの、Data URI化したSVGを背景に使ったもの、以上の計3つのデモを作った。</p>

<pre><code class="language-css">.lg {
  background-image: linear-gradient(
    <mark>to right bottom</mark>,
    transparent 50%,
    #f0f 50%
  );
  background-repeat: no-repeat;
  background-size: cover;
  height: 3rem;
  width: 16rem;
}
</code></pre>

<p>2番目の<code>linear-gradient()</code>を背景に使ったものが最も直感的に書けるが、Chrome 40ではぎざぎざになってしまう。Chromeはトップシェアで安定しだしたと考えられるので、今この方法で実装するのはかなり勇気がいる。</p>

<pre><code class="language-css">.border {
  border-bottom: 3rem solid #f0f;
  border-left: 16rem solid <mark>transparent</mark>;
  box-sizing: border-box;
  height: 0;
  width: 16rem;
}
</code></pre>

<p>1番目の<code>border</code>プロパティーによる実装は安定の結果だ。以前はハードウェア・アクセラレーションを有効化するハックが必要だったが、今はいらない。とはいえ相変わらず意味のわからないCSSコードになる。加えて<code>border</code>プロパティーで<code>%</code>を使えないため、不明な幅の要素に対してはうまく作ることができない。</p>

<pre><code class="language-css">.svg {
  background-image: url(&#39;data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%221%22%20height%3D%221%22%20preserveAspectRatio%3D%22none%22%3E%3Cpath%20d%3D%22M0%201l1-1v1z%22%20fill%3D%22%23f0f%22%2F%3E%3C%2Fsvg%3E&#39;);
  background-repeat: no-repeat;
  background-size: 100% 100%;
  height: 3rem;
  width: 16rem;
}
</code></pre>

<p>しょうがないのでSVGをData URI化して埋め込むという奥の手を使った。斜めの画像があるという前提だと、概ね直感的なCSSだとは言える。Data URIも長いが、それでも226バイト程度なので、多少複雑なCSSグラデーションだと思えば許容範囲だろう。見逃しがちなのは<code>background-size</code>プロパティーで明示的にいっぱいいっぱいにリサイズしてやることくらいだ。</p>

<pre><code class="language-xml">&lt;svg
  xmlns=&quot;http://www.w3.org/2000/svg&quot;
  width=&quot;1&quot;
  height=&quot;1&quot;
  preserveAspectRatio=&quot;none&quot;&gt;
  &lt;path
    d=&quot;M0 1l1-1v1z&quot;
    fill=&quot;#f0f&quot;/&gt;
&lt;/svg&gt;
</code></pre>

<p>SVGもこの程度の簡単なものだ。Chromeにかなり古くからある<a href="/pub/test/613.html">リサイズ・バグ</a>へ対応するために<code>preserveAspectRatio</code>属性を指定することに注意が必要なくらいだ（これで30分くらいハマった）。</p>

<hr>

<p>こういった斜めの線やブロックを作る場合にはCSS Transformを使って回転させる(<code>rotate()</code>する)というアプローチも可能だ。少し足りなかったりはみ出たりする部分は、<code>width</code>プロパティーで大きく作り、<code>overflow</code>プロパティーで隠せば良い。中身も回ってしまうのは、回転軸に注意して子の要素で逆方向に回転させれば戻せるだろう。CSSは煩雑だが傾けたいから傾けるわけで、概ね直感的とも言えそうだ。</p>

<p>ただ<a href="http://kyonagashima.com/">必要としたページ</a>では、斜めにしたいブロックの高さが一定ではないこと、斜めの角度ではなく高さを一定にしたかったことなどの条件があった。CSS Transformでも頑張って計算すれば可能そうだったが、面倒すぎるかと思い、背景画像によるアプローチに絞って考えていた。</p>

<hr>

<p>安定なのは<code>border</code>プロパティーで行う実装だが、不明な幅の要素で使いたい場合はSVGによる実装というのが現時点での妥当な選択だろう。Firefox 35で若干アンチエイリアスが甘いことも考慮すると、SVGで統一という選択も悪くはない。とにかくChromeでも早いところ<code>linear-gradient()</code>へきれいにアンチエイリアスかかるようになって欲しい。</p>
