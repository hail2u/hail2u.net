CSSでアイコンをデザイン

<figure><img src="/images/blog/design-icon-with-css.png" alt="CSSでアレンジしたアイコン"></figure>

<p>ものすごく大雑把に言うと今まで画像編集ソフトでやっていた、角を丸くするとか背景をグラデーションにするなどという作業をCSSでやってしまおうというお話。もちろんCSSでできないことは多くあるので万能というわけではないが、できることに限って言えば数行のCSSコードでスクリーンショットのような効果を柔軟に適用することができる。</p>

<p class="seealso">View demo: <a href="/pub/test/185.html">Design icon with CSS</a></p>

<pre><code class="language-css">ul li a {
  display: block;
  width: 32px;
  height: 32px;
  background-image: url(&quot;icons-w.png&quot;);
  background-repeat: no-repeat;
  text-indent: -10000px;
}
</code></pre>

<figure><img src="/images/blog/design-icon-with-css-example-0.png" alt="アイコンのベース"></figure>

<p>各アイコンになる<code>a</code>要素へのスタイルは以上のような単純なものがベースになる。<code>icons-w.png</code>がアイコンの前景をつなげた<a href="/pub/test/185.png">スプライト画像 (パブリック・ドメイン)</a>。これにさまざまなエフェクトをCSSでかけていく。</p>

<h2>背景色をつける</h2>

<figure><img src="/images/blog/design-icon-with-css-example-1.png" alt="塗り塗り"></figure>

<p>テーマカラーで塗るだけ。</p>

<pre><code class="language-css">ul .twitter a {
  background-color: rgb(51, 204, 255);
}
</code></pre>

<p>このデモでは前景が白の普通にコントラストが高いアイコンを作るので塗るだけだが、ダークなアイコンを作る場合は前景を黒にして<code>opacity</code>で混ぜるなどとしてコントラストを下げる工夫が必要になる。</p>

<h2>グラデーションにする</h2>

<figure><img src="/images/blog/design-icon-with-css-example-2.png" alt="グラグラ"></figure>

<p>普通にテーマカラーからグラデーションをちゃんと考えてもいいし、その方が綺麗だが面倒。こういう場合は白の半透明のグラデーションを重ねてやるのが一番手っ取り早い。</p>

<pre><code class="language-css">#example2 li a {
  background-image:
    url(&quot;icons-w.png&quot;),
    linear-gradient(
      rgba(255, 255, 255, 0.5) 0%,
      rgba(255, 255, 255, 0) 100%
    )
  ;
  background-repeat: no-repeat, repeat;
}
</code></pre>

<p>背景画像を重ねる方法はいくつかあるが、複数の背景画像を使うのが将来的には安定だと思う。複数の背景画像を使った場合、<del>あとに</del><ins>先に</ins>書いた方が手前に来ることには注意が必要。</p>

<h2>反射させる(Aero風)</h2>

<figure><img src="/images/blog/design-icon-with-css-example-3.png" alt="グラピカ"></figure>

<p>白の半透明のグラデーションをアレンジするだけ。</p>

<pre><code class="language-css">#example3 li a {
  background-image:
    url(&quot;icons-w.png&quot;),
    linear-gradient(
      rgba(255, 255, 255, 0.6)   0%,
      rgba(255, 255, 255, 0.4)  50%,
      rgba(255, 255, 255, 0.2)  50%,
      rgba(255, 255, 255,   0) 100%
    )
  ;
}
</code></pre>

<p>中央でグラデーションを一気に切り替える。</p>

<h2>角を丸くする</h2>

<figure><img src="/images/blog/design-icon-with-css-example-4.png" alt="丸丸"></figure>

<p>普通に<code>border-radius</code>を使う。</p>

<pre><code class="language-css">#example4 li a {
  border-radius: 4px;
}
</code></pre>

<p>角丸のサイズはもちろん自由。たった数文字の変更でもっと控えめにも派手にもできる。</p>

<h2>真円にする</h2>

<figure><img src="/images/blog/design-icon-with-css-example-5.png" alt="〇〇"></figure>

<p>ベースが正方形なので、</p>

<pre><code class="language-css">#example5 li a {
  border-radius: 50%;
}
</code></pre>

<p>とすると真円になる。</p>

<h2>枠線をつける</h2>

<figure><img src="/images/blog/design-icon-with-css-example-6.png" alt="ワクワク"></figure>

<p>もちろん<code>border</code>。</p>

<pre><code class="language-css">#example6 li a {
  border: 1px solid rgba(0, 0, 0, 0.2);
}
</code></pre>

<p><code>rgba()</code>を使えば背景色といい感じにブレンド(もちろんグラデーションも考慮される)された枠線をつけることができる。</p>

<pre><code class="language-css">#example6 li a {
  border: 1px solid rgb(255, 255, 255);
}
</code></pre>

<p>などとして暗い背景で埋もれないようにアウトラインを引くのにも使える。</p>

<h2>影を付ける</h2>

<figure><img src="/images/blog/design-icon-with-css-example-7.png" alt="モヤモヤ"></figure>

<p><code>box-shadow</code>を使う。</p>

<pre><code class="language-css">#example7 li a {
  border-radius: 4px;
  box-shadow: 0 0 4px rgba(0, 0, 0, 0.5);
}
</code></pre>

<p>予め角丸に加工済みの画像に対して使った場合はその画像の角丸を考慮して影を作ってはくれないが、<code>borde-radius</code>で角丸にすれば綺麗な影を作ってくれる。</p>

<h2>内側に影を付ける</h2>

<figure><img src="/images/blog/design-icon-with-css-example-8.png" alt="ボヤボヤ"></figure>

<p><code>box-shadow</code>で<code>inset</code>を利用する。</p>

<pre><code class="language-css">#example8 li a {
  box-shadow: inset 0 0 4px rgba(0, 0, 0, 0.5);
}
</code></pre>

<p>このデモのようなカラフルなアイコンではあまり効果的ではないが、ダークなアイコンの場合はソリッドな枠線よりも効果的だと思う。</p>

<figure><img src="http://farm6.static.flickr.com/5135/5491407778_59293e322e.jpg" alt="ダークなアイコンにグラデーションで枠線を付ける"></figure>

<p>背景のテクスチャを工夫すれば木に焼き印を押したような感じとかも簡単に出せるはず。</p>

<h2>凹ませる</h2>

<figure><img src="/images/blog/design-icon-with-css-example-9.png" alt="ベコベコ"></figure>

<p><code>box-shadow</code>も複数の値を取ることができるので適切に組み合わせればエンボス効果を出せる。</p>

<pre><code class="language-css">#example9 li a {
  box-shadow:
    inset 1px 1px 2px rgba(0, 0, 0, 0.25),
    inset -1px -1px 2px rgba(255, 255, 255, 0.5)
  ;
}
</code></pre>

<p>内側の明るい影(=ハイライト)を右下方向にずらし、暗い影を左上方向にずらすことによって凹んだような効果になる。オフセットを逆にすれば飛び出す。影の濃さは要調整。</p>

<hr>

<p>これらには更に<code>transform</code>で<a href="/pub/test/185.html#example10">変形させることも出来る</a>。またオンマウスをトリガーにして<code>transition</code>によるアニメーションをさせることももちろん出来る。つまり<a href="/pub/test/185.html#example11">オンマウスで四角から丸に滑らかに変形させる</a>とかも非常に簡単(<del>Operaでは<code>border-radius</code>がアニメーションできないので滑らかにならないけど</del><ins>追記参照</ins>)。</p>

<p>Webフォントを駆使すれば前景として作成した画像すら要らなくなるかもしれないし、その場合は完全にスケーラブルなアイコンをCSSだけでデザインすることが出来ると思う。</p>

<p>CSSだけでデザインすることの最大の利点は、多くの場合制作者側とユーザー側双方のリソースの節約につながるということだと思う。ただし、CSSが巨大になることと、数行の変更でその巨大なCSSの読み直しになるというデメリットがあることも念頭に入れる必要がある。またCSSのイケてる文法と格闘することになるのも見逃せない。</p>

<h2>追記</h2>

<p>対応ブラウザについて書いてなかったけど察してくれ……というのもアレなので大雑把に書いておく。Chrome 10 beta以降とFirefox 4 beta以降での表示が意図したもの。</p>

<ul>
<li>Internet Explorer 8
<ul>
<li><del>知らない</del><ins>書きたくない</ins></li>
</ul>
</li>
<li>Internet Explorer 9
<ul>
<li><code>filter</code>プロパティの<code>DXImageTransform.Microsoft.gradient()</code>で二点間のグラデーションしかサポートしていない</li>
<li><code>border-radius</code>が<code>transition</code>対応プロパティに含まれていない(多分)</li>
</ul>
</li>
<li>Google Chrome 9
<ul>
<li>特になし</li>
</ul>
</li>
<li>Google Chrome 11 dev 
<ul>
<li>特になし</li>
</ul>
</li>
<li>Safari 5
<ul>
<li><code>border-radius</code>で<code>%</code>指定が効かないので<code>px</code>指定で代用している</li>
</ul>
</li>
<li>Firefox 3.6.14
<ul>
<li><code>transition</code>未実装</li>
</ul>
</li>
<li>Firefox 4 beta
<ul>
<li>特になし</li>
</ul>
</li>
<li>Opera 11
<ul>
<li>グラデーション未実装</li>
<li><code>border-radius</code>が<code>transition</code>対応プロパティに含まれていない</li>
</ul>
</ul>

<p>WebKitでのCSSグラデーションの古い文法や<code>filter</code>プロパティにも対応させ、IE9やChrome 9、Safari 5でもグラデーションかかるようにしておいた。IE9のグラデーションは二点間のグラデーションのみのサポートなので、Aero風は実現出来ていない。OperaのグラデーションはあとでSVG書くかも(書かないかも)。</p>
