FOUTはプログレッシブ・エンハンスメントだ

<figure class="full-width">
  <a href="https://twitter.com/kay_spiegel/status/643374629176934400"><img alt="FOUT is Progressive Enhancement" height="627" src="/images/blog/fout-is-progressive-enhancement.png" width="1200"></a>
</figure>

<p>僕はウェブフォントの実装はFOUTを強いる形がベストだと今のところは考えている。とにかく文章が読める状態をできる限り確保するべきだと思うからだ。だがなかなかFOUTの良さを説明することは難しい。どうしても他の手法の欠点を強調しがちで終わっていた。そういう時に<a href="https://twitter.com/kay_spiegel/status/643374629176934400">FOUTをプログレッシブ・エンハンスメント</a>ととらえて説明するのは良さそうだ。</p>

<p>ウェブフォントの読み込み状況と文書のレンダリング状態を分けてとらえ、前者の状況の変化を後者へと<em>段階的に反映させる</em>というわけだ。そうすることで常に最低限の形で文書が表示されることが担保され、ネットワーク状況の劣悪さにユーザーの読者としての体験が左右されなくなる。</p>

<hr>

<p>このウェブサイトではFOUTに近い形になるようにしているが、ウェブフォントを読み込むためのCSSを非同期に読み込ませているだけだ。<a href="http://www.w3.org/TR/css-font-loading/">CSS Font Loading Module</a>で定義されているウェブ標準APIや<a href="https://github.com/typekit/webfontloader">Web Font Loader</a>は利用しておらず、クラスによる制御もしていない。これはフォントの読み込みを待つのにくらべ実装が簡単な点で大きく勝るが、フォントの読み込みに時間がかかると文字が読めなくなる可能性があるという欠点もある。</p>

<p>その欠点はウェブフォントが500KBを超えるあたりで表面化する。幸い<a href="https://github.com/bramstein/fontloader">CSS Font Loadingのpolyfill</a>がしばらく前に書き直されたようで、まずはこちらに期待すると良さそうだ。その一方で<a href="https://tabatkins.github.io/specs/css-font-display/">ウェブフォントの反映の仕方を制御するためのCSS仕様</a>も提案されているようで、こちらだと更にコストは下がるだろう。未来は明るい。</p>
