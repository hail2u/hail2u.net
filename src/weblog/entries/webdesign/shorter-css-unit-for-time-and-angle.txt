時間と角度をより短い単位へ

<p><code>0</code>の値の場合に短い単位を採用するという処理は単純に実装できるが、<code>0</code>でない値の場合はそれなりに面倒くさい。単純に考えれば愚直に単位の変換を行い一番短いものを採用するという形で良いが、それだとかなりコストがかかるだろう。つまり変換すると短くなるケースをある程度想定しなければならない。</p>

<section>
<h1>時間</h1>

<p>時間は<code>s</code>単位と<code>ms</code>単位のどちらで書いてもあまり長さは変わらない。<code>s</code>単位の方が単位自体は短いものの、<code>s</code>単位で時間を指定する場合は概ね小数点を書く必要があるので、その優位点はほぼないと言って良いだろう。ただ場合によっては<code>s</code>単位の方が短くなる可能性がある。それは<code>ms</code>単位を使った値の末尾が<code>0</code>の場合だ。</p>

<pre><code class="language-css">.test {
  transition-duration: 210ms;
}
</code></pre>

<p>は、</p>

<pre><code class="language-css">.test {
  ransition-duration: .21s;
}
</code></pre>

<p>の方が1文字短い。末尾の<code>0</code>を省略できるというわけだ。<code>00</code>で終わっていると、なんと2文字も短くなる。</p>

<p>例外としては<code>10ms</code>のように<code>s</code>単位にすると小数点だけでなく桁埋めの<code>0</code>が必要になるケースだ。この場合は<code>ms</code>単位のままでも長さは変わらないので、処理するのは無駄ということになる。<code>ms</code>単位の値が3桁以上、かつ<code>0</code>で終わる場合に限って変換すれば良いだろう。</p>
</section>

<section>
<h1>角度</h1>

<p>角度は<code>rad</code>単位と<code>turn</code>単位は短くなる可能性はあまりない（後述）。<code>deg</code>単位は小数点が必要なく、概ね短くなりやすいので、これまた変換する必要はない。つまり短くなる可能性が高いのは<code>grad</code>単位だけになる。</p>

<p><code>grad</code>単位は<code>400</code>で一周する。つまり<code>400grad</code>が<code>360deg</code>と等しいわけだ。小数の場合は変換すると問題が起こりそうなので、実際には整数の値を持つ<code>grad</code>単位のことだけを考えれば良いだろう。短くなるパターンを頭の中だけで考えてみるのも難しいので、愚直に調査することにした。以下は<code>deg</code>単位に変換した方が短くなった場合のみ列挙するコードだ。</p>

<aside class="sidenote">
<p><code>i / 400 * 360</code>という計算式だと<code>i</code>が<code>70</code>の時に<code>62.99999999999999</code>を返してしまうので、先にきれいに割れる除算をし、それを乗算するようにしている。</p>
</aside>

<pre><code class="language-javascript">var deg;
var grad;

for (var i = 0; i &lt;=400; i++) {
  grad = i + &quot;grad&quot;;
  deg = (i * (360 / 400)) + &quot;deg&quot;;

  if (deg.length &lt; grad.length) {
    console.log(grad, deg);
  }
}
</code></pre>

<pre><samp>$ <kbd>node test.js</kbd>
10grad 9deg
20grad 18deg
...
390grad 351deg
400grad 360deg
</samp></pre>

<p>つまり<code>grad</code>単位の値が<code>10</code>の倍数の時、<code>deg</code>単位でも整数になり、単位の短さのおかげで1文字短くなるようだ。</p>

<p>例外はこちらにもある。それは<code>360deg</code>や<code>1200grad</code>のような場合だ。この場合は<code>turn</code>単位を使うと<code>1turn</code>なり<code>3turn</code>なり書けるため、何文字かの節約になる。</p>

<p>ベースが円周率である<code>rad</code>単位ではどう書かれていてもどう計算しても小数点以下が多くなるので、うまく短くなることはないだろう。<code>turn</code>単位に関しては<code>.25turn</code>は<code>90deg</code>へと短く変換できる。小数点以下3桁までに限って整数の<code>deg</code>単位に変換できる場合はそうする、というのが良さそうだ……と、ここまで考えて<code>turn</code>単位はサポートが怪しい（Android 2.x辺りが危険）ことがわかった。先の整数のパターンも含めて、この<code>turn</code>単位へ変換するのはまずいようだ。</p>
</section>

<hr>

<p>どちらも効果が高いものではないが、普通に書いてしまう<code>600ms</code>などを<code>.6s</code>へ変換してくれるのはそれなりに意義はあるだろう。CSSを書くにあたっては常に<code>ms</code>単位や<code>deg</code>単位を使い、安全に短くするのはツールに任せるというのは論理的に正しい処世術であるはずだからだ。</p>

<p>もう少し寝かせたら<a href="https://github.com/hail2u/node-csswring">CSSWring</a>へ取り込むことにした。多少、想定が甘いところがあるようなので、もう少し見守ってやる必要がありそうだ。</p>
