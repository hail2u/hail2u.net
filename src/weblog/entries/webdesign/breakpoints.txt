ブレークポイント

<p>このWebサイトのスタイルではブレークポイントがレイアウト向けに3つ、フォント・サイズ向けに4つ設定されている。なんと7段変速！なんでそうなってるのかとかそういう話を書きたくなったので書く。</p>

<h2>レイアウト向け</h2>

<p>主にデザインが格納できるのか、バランスはどうかみたいな理由でブレークポイントを設定している。Mobile Firstで書いているのはパフォーマンス的な問題なので、本当はもっと理由駆動でMedia Queriesを書きたい。<code>em</code>単位を使っているためユーザーのズームやフォント設定などは<em>考慮される</em>。だいたい標準は<code>16px</code>であることは既知だけどそれに依存しないのでマイナーな標準を採用しているブラウザーとか大きめのフォント・サイズを愛用している人のブラウザーとかでもおかしくならない(可能性が高い)。</p>

<h2>小さめのスクリーン</h2>

<figure>
  <img src="/images/blog/breakpoints-small.png" alt="センタリング！">
  <figcaption>On small screen</figcaption>
</figure>

<p>グローバルなヘッダーとフッターがセンタリングされる。このレイアウトで表示されるのは<code>49.5em</code> (<code>792px</code>)より下の場合。レイアウトは気づきにくいけど1カラムが<code>3.5em</code>とカラム間が<code>2em</code>のカラムで構成されているので、それが9カラム収まるようになるサイズまでは画面いっぱいにセンタリングで表示するということにしている。</p>

<pre>49.5 = (3.5 + 2) * 9
</pre>

<p>9カラムな理由は大きいスクリーンでは2 + 9 + 1にしたかったのでそれに合わせた。今はちょっと3 + 12 + 1の16カラムを基準に構成し直したい気分があるけどそれはあんまり関係ない。</p>

<h2>中間のスクリーン</h2>

<figure>
  <img src="/images/blog/breakpoints-medium.png" alt="左と右にグググイッっと寄せる">
  <figcaption>On small screen</figcaption>
</figure>

<p>中間というか大きめと小さめの間。<code>49.5em</code>から<code>66em</code> (<code>1056px</code>)まではロゴとナビゲーションが左右に分割されたレイアウトになる。フッターも左右分割。コンテンツ自体のサイズは9カラムに制限し、左右のマージンを均等に取る。</p>

<pre>66 = (3.5 + 2) * 12
</pre>

<p>幅制限に均等な左右のマージンを組み合わせた場合、センタリングのままだと特にグローバル・ヘッダーの左右がスカスカになってバランスがあまり良くないかなと思う。コンテンツ部分が<code>border</code>や<code>box-shadow</code>プロパティーなどを使って明確な枠で括られている場合はスカスカに見えにくいけど、このWebサイトのようななにも遮るものがない場合はスカスカに見える。</p>

<h2>大きめのスクリーン</h2>

<figure>
  <img src="/images/blog/breakpoints-large.png" alt="12カラムをロジカルに分割して配置">
  <figcaption>On large screen</figcaption>
</figure>

<p><code>66em</code>以上、つまり通常は<code>1056px</code>以上ならばこのレイアウトになる。デスクトップでこのWebサイトを見ている人の多くはこのレイアウトを見ていることと思う。ヘッダーはロゴがコンテンツから飛び出すような形で左に寄り、ナビゲーションは右寄せではなくコンテンツと左端が揃う。フッターは中間スクリーンとほぼ一緒。</p>

<p>ここに至って初めて大きくコンテンツ部分のレイアウトが変化する。左の余白を大きく取り、その部分に様々な補助的なパーツがレイアウトされるようになる。カラムわけは上記の通り2 + 9 + 1で右にも少し余白がある(この理由は<a href="/blog/webdesign/two-plus-nine-plus-one.html">前にちょっと書いた</a>)。左の余白にぶら下がるものは、</p>

<ul>
<li><code>blockquote</code>要素に付ける飾りの引用符画像</li>
<li>リストのブレットや数字</li>
<li><code>figcaption</code>要素</li>
<li><code>article</code>要素直下の<code>footer</code>要素</li>
<li>ページング・ナビゲーション</li>
</ul>

<p>など。プライマリなものは絶対に配置しないようにしている。</p>

<h2>フォント・サイズ向け</h2>

<p>小さいスクリーンでは少し小さめに大きいスクリーンでは少し大きめになる。ブレークポイントは以下の通り。</p>

<table>
  <tr>
    <th>ブレークポイント</th>
    <th>計算式</th>
    <th>フォント・サイズ</th>
    <th>`16px`基準</th>
  </tr>
  <tr>
    <th>-</th>
    <td>-</td>
    <td>87.5%</td>
    <td>14px</td>
  </tr>
  <tr>
    <th>37.898em</th>
    <td>49.5em * 0.875 * 0.875</td>
    <td>100%</td>
    <td>16px</td>
  </tr>
  <tr>
    <th>83.531em</th>
    <td>66em * 1.125 * 1.125</td>
    <td>112.5%</td>
    <td>18px</td>
  </tr>
  <tr>
    <th>113.695em</th>
    <td>66em * 1.3125 * 1.3125</td>
    <td>131.25%</td>
    <td>21px</td>
  </tr>
</table>

<p>採用するフォントサイズを決定して、コンテンツの幅にそれを二乗したものを掛けて計算している。二乗の理由はあまりない。<code>em</code>ベースでカラム・レイアウトをしているので、フォント・サイズが変わっても一行の文字数は変化しない。</p>

<hr>

<p>コレがこのWebサイトのLittle Big Detailsだッッッ！見ればわかる的なことを文章にした。</p>
