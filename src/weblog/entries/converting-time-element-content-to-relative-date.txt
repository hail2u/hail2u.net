time要素の中身を相対日時へ変換

<p><code>time</code>要素に<code>datetime</code>属性があったら、それを元に現在時刻からの相対日時を生成し、その中身を差し替えるスクリプトを書いていた。相対日時を得るには、ミリ秒数同士を引き算して1000で割って60以下なら～秒前、60で割って60以下なら～分前、60で割って24以下なら～時間前、24で割って30以下なら～日前、30で割って12以下なら～ヶ月前、12で割って～年前というものをそのままコードにした。車輪だ。</p>

<pre><code class="language-javascript">const now = Date.now();
const toRelativeDate = function (then) {
  let diff = 0;

  if (!Number.isInteger(then)) {
    return;
  }

  diff = parseInt((now - then) / 1000, 10);

  if (diff &lt; 0) {
    return;
  }

  if (diff &lt; 60) {
    return diff + &quot;秒前&quot;;
  }

  diff = parseInt(diff / 60, 10);

  if (diff &lt; 60) {
    return diff + &quot;分前&quot;;
  }

  diff = parseInt(diff / 60, 10);

  if (diff &lt; 24) {
    return diff + &quot;時間前&quot;;
  }

  diff = parseInt(diff / 24, 10);

  if (diff &lt; 30) {
    return diff + &quot;日前&quot;;
  }

  diff = parseInt(diff / 30, 10);

  if (diff &lt; 12) {
    return diff + &quot;ヶ月前&quot;;
  }

  return parseInt(diff / 12, 10) + &quot;年前&quot;;
};
</code></pre>

<p>See test: <a href="/pub/test/658.html">Test Page for reldate.js</a></p>

<p>日本語だと複数形のことを考えなくて良いのでシンプルなコードになった。2年前以上は日時をそのまま表示したいという場合は、最初の方でdiffが一定数以上の時に抜けるようにしてやると良さそうだ。</p>

<p>タイムゾーンのことをまったく考えていない。<code>Date.now()</code>と<code>Date.parse()</code>でISO-8601をパースした時はUTCのミリ秒になるはずなので、大丈夫なんじゃないかと楽観している。また相対時刻がそもそもあやふやなので、最大24時間ずれるくらい大したこともなさそうだ。このあたりも含めて確実にしたいなら<a href="http://momentjs.com/">Moment.js</a>を使うべきだろう。そうすれば<code>moment#toNow()</code>などもあり、何も考える必要はなくなる。</p>

<hr>

<p>ウェブサイト上で動かすスクリプトを昔のことは忘れて書き、<a href="https://github.com/google/closure-compiler-js">Closure CompilerのJavaScriptバージョン</a>でES5への変換と最小化を同時にやるようにし始めた。もちろんgyp依存とかでもないため、Windowsで普通に動く。いくつか小さなプロジェクトでも使ってみているが、UglifyJS2を差し替えるくらいの感覚で移行できている。ちょっと処理が遅く、最小化後のサイズも大きくはなるが、それを補って余りある簡便さだ。</p>

<p>規模の大きなJavaScriptコードを処理しようとするとメモリーを食い尽くすなど、パフォーマンスの点で問題がいくつかあるようだ。まだプロダクションで使うのは怖いが、小さいところではちょいちょい使っていきたい。</p>
