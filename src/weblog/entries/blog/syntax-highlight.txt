構文強調

<p>構文強調はエディターでプログラムのコードを書く時は必要だ。コードをそこそこちゃんと読む必要があるような場所、例えばGitHubなどでも必要だろう。ではコードの断片をちょっと読ませることが主になるウェブログのような場合はどうだろうか。</p>

<p>構文強調を行う理由は以下の2つに集約することができると思う。</p>

<ol>
<li>コードの構文エラーを視覚化する</li>
<li>コードを読みやすくする</li>
</ol>

<p>前者についてはウェブログでは意味がない。何かしらの編集ツールに構文強調の機能をもたせれば良いだろうし、多くの場合は既に存在するコードの一部をコピーしてくるだけなので、それすら必要ないとも言えるだろう。ウェブログにおいては後者の「読みやすさ」で判断することになる。</p>

<p>構文強調されたコードはそれなりに読みやすい。一貫したルールで色分けされているので、コードの構成が視覚的にわかりやすいからだ。しかしそれはどの色がどういう要素にマッピングされているかを知ることができた上での話だ。青色の単語が変数なのか制御構文なのかは、初見で読者にはわからない。それはすぐにわかることだろうが、次に訪問した時も覚えていられるかというと疑問だ。</p>

<p>このような常に色と要素の関連性がはっきりしない状態では、構文強調がコードの読みやすさに寄与するとは思えない。コードに賑やかな色がついているだけと言えるだろう。そしてそれは別の問題も引き起こすことになる。</p>

<p>ウェブサイトにおいて本文はリンクだけ色が違う程度で書かれる。コードが賑やかな場合、それが(多くの場合)補助的な図であるにも関わらず本文よりも目立つことになり、最悪の場合は本文が目にまったく入らなくなることだろう。これでは主(本文)と従(コード)が逆転してしまう。</p>

<p>本文との関係を破壊しないようにするためには、必要最小限にコードを抑えることになる。そういったコードは構文強調を行わなくても全容をすぐ把握できるような量であるだろう。そうなると構文強調によるメリットは少なくなり、賑やかであるデメリットのみ残ることになる。</p>

<hr>

<p>ウェブログでは完全なコードを載せることは稀だろうし、そういう必要がないようにちゃんと書かれた記事の方が理解しやすいだろう。そういうちゃんとした記事を書くためにも、構文強調のようなデメリットを孕む特化型のツールではなく、記事全体で読みやすさを追求するように編集したい。</p>
