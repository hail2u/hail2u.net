<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>モバイル広告益と回線益</title>
      <link>http://hail2u.net/blog/internet/ad-revenue-vs-data-cost.html</link>
      <description>広告パブリッシャーは広告の表示で利益を得る。キャリアーは回線の利用量が利益に直結する。モバイル広告の表示には当然回線を利用するわけで、その時にどちらがより利益を得るのかという記事を読んだ。記事ではキャリアーの方がより稼いでいるというデータの提示のみだが、そう考えるとモバイル広告の持つ（とされる）宣伝効果がその分減殺されているということになりそうだ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/ad-revenue-vs-data-cost.html</guid>
      <pubDate>Wed, 07 Oct 2015 02:36:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>広告パブリッシャーは広告の表示で利益を得る。キャリアーは回線の利用量が利益に直結する。モバイル広告の表示には当然回線を利用するわけで、<a href="https://medium.com/@robleathern/carriers-are-making-more-from-mobile-ads-than-publishers-are-d5d3c0827b39">その時にどちらがより利益を得るのか</a>という記事を読んだ。記事ではキャリアーの方がより稼いでいるというデータの提示のみだが、そう考えるとモバイル広告の持つ（とされる）宣伝効果がその分減殺されているということになりそうだ。</p>

<p>キャリアーの回線の利用方法については大きな欠点が僕はあると思っている。それは制限に達するまで常にフルスピードで使わざるを得ないというところだ。それほど回線速度がいらない作業しかしない時、データ利用量に加算されない代わりに速度制限されるモードに切り替えたりできれば……。あるところにはあるのかもしれない。</p>

<p>あまり関係ない話だった。</p>

<p>ともかく広告を表示したユーザーが失うものとして、プライバシーやページの表示速度以外のものをこの記事は具体的に示したと言える。そのことはモバイル広告がその存在意義に対して、ユーザーから多くを得すぎているということを示してもいるのだろう。</p>

<hr>

<p>モバイル広告についてはみな色々あると思うが、僕はネイティブ広告のようなものがはびこるよりはマシかなという程度だ。コンテンツ・ブロッカーのあおりをくってウェブフォントが完膚なきまでに潰されるとか比較的公平なウェブページから独裁的なアプリ化に流れるとか、そういうことにならないことだけは祈っている。</p>

<section>
<h2>追記</h2>

<p>低速モードに切り替えてデータ利用料に加算しないようにする機能が<a href="https://www.iijmio.jp/hdd/coupon/">IIJmioならある</a>と<a href="https://twitter.com/_tsmd/status/651527693800882176">@_tsmd</a>に教えてもらった。乗り換えたい感じがしてきた。2年縛り切れるあたりまでにちゃんと考えよう。</p>
</section>]]></content:encoded>
    </item>
    <item>
      <title>半角カッコから全角カッコ</title>
      <link>http://hail2u.net/blog/software/hankaku-to-zenkaku-parentheses.html</link>
      <description>このウェブログの本文で使っていた半角カッコを全角カッコに変えたくなった。文章校正的な理由ではなく、将来の縦書き化を見据えて今のうちに調節しておこうかなという程度の理由だ（半角カッコに戻すのは簡単そうだ、ということもある）。だが単純な置換ではなかなか難しく、手作業でやろうかと思ったが開き半角カッコだけで8000近くあったので無理そう……ということで一時間くらい色々考えた結果、ASCII範囲外の文字を含む開き半角カッコと閉じ半角カッコのペアを探して置換するのがよさそうという結論に至った。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/hankaku-to-zenkaku-parentheses.html</guid>
      <pubDate>Tue, 06 Oct 2015 03:52:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>このウェブログの本文で使っていた半角カッコを全角カッコに変えたくなった。文章校正的な理由ではなく、将来の縦書き化を見据えて今のうちに調節しておこうかなという程度の理由だ（半角カッコに戻すのは簡単そうだ、ということもある）。だが単純な置換ではなかなか難しく、手作業でやろうかと思ったが開き半角カッコだけで8000近くあったので無理そう……ということで一時間くらい色々考えた結果、<em>ASCII範囲外の文字を含む開き半角カッコと閉じ半角カッコのペア</em>を探して置換するのがよさそうという結論に至った。</p>

<p>Perlの正規表現ならばかなりかっこよく書けそうだったが、ファイル探索から読み込み、置換、保存まで書くのはさすがに面倒そうだ。普通にVimで<a href="https://github.com/thinca/vim-qfreplace">qfreplace</a>を使って行うようにした。</p>

<pre><code >:%s/(\(.*[^!-~ ].\{-}\))/（\1）/gc
</code></pre>

<p>Vimの正規表現なので気持ち悪いやつになっている。ASCII範囲外の文字はアバウトに<code>!</code>から<code>~</code>と半角スペースを指定して反転するというアバウトなものにした。これで大抵のプログラム・コードでの半角カッコはスキップすることができる。問題は半角カッコのネストと同じ行に半角カッコを使うコードが複数回出てくるパターン（「`foo()`や`bar()`」というようなパターンだと「()`や`bar()」にマッチしてしまう）だが、うろ覚えのVimの正規表現では考慮するのが厳しく、そこは<code>c</code>フラグも付けて手作業で行うことにした。</p>

<p>だいたい<a href="https://github.com/hail2u/hail2u.net/commit/4258eec859c25ed60f27be8066b66b2ef7a2f3e1">うまくいった</a>のではないかと思う。後処理として<code>（</code>や<code>）</code>といった全角カッコに半角空白がついてしまっているパターンから半角空白を削除しておいたりもした。</p>

<p>本当はHTML断片としてパースして、<code>code</code>や<code>pre</code>要素の子ではないものを置換するという、HTMLから見て真っ当なやり方がベストに近そうだ。しかしHTML断片をパースするためのライブラリーの選定を始めとして、書き捨てになりそうなコードを書くには面倒極まりないので、雑な正規表現で誤魔化した。なんでもエクセルでやる人の気持ちがちょっとわかった。</p>

<hr>

<p>qfreplaceが同じファイルに複数の置換対象があると「既に変更があります」的なエラー・メッセージを出してスキップするようになった気がする。前は普通に動いていたので、最近のVimになって発症したのではないかと思うが、たまにしか使わないので何かVimの設定に依存しているのかもしれない。そのうち調べよう。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150929.html</link>
      <description>ガスと電気と水道、電話の名義変更を行うが失敗し、すべて止まる。暗闇に包まれ、何もできない家でじっとしていると、市役所の人が来る。「ちょっとした手違いで……すみません！」とあんぱんを3つ渡される。食べたらすごいおいしかった。が数分後に腹痛になり、トイレに入るも水が流れない。というところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150929.html</guid>
      <pubDate>Mon, 05 Oct 2015 03:49:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ガスと電気と水道、電話の名義変更を行うが失敗し、すべて止まる。暗闇に包まれ、何もできない家でじっとしていると、市役所の人が来る。「ちょっとした手違いで……すみません！」とあんぱんを3つ渡される。食べたらすごいおいしかった。が数分後に腹痛になり、トイレに入るも水が流れない。というところで目が覚めた。</p>

<p>だいたい名義変更が終わった記念の夢のようだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>srcset属性を使ったSVGフォールバック・ハック</title>
      <link>http://hail2u.net/blog/webdesign/srcset-svg-fallback-hack.html</link>
      <description>SVGをサポートする環境がほとんどになってきた。それでもなんとか8であったり、かんとか2.3であったりのことを考慮せざるをえないという状況はありうる。それにはonerror属性を使った対応が有力だが、srcset属性でSVGファイルを指定するだけというハックのことを知った。将来的に使えなくなるわけではないが、やりたいことと実装に食い違いが少なからずあるのでハックと言って良いだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/srcset-svg-fallback-hack.html</guid>
      <pubDate>Sun, 04 Oct 2015 03:31:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>SVGをサポートする環境がほとんどになってきた。それでもなんとか8であったり、かんとか2.3であったりのことを考慮せざるをえないという状況はありうる。それには<code>onerror</code>属性を使った対応が有力だが、<code>srcset</code>属性でSVGファイルを指定するだけというハックのことを知った。将来的に使えなくなるわけではないが、やりたいことと実装に食い違いが少なからずあるのでハックと言って良いだろう。</p>

<pre><code >&lt;img src=&quot;foo.png&quot; srcset=&quot;foo.svg&quot;&gt;
</code></pre>

<p>表示したいSVGを<code>srcset</code>属性で、フォールバックに使いたいPNGを<code>src</code>属性で指定するだけだ。これで<code>srcset</code>属性をサポートしているブラウザーではSVGが、そうでないブラウザーではPNGが表示される。<a href="http://caniuse.com/#search=srcset"><code>srcset</code>属性のサポート</a>に対して、<a href="http://caniuse.com/#search=svg">より多くのブラウザーがSVGをサポート</a>していることから成立する。もちろん食い違いがあるのでSVGをサポートしているブラウザーではSVGを、とはいかない。</p>

<p>ただし<code>onerror</code>属性を使ったテクニックと比較すると、画像へのリクエストが必ず1回で収まるという利点がある。<code>onerror</code>属性では古い環境へ負担を強いることに対し、公平な負担（十数文字の追加）だけで済むというのはかなり魅力的だ。</p>

<p>SVGと<code>srcset</code>属性のサポートの食い違いが問題だが、ハック臭なしできれいに書ける<code>picture</code>要素よりはカバー範囲が広いようだ（Safari 8やEdge 12がカバーできる）。<code>srcset</code>属性をサポートしない環境が後ろ向きな環境であること（OSレベルでレガシーであったり、Chromeへと切り替わっていなかったり）することを考えると、妥協点としても見るべきところはある。</p>

<p><a href="http://lynn.ru/examples/svg/en.html">インラインSVGでのフォールバック・テクニック</a>とこれでかなりの範囲をカバーできることだろう。</p>

<hr>

<p>初期からこのハックの利用を想定して実装を進めるのは薦められないが、SVGで良いと言われていたのにも関わらず急にPNGでフォールバックして欲しいと言われた時の緊急手段などとしては抗いがたい魅力がある。つまり計画的に利用しないことは意識したい。</p>]]></content:encoded>
    </item>
    <item>
      <title>1文字だけの改行の拒否</title>
      <link>http://hail2u.net/blog/webdesign/preventing-1-char-wrapping.html</link>
      <description>日本語の文章では任意の位置で改行できるため、レスポンシブ・ウェブ・デザインでは多くの場合、望まない位置での改行が起きる。例えば最後の1文字だけ次の行になってしまうと、読みやすさや理解度に致命的な影響を与える。例えば「？」だけ次の行に送られた場合、あるとないのでは大きく印象が変わるだろう。Twitterで@Takazudoと@oosugi20の会話を見て、やはりみな似たようなことは考えるものだと感じ、このあたりのことについて書いてみたくなった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/preventing-1-char-wrapping.html</guid>
      <pubDate>Wed, 30 Sep 2015 00:02:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>日本語の文章では任意の位置で改行できるため、レスポンシブ・ウェブ・デザインでは多くの場合、望まない位置での改行が起きる。例えば最後の1文字だけ次の行になってしまうと、読みやすさや理解度に致命的な影響を与える。例えば「？」だけ次の行に送られた場合、あるとないのでは大きく印象が変わるだろう。Twitterで<a href="https://twitter.com/Takazudo/status/648724613329911808">@Takazudoと@oosugi20の会話</a>を見て、やはりみな似たようなことは考えるものだと感じ、このあたりのことについて書いてみたくなった。</p>

<p>僕は<a href="http://jsfiddle.net/gpj4q4bh/">jQueryで最後の五文字では改行が起きないようにいじったり</a>していた（うろ覚えで書いたもので、実際にはもっと複雑にやっていたと思う）。見出しがテキストのみの場合、最後の数文字の間に非改行ゼロ幅スペース（<code>U+FEFF</code>）を仕込むことで、その間で改行が起こらなくなるという仕組みだ。ここでは比較のためにクラスで判定するように書いてあるが、実際には<code>h1</code>–<code>h6</code>を全部処理してやれば良いので、見出しにクラスを振る必要はない。</p>

<p>こういった文字レベルでのレイアウト（例えば<code>font-feature-setting</code>プロパティーを使ったカーニングの適用）は、タイポグラフィーの中でもリーダビリティーという点でより重要度が上がっている。少し観点は違うが、Adobeが<a href="http://webplatform.adobe.com/balance-text/">Balanced-text</a>という名前でうまいことバランスをとって改行されるようにするjQueryプラグインをリリースしているのも、そのあらわれと言えそうだ。</p>

<p>CSS Text Module Level 4では<a href="http://www.w3.org/TR/2015/WD-css-text-4-20150922/#text-wrap"><code>text-wrap</code>プロパティ－</a>で<code>balance</code>を指定すると、なんとなくうまく改行してくれるようになる予定だ。またこのモジュールでは<a href="http://www.w3.org/TR/2015/WD-css-text-4-20150922/#last-line-limits">行の最低文字数などを指定するプロパティー</a>を作るかもしれない（これがあれば上記のjQueryスクリプトと同じことがCSSだけで簡単に実現できるようになる）ようなことに触れられてもおり、いずれも実装が楽しみだ。後者は相当プライオリティーが低そうなので、いつになることやら……という気はするが。</p>

<hr>

<p>そこまでして改行位置を調整してやる価値はあるのか、と問われると、絶対にある。編集作業では当たり前のように行われているであろう見出しのレイアウトに応じた調節を自動化することで、より<em>正確で誤解を与えない見出し</em>を追求できるはずだからだ。それはコンテンツのクオリティーに直結する。コンテンツ・ファーストのウェブデザインとはそういうことなのではないだろうか。</p>

<section>
<h2>追記</h2>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%96%E3%83%AC%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9">Wikipedia</a>や<a href="https://tools.ietf.org/html/rfc3629">RFC 3629</a>で触れられているように、Unicode 3.2以降ではWORD JOINER（U+2060）が強く推奨されている。しかしながら今だに豆腐に化ける環境（OSの問題ではない）が多くあるため、U+FEFFを使わないと期待通りに機能しないことが多い。</p>
</section>]]></content:encoded>
    </item>
    <item>
      <title>TIGER サハラマグ MMP-G031</title>
      <link>http://hail2u.net/blog/gadget/tiger-mmp-g031-ww.html</link>
      <description>とにかく軽いマグボトルを探していた。本当はS’wellがかっこいいなと思っていたが、特に軽くもないし、氷を入れられないのは後々絶対に後悔すると考え、やめておいた。最終的に飲み口がないTIGERのサハラマグに決め、白の300mlのものにした。2648円だった。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/tiger-mmp-g031-ww.html</guid>
      <pubDate>Fri, 25 Sep 2015 12:07:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://www.amazon.co.jp/gp/product/B013OKRY4W/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B013OKRY4W&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="TIGER 水筒 ステンレスミニボトル 「サハラマグ」 軽量 (夢重力) スノーホワイト 0.3L MMP-G031-WW" src="http://ecx.images-amazon.com/images/I/215%2B-wrhxuL.jpg"></a>
</figure>

<p>とにかく軽いマグボトルを探していた。本当は<a href="http://www.swellbottle.com/">S’well</a>がかっこいいなと思っていたが、特に軽くもないし、氷を入れられないのは後々絶対に後悔すると考え、やめておいた。最終的に飲み口がない<a href="http://www.amazon.co.jp/gp/product/B013OKRY4W/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B013OKRY4W&amp;linkCode=as2&amp;tag=hail2unet-22">TIGERのサハラマグに決め、白の300mlのもの</a>にした。2648円だった。</p>

<p>探していた条件は以下のようなものだった。</p>

<ul>
<li>重さ200g以下</li>
<li>直径8cm以下</li>
<li>高さ20cm以下</li>
<li>容量250ml以上</li>
<li>コップではない</li>
<li>プッシュ栓ではない</li>
<li>飲み口が洗える</li>
<li>白かシルバー</li>
</ul>

<p>この条件に合いそうなものは他にThermosの350mlのものがあるくらい。飲み口が洗えるという条件は、サハラマグを使っている人に聞いたら飲み口がなくても大丈夫だと言ってたのでそれで良しとした。</p>

<hr>

<p>使い勝手の悪いところはなく、するっとした形なのでかばんからも出しやすくて非常に良い。心配していた漏れもない。飲み口がない分、洗う時もさっと洗えるので逆に良かった。色は高級感があるというほどではないが、安っぽいというほどでもない。飲み物を入れても500mlのペットボトルより軽くて気に入っている。</p>]]></content:encoded>
    </item>
    <item>
      <title>vim-css3-syntax v0.15.0</title>
      <link>http://hail2u.net/blog/software/vim-css3-syntax-v0.15.0.html</link>
      <description>俗に言うところのCSS3仕様もずいぶん安定版のものが増えてきた。更新があっても文章上の修正にとどまり、機能自体の追加や更新はあまりない。ある場合はLevel 4モジュールが作られるようになり、Level 3モジュールへは変更が加わらなくなった。ということでCSS Text Module Level 4最初のWDが出た記念に、vim-css3-syntaxのv0.15.0をリリースした。スナップショットの方も動きがあったようで、何かしらの一線を引ける日も近そうだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/vim-css3-syntax-v0.15.0.html</guid>
      <pubDate>Wed, 23 Sep 2015 15:29:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>俗に言うところのCSS3仕様もずいぶん安定版のものが増えてきた。更新があっても文章上の修正にとどまり、機能自体の追加や更新はあまりない。ある場合はLevel 4モジュールが作られるようになり、Level 3モジュールへは変更が加わらなくなった。ということでCSS Text Module Level 4最初のWDが出た記念に、<a href="https://github.com/hail2u/vim-css3-syntax/tree/v0.15.0">vim-css3-syntaxのv0.15.0</a>をリリースした。スナップショットの方も動きがあったようで、何かしらの一線を引ける日も近そうだ。</p>

<p>プラグイン名を間違えたな、とここに至って思う。Level 4モジュールを別プラグインに分けても良いのだけど、ユーザーに負担を強いることになるのでやめたほうが良さそうだ。複数管理するの面倒だろうというのもある。vim-css-extra-syntaxとかにさりげなくリネームすればよいのかなと考えているが、それほどのものでもないか。</p>

<hr>

<p>Round Display Moduleは本気なのだろうかという感想しか持てない。Shapes Moduleのバリエーションとして作るべきなんじゃないかなと思うけれど、円形以外が数年以内に出てくるとも思えないので、汎用化して複雑怪奇にしたくないということなのかもしれない。死ぬまで使わない気がしてきた。</p>]]></content:encoded>
    </item>
    <item>
      <title>表のセルにおける少数の行揃え</title>
      <link>http://hail2u.net/blog/webdesign/decimal-alignment-in-table-cell.html</link>
      <description>表のセルでは数字は右揃えにすることが多い。しかし少数を右揃えにすると、小数点以下の桁数が違う時に読みづらくなる。等幅フォントにしてもそれは解決しない。少数点がうまく縦に並ぶように揃えたいわけだ。CSSではtext-alignプロパティーで文字列が指定できるようにしたいようで、いずれ可能になるかもしれない。とされているが、実はHTML4.01の頃からほぼ同じ機能は仕様で定義されているものの実装はないので、期待は薄い……と思ったものの、うっかり実装されていないかどうか確認した。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/decimal-alignment-in-table-cell.html</guid>
      <pubDate>Tue, 22 Sep 2015 11:38:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>表のセルでは数字は右揃えにすることが多い。しかし少数を右揃えにすると、小数点以下の桁数が違う時に読みづらくなる。等幅フォントにしてもそれは解決しない。少数<em>点</em>がうまく縦に並ぶように揃えたいわけだ。CSSでは<a href="https://drafts.csswg.org/css-text-4/#character-alignment"><code>text-align</code>プロパティーで文字列が指定できるようにしたい</a>ようで、いずれ可能になるかもしれない。とされているが、実は<a href="http://www.w3.org/TR/html401/struct/tables.html#h-11.3.2">HTML4.01の頃からほぼ同じ機能は仕様で定義されている</a>ものの実装はないので、期待は薄い……と思ったものの、うっかり実装されていないかどうか確認した。</p>

<p >See also: <a href="http://hail2u.net/pub/test/639.html">Test Page for Decimal Alignment in Table Cell</a></p>

<p>やはりというか<code>&lt;td align=&quot;char&quot; char=&quot;.&quot;&gt;</code>の実装はなかった。ついでに<code>text-align: &quot;.&quot;</code>もテストしてみたが、こちらもまだ実装はない模様だ。テスト・ページでは省いたが、ベンダー拡張プリフィックスでの実装ということもなかった。</p>

<hr>

<p>この小数点での行揃えは前に@ub_pnrと「欲しいね」とか言ってたような記憶がある。それ以外にもどうにかしてそうして欲しいというようなことはよく言われる。じゃあどうするかというと、大体は表で欲しがられ、その表は何かしらのデータから生成されるので、データ側をいじって誤魔化している。</p>

<ol>
<li>データをいじり、小数点以下の最大桁に足りない分半角スペースを追加する</li>
<li>セルのスタイルで以下の3つを指定する<ol>
<li><code>font-family: monospace</code></li>
<li><code>text-align: right</code></li>
<li><code>white-space: pre</code></li>
</ol>
</li>
</ol>

<p>これでなんとか揃う。</p>

<p>今時だと等幅フォントに変える代わりに<code>font-feature-settings</code>プロパティーで<code>tnum &quot;1&quot;</code>するのも良い。このウェブサイトでは<a href="http://hail2u.net/pub/test/639.html">ずいぶん前から試しに設定してみて</a>おり、稀に効果を発揮していた（今は発揮していない）。もちろん対応フォントを上流で使っている必要はあるが、違うフォントを使わずに専用の等幅数字を使えるので、より読みやすい結果となりうる。</p>

<hr>

<p>CSS Text Module Level 4はLevel 3に入れることはできなかったものが寄せ集められている。</p>

<ul>
<li><code>display: inline-block</code>でできる隙間を潰す、<code>text-space-collapse: discard</code></li>
<li>最後の一文字や句読点だけ次の行になったりしなくなる、<code>text-wrap: balance</code></li>
<li>完全なる自動ハイフネーション</li>
<li>日本語の文章内の英単語の前後に空白をはさむ、<code>text-spacing: ideograph-alpha</code></li>
</ul>

<p>などなど、<del>人類</del><ins>ウェブ・デザイナー</ins>の夢が詰まっているので、可及的速やかに実装が出てくるとうれしい。</p>]]></content:encoded>
    </item>
    <item>
      <title>Mobile Safari 8と表のセルのフォント・サイズ</title>
      <link>http://hail2u.net/blog/webdesign/font-size-of-table-cell-on-mobile-safari-8.html</link>
      <description>Mobile Safari 8でフォント・サイズが表のセルでのみおかしくなる現象に遭遇した。条件はセルへwhites-pace: nowrapを指定していることのみのようだ（paddingプロパティーの指定があると再現率が上がる）。手元の環境ではスクリーンショットのように16pxで表示されるはずの表のセルが19pxほどで表示されてしまった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/font-size-of-table-cell-on-mobile-safari-8.html</guid>
      <pubDate>Mon, 21 Sep 2015 11:57:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://hail2u.net/pub/test/638.html"><img alt="段落と同じフォント・サイズで表示されるはずの表のセルが少し大きめに表示されてしまっている" height="627" src="http://hail2u.net/images/blog/font-size-of-table-cell-on-mobile-safari-8.png" width="1200"></a>
</figure>

<p>Mobile Safari 8でフォント・サイズが表のセルでのみおかしくなる現象に遭遇した。条件はセルへ<code>whites-pace: nowrap</code>を指定していることのみのようだ（<code>padding</code>プロパティーの指定があると再現率が上がる）。手元の環境ではスクリーンショットのように16pxで表示されるはずの表のセルが19pxほどで表示されてしまった。</p>

<p >See also: <a href="http://hail2u.net/pub/test/638.html">Table Font Size on Mobile Safari 8</a></p>

<p>表ではデータの内容を高速にスキャンできるように様々な工夫をすることがある。セル内での改行や行揃えの位置の調節が主なものだろう。折り返しをつぶすのもそのひとつで、「単語」という概念がなく変なところで改行を入れられやすい日本語では使う機会も多い。そういうところで起こるこの現象は困るが、致命的ではないので無視しても良さそうだ。</p>

<p>Mobile Safari 8と書いたがMobile Safari 9でも起こる。Dynamic Typeと呼ばれているiOS側の機能に起因するのではないかと推測している。もうちょっとはっきりさせることができたら改めて報告したい。</p>]]></content:encoded>
    </item>
    <item>
      <title>Sass変数の（ダメそうな）案</title>
      <link>http://hail2u.net/blog/coding/sass-vars-wip.html</link>
      <description>時代はとっくにSass 3.4なのでローカル変数メインにしたいということが前提にある。そうすることで変数名にBEM等のしっかりとした命名規則を使わずに済み、自己言及的な変数名と数文字の変数名でおおむね完結することになる。パーシャル間で共有したい場合はしょうがないので!globalを使ってローカル変数をグローバルへエクスポートするようなあきらめを許容して誤魔化す。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/sass-vars-wip.html</guid>
      <pubDate>Sat, 19 Sep 2015 00:05:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>時代はとっくにSass 3.4なのでローカル変数メインにしたいということが前提にある。そうすることで変数名にBEM等のしっかりとした命名規則を使わずに済み、自己言及的な変数名と数文字の変数名でおおむね完結することになる。パーシャル間で共有したい場合はしょうがないので<code>!global</code>を使ってローカル変数をグローバルへエクスポートするようなあきらめを許容して誤魔化す。</p>

<p>まずある程度はグローバル変数として定義しておく必要がある。それらグローバル変数は自己言及的なもの（それこそ<code>$color-black: #000;</code>といったようなもの）で、実際にウェブサイトで使われる要素やクラスとは無関係に定義していく。</p>

<pre><code >// _variables.scss
$ratio: 1.7;

$ratio-text: 1;
$ratio-text-large: 1.5;

$line-height-default: $ratio;
</code></pre>

<p>BEMで言うところのブロックのような意味のある単位で切り分けたパーシャルでは、グローバル変数を使いつつ、繰り返し使うならローカル変数を作る。ローカル変数はちゃんとスコープを抜けたら破棄されるので、短い名前で良い。が、ロゴとサイト・ナビゲーションで高さを揃えたいという要件があった場合、ルールセットの最後（他のスコープが始まる<em>前</em>）で<code>!global</code>フラグを使ってグローバル変数へとエクスポートする。</p>

<pre><code >// _logo.scss
.logo {
  $fs: ($ratio-text-large * 1rem);
  $lh: $line-height-default;

  font-size: $fs;
  line-height: $lh;

  <mark>$height-logo: ($lh * $fs) !global;</mark>
}
</code></pre>

<p>サイト・ナビゲーションでは定義済みのグローバル変数を参照するだけだ。</p>

<pre><code >// _site-navigation.scss
.site-navigation {
  height: $height-logo;
}
</code></pre>

<p>こうすると長い変数名を極力減らすことが可能になる。グローバル変数へとエクスポートする時だけ他との衝突が起こりうるので、その時だけ工夫した長い名前を付ける。</p>

<hr>

<p>どうやってもきれいに書けない。変数の命名パターンが3つになるのも死の香りが漂っている。変数を一箇所にまとめることのできるグローバル変数のみ使う手法は書きやすさで優る。ただローカル変数メインで書くと、特定のウィジェットを削除する時にそのファイルを削除するだけで終わりになり、一箇所に変数をまとめた場合にグローバルに定義しておくことになるそのウィジェット向けの変数がゴミとして残らないという保守性での見逃せないメリットがある。</p>

<p>まずは自分のウェブサイトでローカル変数メインに書き換えて運用しはじめた。結論はもうちょっと先になりそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Sassの基本</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Wed, 07 Oct 2015 02:36:00 +0900</lastBuildDate>
  </channel>
</rss>
