<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>ローカルのフォント</title>
      <link>http://hail2u.net/blog/webdesign/local-font.html</link>
      <description>少し前にこのウェブサイトがNeue HelveticaまたはCalibriになるように変更した。ウェブ・フォントを普通に使う機会が増えたその反動で、自分のウェブサイトは使いたくなくなる、といったところであまり深い理由は無い。ローカルのフォントだと表示の速さが3倍回しくらいに感じる。初期ページ表示までに特に引っかかりがないようなウェブページだと、コンマ1秒もないウェイトですら影響は大きい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/local-font.html</guid>
      <pubDate>Thu, 28 May 2015 07:52:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>少し前にこのウェブサイトがNeue HelveticaまたはCalibriになるように変更した。ウェブ・フォントを普通に使う機会が増えたその反動で、自分のウェブサイトは使いたくなくなる、といったところであまり深い理由は無い。ローカルのフォントだと表示の速さが3倍回しくらいに感じる。初期ページ表示までに特に引っかかりがないようなウェブページだと、コンマ1秒もないウェイトですら影響は大きい。</p>

<p>ウェブ・フォントの表示における技術的な問題は、解決することは難しいことがわかってきた。仕様が不十分なこともあるが、実装が依存している技術に左右され、そこはどうにもしようがなさそうな領域だからだ。HTTPS + HTTP/2でかなり改善する可能性はあるが、ウェブ・フォント用の専用ストレージがブラウザーに実装されない限りは完全には解決できないはずだ。</p>

<p>一方ローカルのフォントにも解決できない問題は多い。そのひとつはもちろんタイプフェイスの選択肢が限られるということだ。他にもプラットフォーム間で統一が取れないこと、それに由来するデザインの崩れを予測することが難しいこと、「見飽きた」という感覚を払しょくすることができないこと、まだまだあるだろう。</p>

<p>ウェブ・フォントが解決するのはまさにここで、そのため重宝され、広まり、根付くことに成功した。ウェブデザインの95%であるところのタイポグラフィー、その20%程を占めるであろうタイプフェイスの選定に大きな変革をもたらしたウェブ・フォントは大きな意味を持つ。</p>

<aside>
<p>Make your articles load faster in News Feed and deliver a better reading experience for people on Facebook with Instant Articles.</p>
</aside>

<p>大手ウェブサービスがウェブサイトを取り込む動きは以前からあり、Facebookユーザーにだけ最高の体験を提供しようとするInstant Articlesによりいっそう加速しそうなことは間違いない。キュレーション・ニュースのようなアプリたちが、Flipboardのようにトラフィックをほとんどアプリの外へ持ち出さないようにするのも時間の問題だろう。そこに個のブランドが残ることはなく、取り込まれたコンテンツだけが残る。</p>

<p>こういったインターネットの一部であり大部分における変化がブランディングに割く労力を割に合わないものにするかどうか、これがウェブ・フォントを捨て(諦めるのではなく)ローカルのフォントに戻るかどうかを決定するひとつの要因となる。現状ではそこにもう一つ技術的限界という問題が乗っかっているため、単なる反動もあるだろうが、また少しづつローカルのフォントを利用したウェブサイトが増えてくると考えられる。</p>

<hr>

<p>僕はローカルのフォントを使うとなると、以下の様な組み合わせにほぼ終わる。</p>

<ul>
<li><code>Helvetica Neue, Calibri, sans-serif</code></li>
<li><code>Baskerville, Cambria, serif</code></li>
<li><code>Menlo, Consolas, monospace</code></li>
<li><code>Verdana, sans-serif</code></li>
<li><code>Georgia, serif</code></li>
<li><code>Courier New, monospace</code></li>
</ul>

<p>UI向けフォント(Lucida Grande、Segoe UI、Tahomaなど)は、本文で使うと詰まりすぎていて読みづらいので避けたい、となるとこれくらいでまかなうことができる。似通った見た目といったレイアウト上の都合よりも、OSにおいて同じような扱いが想定されていることを主眼に組み合わせている。そのため今はもうArialではなくCalibriを、Times New RomanではなくCambriaを使うことが多い。そうでなければ古き良きCore fonts for the Webを使うだけにしている。</p>

<p>他にもいろいろフォントはあるが、Trebuchet MSなどはもはやComic Sans MSに近い印象を受ける人も多いだろう。OptimaはTrebuchet MSほどではないが、昨今の傾向から考えると本文で使うのは厳しい。Apple GaramondやBodoni、News Gothic MTは良いフォントだが使えない可能性もある。Hoefler TextやGabriolaも同じく良いが、Boldがない。Corbelも悪くはないが、まだサンセリフでオールドスタイルの数字がデフォルトな状況には対応しづらい(<code>font-feature-settings</code>プロパティーだけではなく、<code>font-variant-numeric</code>プロパティーが必要になる)。</p>

<p>また、素晴らしいテキスト・レンダリング環境であるOS XやiOSのために、それら向けのフォント・ファミリー名を優先して指定してやることで、それら向けではないフォントが使われないようにすることも重視している。古くは優先すべきメジャーなWindows向けのフォントを指定することが定石とされていたが、今はもうそういう時代ではなく、ベストにベストを届けられるようにすべきだろう。</p>

<p>最後に一般ファミリー名を忘れないようにすることも日本語を始めとした非ラテン文字言語のウェブページでは大切だ。せっかく各ブラウザーで日本語向けのデフォルト・フォントがメイリオになってきているのに、これを忘れていたら○○○が召喚されてしまう。</p>

<hr>

<p>ウェブ・フォントはきちんと正しい形で広まったが、顕在化した問題に目をつぶったままであることは否定出来ない。その問題がInstant Articlesのような仕組みによりもたらされる未来を肯定してしまうひとつの理由になっているとも言えるだろう。ここを乗り越えてウェブ・フォントがもう一度花開くためには、その技術的限界を手軽に解決する仕組みが必要になる。</p>

<p>それまではローカルのフォントを使うことで、ウェブサイトのブランディングよりもコンテンツのアクセス性を優先することがまた必要になってくるだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>scss-lint.sh</title>
      <link>http://hail2u.net/blog/software/scss-lint-sh.html</link>
      <description>SCSS Lintがv0.34.0から設定ファイルを上流から探さなくなった。カレント・ディレクトリーから探して見つからなかったらユーザーのホーム・ディレクトリーから探すようにはったようだが、プロジェクトのルート・ディレクトリーから探すようにはならないようだ。イシューを立てようかと思ったのだけど上流から探す機能をわざわざ削除したことの意味を調べるのが面倒くさかったので、シェル・スクリプトからプロジェクトのルート・ディレクトリーに.scss-lint.ymlがある場合はそれを使うようなラッパー・スクリプトを書くことにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/scss-lint-sh.html</guid>
      <pubDate>Wed, 27 May 2015 06:07:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/brigade/scss-lint">SCSS Lint</a>がv0.34.0から設定ファイルを上流から探さなくなった。カレント・ディレクトリーから探して見つからなかったら<a href="https://github.com/brigade/scss-lint/pull/452">ユーザーのホーム・ディレクトリーから探すようにはった</a>ようだが、プロジェクトのルート・ディレクトリーから探すようにはならないようだ。イシューを立てようかと思ったのだけど上流から探す機能をわざわざ削除したことの意味を調べるのが面倒くさかったので、シェル・スクリプトからプロジェクトのルート・ディレクトリーに<code>.scss-lint.yml</code>がある場合はそれを使うようなラッパー・スクリプトを書くことにした。</p>

<pre><code>#!/bin/sh

b=${GEM_HOME}/bin/scss-lint
r=`git rev-parse --show-cdup 2&gt;/dev/null`
c=${r}.scss-lint.yml

if [ $? -eq 0 ] &amp;&amp; [ -e $c ]; then
  ${b} -c ${c} $*
else
  ${b} $*
fi
</code></pre>

<p>Gitの<code>rev-parse</code>サブコマンドで<code>--show-cdup</code>を使うと、<code>.git</code>ディレクトリーのあるディレクトリー、つまりプロジェクトのルート・ディレクトリーまでの相対パスが取得できる。これと<code>.scss-lint.yml</code>を連結してファイル・テスト演算子で存在チェックし、あった場合は<code>-c</code> (--config)オプションで設定を渡してやるようにする。オリジナルの<code>scss-lint</code>の実行ファイルは<code>$GEM_HOME</code>から探す。</p>

<p><a href="http://hail2u.net/pub/test/scss-lint.sh">このシェル・スクリプト</a>に<code>scss-lint</code>という名前をつけて、パスの通ったディレクトリーかつ<code>$GEM_HOME/bin/scss-lint</code>より先に見つかるディレクトリーに置けばそっくり入れ替えることができる。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150523.html</link>
      <description>メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150523.html</guid>
      <pubDate>Tue, 26 May 2015 12:49:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</p>

<p>めっきり圧縮ファイルを展開することもなくなった。あんまりメールで添付ファイルのやりとりをしなくなったとか、そのまま見れるツールが増えたとか理由はいろいろある。だからたとえ夢であってもこういう間違いを起こすことはきっとある。たぶん。</p>]]></content:encoded>
    </item>
    <item>
      <title>DuckDuckGoでサイト内検索</title>
      <link>http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</link>
      <description>このウェブサイトの全文検索フォームをDuckDuckGoによるものに変えた。公式にはiframe要素によるものが推奨されているが、そのページからリンクされている更なるカスタマイズを解説した記事のように、form要素を直接書いても良いようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</guid>
      <pubDate>Mon, 25 May 2015 00:17:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>このウェブサイトの全文検索フォームを<a href="https://duckduckgo.com/">DuckDuckGo</a>によるものに変えた。公式には<a href="https://duckduckgo.com/search_box"><code>iframe</code>要素によるもの</a>が推奨されているが、そのページからリンクされている<a href="http://hardik.org/2013/06/01/stylising-duckduckgo-site-search/">更なるカスタマイズを解説した記事</a>のように、<code>form</code>要素を直接書いても良いようだ。</p>

<p>サイト内検索を実現するための最小限のコードは以下のようになる。</p>

<pre><code>&lt;form
  <mark>action=&quot;https://duckduckgo.com/&quot;</mark>
  role=&quot;search&quot;&gt;
  &lt;input
    <mark>name=&quot;sites&quot;</mark>
    type=&quot;hidden&quot;
    <mark>value=&quot;hail2u.net&quot;</mark>&gt;
  &lt;input
    <mark>name=&quot;q&quot;</mark>
    type=&quot;search&quot;&gt;
  &lt;input
    type=&quot;submit&quot;
    value=&quot;Search&quot;&gt;
&lt;/form&gt;
</code></pre>

<p><code>form</code>要素の<code>action</code>属性でトップページのURLを、<code>name</code>属性の値を<code>sites</code>に設定した隠れコントロールで検索したいドメインを、<code>name</code>属性の値が<code>q</code>のテキスト入力コントロールが必須になる。<code>methodo</code>属性はデフォルトで<code>GET</code>なので必要なく、送信ボタンにも特に名前を付ける必要はない。ドメインはカンマで区切って複数指定することもできる。</p>

<p>これに加えて<a href="https://duckduckgo.com/params"><em>検索結果のページでの表示</em>を制御するパラメーター</a>を隠れコントロールで指定することができる。柔軟にカスタマイズできてすごい……ように思えるが、色を変えたりという程度なのでそれほどでもなく、<a href="https://cse.google.com/cse/">Googleカスタム検索エンジン</a>の方がそういう点では優る。手軽にちょっとだけ体裁を変えるということが可能ではあるけれども、HTMLの書き換えを伴うのであまり意味はない。</p>

<hr>

<p>肝心の検索結果はというと、サイト内検索なら問題は感じられない。確かにDuckDuckGoはGoogleと比べるとかなり検索結果のクオリティーは落ちる。普通に謎の業者が勝手に作った丸パクリのウェブサイトがかなり上位に出てきたりもするし、日本語のウェブサイトを検索しているのに延々と中国語のスパム・ウェブサイトが出てきたりもする。しかしサイト内検索で使う場合はそういったゴミが混ざることもなく、順位付けの精度も悪くはない。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSS Transformによるセンタリングのベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</link>
      <description>上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</guid>
      <pubDate>Sun, 24 May 2015 02:59:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/631-1.html">Centering Unknown with CSS Transform (top/left)</a></p>

<p>このデモは実際に不具合が起こりうるパターンになっている。センタリングする要素を<code>top</code>と<code>left</code>プロパティーで動かした後、<code>transform: translate(-50%, -50%)</code>で元に戻しているわけだが、Internet Explorer 11では横スクロールバーが出る原因となる。どうやら<code>left</code>と<code>top</code>プロパティーで動かした時点で横スクロールバーの有無が確定してしまうようだ。コンテナー側で<code>overflow</code>プロパティーを使えばアドホックに対処することは可能ではあるが、副作用を伴うのでやらない方が良いだろう。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/631-2.html">Centering Unknown with CSS Transform (right/bottom)</a></p>

<p>対して<code>right</code>と<code>bottom</code>プロパティーで動かした後、<code>transform: translate(50%, 50%)</code>するパターンでは横スクロールバーが出ることはない。描画領域が拡大しない方向へ動かしているからだ。こちらのパターンには特にデメリットもなく、<code>top</code>と<code>left</code>プロパティーのパターンと比べても極端にコード量が増えるわけでもない(2文字増えるだけだ)。</p>

<p>CSS Transformによるセンタリングの説明では多くの場合、前者の<code>top</code>と<code>left</code>プロパティーを使ったパターンが使われている。その解説は間違っているわけではないが、Internet Explorer 11の挙動を考慮すると<code>right</code>と<code>bottom</code>プロパティーを使ったパターンが安定していると言え、ベスト・プラクティス足りえる。</p>

<hr>

<p>僕はこのCSS Transformによるセンタリングには欠点があると感じていて、あまり多用はしないようにしている。その欠点とは動かした要素がブラーがかかったようにぼやけることがあることだ。以前からWindowsのChromeでは多発する。文字はぼやけないのでわかりづらい(気づきづらい)が、幾何学的なシャープな画像を動かしてみたりすると気づきやすい。再現条件がよくわからないのでサンプルもうまく作れない。</p>

<p>ともあれ上下左右の中央寄せには選択肢は多くないので、結局は使わざるを得ない。<code>position</code>プロパティーでも<code>background-position</code>プロパティーのような配置ができれば良いのになとたまに思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>Instapaper</title>
      <link>http://hail2u.net/blog/internet/hello-instapaper.html</link>
      <description>Readabilityを愛して止まないのだけど、結構な頻度で読めない、または画像がうまく出ないみたいな感じになってきたので、遂に諦めてInstapaperに乗り換えた。特に良いなと思ったところもないけれど、悪いと思ったところもまるでない。日付やお気に入りを維持してインポートすることができ、スムーズに乗り換えることができた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hello-instapaper.html</guid>
      <pubDate>Sat, 23 May 2015 10:57:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://www.readability.com/">Readability</a>を愛して止まないのだけど、結構な頻度で読めない、または画像がうまく出ないみたいな感じになってきたので、遂に諦めて<a href="https://www.instapaper.com/">Instapaper</a>に乗り換えた。特に良いなと思ったところもないけれど、悪いと思ったところもまるでない。日付やお気に入りを維持してインポートすることができ、スムーズに乗り換えることができた。</p>

<p>ウェブ側では不満はまったくないけれど、Chrome拡張はReadabilityのものの方が即読み始めることができて良いかなと思った。このあたりの読むフローを変える必要がありそう。送って後で読むというスタイルだと読むの忘れるので、送りつつ読む方が性に合っていそうなことを考えると、公式の拡張ではないやつを使った方が良いのかもしれない。</p>

<p>もうひとつ想定外だったのはReederが読む方に対応していなかったこと。てっきりサポートされているかと思ったけどそんなことは全然なかった。これは公式アプリに慣れるしかなさそうだ。</p>

<hr>

<p><a href="https://github.com/hail2u/drawic/blob/master/instapaper.svg">アイコン</a>は作った。</p>]]></content:encoded>
    </item>
    <item>
      <title>main//main</title>
      <link>http://hail2u.net/blog/webdesign/main-in-main.html</link>
      <description><![CDATA[遂に<div itemprop="articleBody">というタグに耐え切れなくなったので、main要素をネストする方向に書き換えた。HTML5仕様ではmain要素はドキュメントごとにひとつしか許されないが、WHATWG版HTML仕様ではそのような縛りはない。すっきりした。]]></description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/main-in-main.html</guid>
      <pubDate>Fri, 22 May 2015 13:16:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>遂に<code>&lt;div itemprop=&quot;articleBody&quot;&gt;</code>というタグに耐え切れなくなったので、<code>main</code>要素をネストする方向に書き換えた。HTML5仕様では<a href="http://www.w3.org/TR/html5/grouping-content.html#the-main-element"><code>main</code>要素はドキュメントごとにひとつしか許されない</a>が、WHATWG版HTML仕様ではそのような縛りはない。すっきりした。</p>

<p>それだけだと中途半端なので、見出し要素だけで暗黙のセクションを生成させていた箇所をすべて<code>section</code>要素でマークアップした。明確な切れ目があるわけではないので、雑にgrepから置換してから目で確認していった。これからはちゃんと<code>section</code>要素を書くことにする。</p>

<p>インデントしたらそのインデント・レベルのテキストを<code>section</code>要素でマークアップしてくれるMarkdownプリプロセッサーとか欲しいかなとかちょっとだけ考えた。けどそれはそれでMarkdownの良いところである読みやすさが失われる。やっぱり色んな意味でMarkdownは簡易HTML記法ではないなと思う。</p>

<p>とりあえず魔改造したMarkedで<code>section</code>要素内も普通にMarkdownと解釈されるようにしたけど、ついに普通にHTMLガシガシ書く生活に戻りそうな予感がする。技術者としてダメな感じでテンション上がる。</p>

<p>他HTTPS化に備えた作業の続きをしたりもしている。HTTPS化はとても魅力的なんだけど、HTTPに戻るということが事実上不可能と考えるべきだと思うので、もうちょっとどのくらいのお金と労力で運営できるかを確認してからにしたい。CloudFlareに依存した形での運営を、無料で永遠に続けられると仮定するのは危険すぎる。</p>]]></content:encoded>
    </item>
    <item>
      <title>a:visited</title>
      <link>http://hail2u.net/blog/webdesign/a-visited.html</link>
      <description>ウェブページのCSSでa:visitedを使うと、リンク先が訪問済みの場合にリンクの色を替えることができる。ちゃんと設定してやることによりユーザビリティーが上がるというのが定説だろう。訪問済みならばもう開く必要はなく、結果そのページに集中することができるというわけだ。この論理には3つ疑問がある。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/a-visited.html</guid>
      <pubDate>Thu, 21 May 2015 07:01:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ウェブページのCSSで<code>a:visited</code>を使うと、リンク先が訪問済みの場合にリンクの色を替えることができる。ちゃんと設定してやることによりユーザビリティーが上がるというのが定説だろう。訪問済みならばもう開く必要はなく、結果そのページに集中することができるというわけだ。この論理には3つ疑問がある。</p>

<section>
<h2>人の記憶</h2>

<p>メールのようにそれなりに内容が簡潔にまとまっているようなものの場合、一度読めば二度と読む必要はない。しかしウェブページは違う。人はウェブページを流し読みするものだし、その結果として内容を誤解するものだ。ウェブページの内容に対する人の記憶はまったくあてにならない。</p>

<p>訪問済みのウェブページを開かずに読み進めるということは、その内容をうろ覚えで誤解したままウェブページを読み進めるということに他ならない。ユーザーに優しくしたつもりが、結果としてウェブページの誤読を加速することになりうる。</p>
</section>

<section>
<h2>リンク先</h2>

<p>リンクを張った文字列は必ずしもリンク先のウェブページのタイトルと同じではない。そのため訪問済みであったとしても、そのリンク先がどのようなページであるのかを類推することは難しい。わかることは訪問したことがあるという事実だけで、それ以上は何も知ることはできない。</p>

<p>それでもデスクトップ・ブラウザーならばステータス・バーなどでリンク先を確認することはできるし、モバイル・ブラウザーではロングタップして確認することはできる。確認するのはいかにも面倒だし(特にロングタップによる確認)、もしユーザーが確認することを前提とするのならば、<code>a:visited</code>を使って訪問済みかどうかの情報を提供する意味はほとんどなくなるだろう。</p>
</section>

<section>
<h2>a:visitedの色</h2>

<p>色を変えることで訪問済みであることがわかると言うが、本当にそうだろうか。リンクの色が青で訪問済みの色が紫だとすると、確かにわかるかもしれない。しかし実際にそうであることはまずないだろう。その場合、ユーザーが訪問済みのリンクであることを知るためには、制作者の指定した訪問済みリンクの色を知っていることが条件になるが、知っているわけがない。</p>

<p>コントラストを落とすと訪問済みであるといった経験則は多分存在するが、それも訪問済みのリンクと未訪問のリンクが比較できる状態でのみ通用する。もし訪問済みのリンクのみ(またはその逆)だった場合、その色がコントラストが落ちているかどうかを判断することはできない。</p>

<p>下線を消し、本文と同じ色にすることで、未訪問のリンクと大きく差をつけることは可能だ。しかしそれは単にリンクとして認識できなくさせるだけで、訪問済みだということを知ることはできない。</p>

<p>何かわかりやすい形で表示できれば良いのだが、セキュリティの関係から多くのブラウザーで色以外を変えることはできない。またJavaScriptなどからも扱うことは難しい。つまり訪問済みであることを訪問者に誤解なく伝えるためには、リンク色をデフォルトのままにする必要があり、結果<code>a:visited</code>は無用の長物と化す。</p>
</section>

<hr>

<p><code>a:visited</code>がうまく機能するのは限られた状況でだけだろう。例えばニュース見出しの一覧や検索結果の一覧のウェブページはその良い例だ。そのページ自体に特に意味は無いこと、リンク先の内容がわかりやすいこと、繰り返し訪問する可能性が高いことが条件になる。普通に文章を書いて普通にリンクを張ったごく普通のウェブページではほとんど意味をなさないはずだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Formspree</title>
      <link>http://hail2u.net/blog/webdesign/formspree.html</link>
      <description>Infield Top Aligned Labelの実験がてら、Formspreeでコンタクト・フォームを作成して設置していた。Formspreeは登録不要で使えるメール・フォームの設置をサポートするウェブサービスだ。提供するのはほぼエンドポイントのURLのみで、それに自分のメール・アドレスを追加したURLへPOSTするフォームを作るだけで設置が完了する。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/formspree.html</guid>
      <pubDate>Wed, 20 May 2015 11:11:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="http://hail2u.net/blog/webdesign/infield-top-aligned-label-pattern.html">Infield Top Aligned Label</a>の実験がてら、<a href="https://formspree.io/">Formspree</a>でコンタクト・フォームを作成して設置していた。Formspreeは登録不要で使えるメール・フォームの設置をサポートするウェブサービスだ。提供するのはほぼエンドポイントのURLのみで、それに自分のメール・アドレスを追加したURLへ<code>POST</code>するフォームを作るだけで設置が完了する。</p>

<p>設置完了後に1回だけ自分で設置したフォームを使いメールを送信すると、設置したURLとメール・アドレスの紐付けを確認するメールが来る。その手順に従い確認すると、あとはそのフォームで送られた内容が指定したメール・アドレスへ転送されてくるようになる。</p>

<hr>

<figure>
  <a href="http://hail2u.net/images/blog/infield-top-aligned-label-pattern-example.png"><img alt="テキスト・フィールド内にラベルが配置されているパターン" height="627" src="http://hail2u.net/images/blog/infield-top-aligned-label-pattern-example.png" width="1200"></a>
</figure>

<p>Infiled Top Aligned Labelの実装では多少複雑な形になっているが、それほどややこしくもしなかった。複数列にしたのでFlexboxを使う方が良さそうだったが、結局<code>float</code>と<code>clear</code>プロパティーでレイアウトした。</p>

<p>入力フィールドの収まりはすごく良いものの、反面それらと著しく佇まいの違うボタンの配置と見た目の調整が難しいというのが実装した感想だ。入力フィールドと同じように枠を付けてその中にボタンを配置すると、余白の統一感がなくなる。かといって枠いっぱいにボタンを広げると見た目の圧が強すぎるきらいがある。枠の外に少し離して普通のボタンを配置するのは悪くはないが、前後のコンテンツとのバランスが取りづらいように感じた。</p>

<p>インラインで埋め込むフォームよりも、サインアップやログインなどの完全に独立しててそれだけしかないようなフォームに向いているのかもしれない。</p>

<hr>

<p>Formspreeはエンドポイントへ向けてJSONを投げるという形でもメールの送信が可能になっている。ウェブサイトへの設置でそうした場合、ページ遷移なしでメールの送信が可能になる。リファラーのチェックやURLとの紐付けの関係上、ネイティブ・アプリへの組み込みは難しそうだが、ウェブ・アプリなら可能だろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSSWring v3.0.5</title>
      <link>http://hail2u.net/blog/webdesign/node-csswring-v3.0.5.html</link>
      <description>2つのバグを修正してCSSWringのv3.0.5をリリースした。#で始まるコメントが全てソース・マップ用の埋め込みコメントとみなされていたバグと、url("")内に対応しない閉じ括弧が含まれている場合に引用符の削除に失敗するバグが修正された。あわせてCLIプログラムのちょっとした修正も行っておいた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-csswring-v3.0.5.html</guid>
      <pubDate>Tue, 19 May 2015 07:33:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>2つのバグを修正して<a href="https://github.com/hail2u/node-csswring">CSSWring</a>のv3.0.5をリリースした。<code>#</code>で始まるコメントが全てソース・マップ用の埋め込みコメントとみなされていたバグと、<code>url(&quot;&quot;)</code>内に<em>対応しない</em>閉じ括弧が含まれている場合に引用符の削除に失敗するバグが修正された。あわせてCLIプログラムのちょっとした修正も行っておいた。</p>

<p>PostCSS周辺では少し動きがあった。Twitter Bootstrapが次のバージョンでSCSSベースになり、その次のバージョンではPostCSSをバックエンドとした統合的なシステムになるという話だ(あまり信憑性はないが)。このおかげでPostCSSへの注目度が一気に上がったような形だ。CSSフレームワークごとにプリプロセッサー(に近い何か)が用意される時代と考えるとちょっとびっくりするが、標準に寄せた形ならそれでも良いのかなとも思える。そうなって初めて今まで<em>フレームワークもどき</em>に過ぎなかったCSSフレームワークが本当にフレームワークとなる、と言えるのかもしれない。</p>

<p>僕はそれよりもまずはPostCSSベースでSCSS (のようなもの)が分割・再構成されないかなとか考えている。<a href="http://sass-lang.com/libsass">libSass</a>による高速なSCSSの実装は魅力的ではあるが、前段で触れた<em>CSSフレームワークごとのプリプロセッサー</em>という未来がありうることを考えると、独立したプリプロセッサー言語というものそれ自体に未来はあまり感じることはできない。それならばSCSSの様々な機能をモジュール化してPostCSS上で再構成してくれると色々使いでがありそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Sassの基本</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Thu, 28 May 2015 07:52:00 +0900</lastBuildDate>
  </channel>
</rss>
