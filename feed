<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>無限スクロール向け雑なローディング画像</title>
      <link>http://hail2u.net/blog/webdesign/easy-loading-marker-for-infinite-scroll.html</link>
      <description>無限スクロールはちょくちょく実装することはあるが、追加するコンテンツの読み込みや挿入はともかく、ローディング画像の処理で悩むことがある。その表示の切り替えには実装と処理のどちらにおいてもそこそこコストがかかるからだ。かなり前に色々考えるのが面倒になり、常に表示しておくという雑な手をよく使うようになった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/easy-loading-marker-for-infinite-scroll.html</guid>
      <pubDate>Wed, 10 Jun 2015 03:15:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >無限スクロールはちょくちょく実装することはあるが、追加するコンテンツの読み込みや挿入はともかく、ローディング画像の処理で悩むことがある。その表示の切り替えには実装と処理のどちらにおいてもそこそこコストがかかるからだ。かなり前に色々考えるのが面倒になり、常に表示しておくという雑な手をよく使うようになった。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/634.html">Easy Loading Marker for Infinite Scroll</a></p>

<p>デモでは90%ほどスクロールすると無限スクロールっぽくコンテンツが少し時間をおいてから追加される。コンテナーである<code>#content</code>の最下部には常にローディング画像を背景画像として表示してあるので、特に操作することなく無限スクロールのためにコンテンツを読込中であることを示すことができる。SVGアニメーションでローディング画像を作ったためInternet Explorer 11では回らないが、おおまかにどういう挙動をするのかはわかることだろう。</p>

<p>こういった雑なローディング画像の実装には利点が3つ挙げられる。</p>

<ul>
<li>コンテンツの読み込み以外のコードを書く必要がなくなる</li>
<li>ローディング画像が必要(とされそう)な時に即表示される</li>
<li>レンダリングのコストを下げられる</li>
</ul>

<section>
<h2>コード</h2>

<p>単純にローディング画像の挿入と削除を担当するコードがなくなり、ローディング画像の状態を保存する必要もなくなる。アニメーションGIFではなくスケーラブルにしたい場合も、デモのようにSVGアニメーションで完結させれば、HTMLへ空要素の挿入が必要ない(CSSでやる場合は擬似要素のアニメーションという点でいろいろあるので空要素などが必要になる)。もちろんCSSのコードが単純明快になるという点も見逃せない。</p>
</section>

<section>
<h2>ローディング画像の表示</h2>

<p>常に表示されているので、パフォーマンスを考慮したスクロール・イベントの間引きによる若干の遅延に影響を受けない。もちろんコンテンツの挿入そのもの自体は影響を受けるが、ローディング画像の表示においては影響を受けず、長めにアニメーションするだけになる。</p>
</section>

<section>
<h2>レンダリング・コスト</h2>

<p>画面外で常にアニメーションをさせることにはそれなりにコストはあるが、突然DOMに要素を追加(リフローやリレイアウト)し、アニメーションを開始(アニメーションの初期化コスト)するよりは低い。デモの場合はSVG内で完結させており、GPUのサポートも期待できる。</p>
</section>

<hr>

<p>欠点としては無限スクロール中のエラーに対して弱いことだ。追加コンテンツの読み込みとローディング画像の表示が完全に分離しているので、エラーが起きた時だけ両者を連動させる必要が出てくる。追加コンテンツの読み込み側ではエラー時にクラスを振るだけに留め、ローディング画像の表示と同じく簡単なCSSで見えなくしてやるのが妥当か。</p>

<hr>

<p>無限スクロールにおいては、ローディング画像などを表示することなく必要そうになる前に読み込み挿入しておく方が実装としては理想に近い。しかしその理想を実現するまでには、コンテンツを送る側のパフォーマンスやいつ読み込み始めるかのタイミング、ユーザーの回線への負担など解決が必要な問題がいくつもある。まずは実装ということを考えると、この雑なローディング画像は面倒がなく、便利に使っている。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150603.html</link>
      <description>近くに昨日できた山が噴火する。そこから直径5mくらいの岩が降ってくるので、必死で避ける。避ける。3時間くらい避けたら岩の代わりにコインが降ってくるようになった。「コインだ！金だ！」と思って触ったら死んだ。ところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150603.html</guid>
      <pubDate>Tue, 09 Jun 2015 04:29:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >近くに昨日できた山が噴火する。そこから直径5mくらいの岩が降ってくるので、必死で避ける。避ける。3時間くらい避けたら岩の代わりにコインが降ってくるようになった。「コインだ！金だ！」と思って触ったら死んだ。ところで目が覚めた。</p>

<p>噴火の夢は何回か見たことがあるけど、実際に噴火を間近で見たことがないため、現実味に欠ける。桃鉄の噴火イベントみたいにドドドドって音がして、しばらくしたら上から岩が降ってくるだけ。煙や灰がまったくないので避けやすい。岩も普通の岩で熱いとかもない。</p>]]></content:encoded>
    </item>
    <item>
      <title>list-style-type: "🆕";</title>
      <link>http://hail2u.net/blog/webdesign/list-style-type-string.html</link>
      <description>Firefox 39からlist-style-typeプロパティーで文字列が使えるようになる。今までは文字列を使おうとすると擬似要素経由で行うことになったため、デフォルトで要素の外側に配置されるリスト・マーカーと違和感のないように行うのはなかなか難しかった。そういった点が解決しやすくなったことや、Emojiを利用したリスト・マーカーなど、明快に広がる使い勝手の良さもあるが、他にも横並びのリストの区切りが作りやすくなる。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/list-style-type-string.html</guid>
      <pubDate>Mon, 08 Jun 2015 03:47:00 +0900</pubDate>
      <content:encoded><![CDATA[<p ><a href="https://developer.mozilla.org/en-US/Firefox/Releases/39">Firefox 39</a>から<code>list-style-type</code>プロパティーで文字列が使えるようになる。今までは文字列を使おうとすると擬似要素経由で行うことになったため、デフォルトで要素の外側に配置されるリスト・マーカーと違和感のないように行うのはなかなか難しかった。そういった点が解決しやすくなったことや、Emojiを利用したリスト・マーカーなど、明快に広がる使い勝手の良さもあるが、他にも横並びのリストの区切りが作りやすくなる。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/633.html">list-style-type: &quot;string&quot;</a></p>

<p>デモでは横並びのリストの区切りにMiddle Dot (<code>·</code>)を使っている。ウェブサイトのフッターにあるリンク・リストなどでよくみる形のものだ。擬似要素でやる場合は、<code>li</code>要素のスタイルのリセットに加えて擬似要素の追加が必要になるが、<code>list-style-type</code>プロパティーが使える場合はずっと簡単になる。</p>

<pre><code >li {
  float: left;
  list-style-position: inside;
  list-style-type: &quot; · &quot;;
}

li:first-child {
  list-style-type: &quot;&quot;;
}
</code></pre>

<p>擬似要素を使う場合と比べて少しシンプルに、そして直感的なコードになっていることと思う。リスト項目と区切りの間の空白も文字列でコントロールすることができるので、文字列ベースの区切りにはもってこいだろう。ただし連続した空白はもちろんまとめられるので、非改行スペース(<code>\a0</code>)をうまく使うときれいに調節することができる。</p>

<p>区切りに使える文字列の自由度はかなり高い。Emojiもそうだが、ユニコードで定義されている<a href="http://en.wikipedia.org/wiki/Unicode_symbols">多くのシンボル文字</a>を使うことももちろん出来る。サブセット化したアイコン・フォントとも相性が良いと考えられるが、それは素直にSVGにして<code>list-style-image</code>プロパティーで参照した方が良いだろう。</p>

<hr>

<p>この<code>list-style-type</code>プロパティーにおける文字列の利用は、随分前から仕様では定義されていた(<a href="http://www.w3.org/TR/2011/WD-css3-lists-20110524/">2011/05/24付けのWorking Draft</a>からのようだ)が、実装は今月にリリースをひかえるFirefox 39が最初となる。そのため気軽に使えるようになるまではかなりの時間がかかることだろう。このような具体的で実践的な利用例を挙げることで、実装が進むことを期待したい。</p>]]></content:encoded>
    </item>
    <item>
      <title>カラースキームのアップデート</title>
      <link>http://hail2u.net/blog/webdesign/updating-color-scheme.html</link>
      <description>このウェブサイトのカラースキームを少し変えた。ベースとなるアクセント・カラーを#1188bbから#278dd2と少し青を強くした。並べて比較するとわかるといった程度の違いで、ほとんど変わっていない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/updating-color-scheme.html</guid>
      <pubDate>Sun, 07 Jun 2015 02:34:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >このウェブサイトのカラースキームを少し変えた。ベースとなるアクセント・カラーを<code style="background-color:#1188bb;color:#fff">#1188bb</code>から<code style="background-color:#278dd2;color:#fff">#278dd2</code>と少し青を強くした。並べて比較するとわかるといった程度の違いで、ほとんど変わっていない。</p>

<p>多くの場合、こういったカラースキームの微調整には長い期間が必要になる。短期間に比較で行うと、微妙な違いが強調されて認識されてしまうため、自分の認識と実際の変化に大きなズレが生じてしまう。第三者に何も言わず見せ、ブラインド・テストを行うとすんなりおかしいところが発見できるが、少人数で開発している場合はそういったフラットな状態で確認することは難しいので、長い期間をかけてじっくりと確認する必要がある。</p>

<p>今回は<code style="background-color:#1188bb;color:#fff">#1188bb</code>から<code style="background-color:#3399ff;color:#fff">#3399ff</code>までの間で色々試した結果、3ヶ月ほどで<code style="background-color:#278dd2;color:#fff">#278dd2</code>に落ち着いた。通常の背景とのコントラスト比は<code>3.42</code>で<code>4.5</code>にはかなり足らないが、本文に使うわけではないのでこれまで通り目をつぶっておく。</p>]]></content:encoded>
    </item>
    <item>
      <title>スプレーとスティック、そしてクリーム</title>
      <link>http://hail2u.net/blog/gadget/spray-stick-cream.html</link>
      <description>制汗のアレの話。スプレーでおっつかなくなったので、デオナチュレのスティックをこの2年使っていたのだけど、これは長く硬いワキ毛とは相性が悪く、うまく塗れてなかったことがよくあった。さすがにワキ毛を剃るのはためらうので、メンソレータムが出してるクリーム状のしっかりと塗れるやつに乗り換えた。脇汗8割減という感じで、効能としては満足はしている。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/spray-stick-cream.html</guid>
      <pubDate>Sat, 06 Jun 2015 01:14:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://www.amazon.co.jp/gp/product/B00TJEOIJC/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TJEOIJC&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="リフレア デオドラントクリーム 25g (医薬部外品)" src="http://ecx.images-amazon.com/images/I/41WlPC019dL.jpg" ></a>
</figure>

<p >制汗のアレの話。スプレーでおっつかなくなったので、デオナチュレのスティックをこの2年使っていたのだけど、これは長く硬いワキ毛とは相性が悪く、うまく塗れてなかったことがよくあった。さすがにワキ毛を剃るのはためらうので、<a href="http://www.amazon.co.jp/gp/product/B00TJEOIJC/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TJEOIJC&amp;linkCode=as2&amp;tag=hail2unet-22">メンソレータムが出してるクリーム状のしっかりと塗れるやつ</a>に乗り換えた。脇汗8割減という感じで、効能としては満足はしている。</p>

<p>クリームやジェル状のは知らなかったんだけど、<a href="http://www.amazon.co.jp/gp/product/B00SM997IW/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00SM997IW&amp;linkCode=as2&amp;tag=hail2unet-22">エイトフォーの出してるすごい高い個包装のやつ</a>を貰ったたらとんでもなかった。まるで汗がでなくて怖い感じだった。でもさすがにこれは高すぎ(3gで600円)だったので、無香料ということで香りで誤魔化すタイプではないんだろうとメンソレータムのものにした。</p>

<p>スティックのものと比べヌルヌル感が残るので、ちょっとアレな感じになるのと、服にちょっとついたりするのが難点。慣れればうまく塗れるようにはなりそう。最終的には大容量タイプので落ち着きたい。</p>

<hr>

<p>効能に「わきが」って書いてあるとダメージ大きいので、なんかこうもっと工夫した文言を編み出して欲しい。</p>]]></content:encoded>
    </item>
    <item>
      <title>node-inlining</title>
      <link>http://hail2u.net/blog/software/node-inlining.html</link>
      <description>HTMLからlink要素で参照しているCSSの中身をstyle属性に全部展開するNode.jsパッケージ、node-inliningを書いていた。HTMLとCSSを別々に普通に書き、このパッケージに含まれるCLIプログラムでコンパイルすると、HTMLメールとしてうまく機能するHTMLができあがるということになる。GitHubで推奨されている外部リソースに依存しない静的なエラー・ページを作成するためにも使えるかもしれない。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/node-inlining.html</guid>
      <pubDate>Fri, 05 Jun 2015 00:57:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >HTMLから<code>link</code>要素で参照しているCSSの中身を<code>style</code><em>属性</em>に全部展開するNode.jsパッケージ、<a href="https://github.com/hail2u/node-inlining">node-inlining</a>を書いていた。HTMLとCSSを別々に普通に書き、このパッケージに含まれるCLIプログラムでコンパイルすると、HTMLメールとしてうまく機能するHTMLができあがるということになる。GitHubで推奨されている外部リソースに依存しない静的なエラー・ページを作成するためにも使えるかもしれない。</p>

<p>CLIプログラムはごく簡単に使うことができる。</p>

<pre><samp>$ <kbd>npm install -g inlining</kbd>
$ <kbd>inlining input.html &gt;output.html</kbd>
</samp></pre>

<p>これで<code>output.html</code>にインライン化されたHTMLファイルが吐かれる。処理例は<a href="https://github.com/hail2u/node-inlining#readme">README</a>の簡単な例や<a href="https://github.com/hail2u/node-inlining/tree/master/test">testディレクトリー</a>を見てくれればわかるはずだ。</p>

<p>Node.jsパッケージとしての利用は少しややこしくなる。</p>

<pre><code >var inlining = require(&quot;inlining&quot;);
inlining(fs.readFileSync(&quot;input.html&quot;, &quot;utf8&quot;), function (result) {
  console.log(result);
});
</code></pre>

<p>引数は以下の3つになる。</p>

<ol>
<li>HTMLコード</li>
<li>HTMLファイルの(想定される)パス (省略可能)</li>
<li>コールバック</li>
</ol>

<p>HTMLコードを直接渡すと処理して、コールバック関数が処理結果を引数として実行される。HTMLファイルのパスは相対パスを解決するために使っている。省略した場合はカレント・ディレクトリーになる。</p>

<hr>

<p>パッケージ内では以下の様な順で処理される。</p>

<ol>
<li><code>rel=&quot;stylesheet&quot;</code>である<code>link</code>要素を列挙<ol>
<li><code>href</code>属性の値をパスとして解決</li>
<li>CSSを読み込んでパース<ol>
<li>読み込みに失敗したらスキップして次の<code>link</code>要素へ</li>
</ol>
</li>
<li>ルールセットのセレクターを分割<ol>
<li>セレクターにマッチする要素を列挙</li>
<li>ルールセットの中身を連結して、<code>style</code>属性の値に設定</li>
</ol>
</li>
<li>ルールセットを削除</li>
<li>残ったCSSを<code>style</code>要素の中身として<code>head</code>要素に追加</li>
<li><code>link</code>要素を削除</li>
</ol>
</li>
<li>処理結果を標準出力に出力</li>
</ol>

<p><code>@media</code>ルールなどの<code>style</code>属性へ記述できないルールセット群はそのまま残り、出力HTMLの<code>head/style</code>にそのままコピーされることになる。ここで詳細度が逆転してしまう可能性があるので、<code>@media</code>ルールで上書きしたい場合は<code>!important</code>フラグを駆使する必要がある。他、相対パスで指定された画像ファイルなどはDataURLで埋め込まれる。</p>

<hr>

<p>内部ではHTMLをパースしてDOM API群を提供してくれる<a href="https://github.com/tmpvar/jsdom">jsdomパッケージ</a>とおなじみCSSをパースしてくれる<a href="https://github.com/postcss/postcss">postcssパッケージ</a>を利用した。jsdomはその存在は知っていたものの、初めてまともに使った。概ね使いやすかったが、やはりバグとはいえないまでも、いくつか特徴的な挙動は持つようだ。</p>

<p>例えばjsdomで<code>HTMLElement.style.cssText</code>を使うとノーマライズされてしまう。そのためベンダー拡張プリフィックス付きのプロパティーや存在しないプロパティー(<code>foo</code>とか)、そして未知のプロパティー(<code>font-feature-settings</code>プロパティーとか)がうまく追加できなかった。仕方がないので<code>Element.setAttribute()</code>を使って強引にそのまま設定している。</p>

<p>また<code>querySelectorAll()</code>で<code>::-moz-selection</code>擬似要素を含むものなど不明なセレクターを投げるとブラウザーと同じように例外を吐く。ブラウザーではそのまま処理は続行されるが、Node.js上では当然落ちる。使いづらいが挙動としては正しそうなため、<code>try..catch</code>で握りつぶして無視した。</p>

<p>最後に完全なHTMLソースを手に入れることに少し苦労した。<code>window.document.documentElement.innerHTML</code>だと<code>html</code>要素が除外され、<code>window.document.documentElement.outerHTML</code>だとDOCTYPEが拾えない。<code>window.document.doctype</code>を使って連結するのは少しややこしすぎる。どうやら専用の非標準APIが用意されているようで、それを使うとうまく手に入れられた。</p>

<pre><code >var jsdom = require(&quot;jsdom&quot;);

jsdom.env(
  &quot;&lt;!DOCTYPE html&gt;&lt;p&gt;Lorem ipsum&lt;/p&gt;&quot;,
  function (errors, window) {
    console.log(window.document.documentElement.innerHTML);
    // &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Lorem ipsum&lt;/p&gt;&lt;/body&gt;
    console.log(window.document.documentElement.outerHTML);
    // &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Lorem ipsum&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    console.log(<mark>jsdom.serializeDocument(window.document)</mark>);
    // &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Lorem ipsum&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
  }
);
</code></pre>

<p>他、MIMEタイプの推定には<a href="https://github.com/broofa/node-mime"><code>mime</code></a>パッケージ、画像のDataURL化には<a href="https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end"><code>Buffer.toString(&quot;base64&quot;)</code></a>に当たるものを利用した。</p>

<hr>

<p>とりあえず動くところまでという形で書いた。続きはわからないけれど、必要な機能はもうあまりなさそうだ。強いて言うのならHTMLファイル内の画像ファイルのDataURL化くらいだろうか。</p>]]></content:encoded>
    </item>
    <item>
      <title>Material DesignのFloating Action Button</title>
      <link>http://hail2u.net/blog/software/fab.html</link>
      <description>マテリアル・デザインのコンポーネントのひとつであるFloating Action Buttonsについての記事を読んでいた。Inbox by Googleを始めとして、さまざまなアプリに既に採用されているFloating Action Buttons (以下FAB)だが、主張が強すぎるため、没入型のアプリではその体験を阻害してしまうという話のようだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/fab.html</guid>
      <pubDate>Thu, 04 Jun 2015 03:08:00 +0900</pubDate>
      <content:encoded><![CDATA[<p ><a href="https://medium.com/tech-in-asia/material-design-why-the-floating-action-button-is-bad-ux-design-acd5b32c5ef">マテリアル・デザインのコンポーネントのひとつであるFloating Action Buttonsについての記事</a>を読んでいた。Inbox by Googleを始めとして、さまざまなアプリに既に採用されている<a href="http://www.google.com/design/spec/components/buttons-floating-action-button.html">Floating Action Buttons</a> (以下FAB)だが、主張が強すぎるため、没入型のアプリではその体験を阻害してしまうという話のようだ。</p>

<p>そういうものだ、という捉え方ももちろんできる。しかしマテリアル・デザインのガイドでプライマリー・アクションに使うものと定義されていて、かつアクション・バーにボタンが配置できる以上、わざわざコンテンツにかぶる形で置く必要はあまりないだろう。もしアクション・バーのボタンを使いつつとなると、記事でも触れられているように、そのFABには間違ったアクションを割り当てていることになる。</p>

<p>他、単純にインターフェイスとして欠陥があることも指摘している。FABとかぶる位置にしか表示できないものが見えない、またはアクションが実行できないというものだ。具体例として、リスト項目で日付表示やお気に入りボタンを右端に配置した場合、右下にFABを配置してしまうと、リストの最後の項目の日付表示が見えず、お気に入りボタンはタッチできなくなってしまうことを挙げている。これは構造的に欠陥がありそうだ。</p>

<p>ガイドラインに抵触することを承知の上でFABの見た目を変えれば、その存在感を薄めることは可能だが、それは同時にそのFABに割り当てられたアクションの存在意義が薄くても構わないことを意味する。それではFAB自体の定義と矛盾してしまう。</p>

<p>FABはその明快な定義とは裏腹に、見えない部分に矛盾をいくつか抱えたコンポーネントだということになりそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>扇風機</title>
      <link>http://hail2u.net/blog/gadget/pedestal-fan.html</link>
      <description>もう夏なので扇風機を出した。震災後に買った口で、もう4年目。まだまだきれいだし、あと10年くらいは使えそうだ。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/pedestal-fan.html</guid>
      <pubDate>Wed, 03 Jun 2015 13:36:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://hail2u.net/images/blog/pedestal-fan.jpg"><img alt="無印良品の真っ白なリモコン付き扇風機" height="2868" src="http://hail2u.net/images/blog/pedestal-fan.jpg" width="2448" ></a>
</figure>

<p >もう夏なので扇風機を出した。震災後に買った口で、もう4年目。まだまだきれいだし、あと10年くらいは使えそうだ。</p>

<p>サーキュレーターは毎年買おうと思うけど、結局買わない。うるさいのは我慢できそうだけど、なんだかんだで部屋にあると邪魔に感じそうといつも思ってしまう。特に電源コード。今年はむしろ扇風機をもう1台買ってしまいそうだけれど、これも邪魔だし、こっちはこっちでしまう場所を考えるのが面倒で買わなそう。</p>

<hr>

<p>物を増やすことにすごく抵抗があって、すぐに買わない理由を考えてしまう。なんかこう強制的に買い換えるイベントでもないと解呪できなそうだ。こういうこと言うと天災に見舞われて家財道具一式が藻屑になるとかありそう。</p>]]></content:encoded>
    </item>
    <item>
      <title>プレースホルダーのスタイルにおけるノーマリゼーション</title>
      <link>http://hail2u.net/blog/webdesign/placeholder-normalization.html</link>
      <description>テキスト入力コントロールにplaceholder属性を使って入力例を表示することができるようになってから、もうかなりの年月がたった。悪用されてもいるが、わかりやすいフォームには不可欠になりつつある程度には浸透したと言ってよいだろう。ただMozilla Developer Networkのグローバル・ナビゲーションに設置されている検索フォームのようにそのスタイリングに失敗しているケースはままある(Chrome 43だと入力済みかどうかまったく判断できない)。そういった失敗を極力減らすためには、Firefoxのようにopacityプロパティーを使ってノーマライズしてやるのが良いだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/placeholder-normalization.html</guid>
      <pubDate>Tue, 02 Jun 2015 03:10:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >テキスト入力コントロールに<code>placeholder</code>属性を使って入力例を表示することができるようになってから、もうかなりの年月がたった。悪用されてもいるが、わかりやすいフォームには不可欠になりつつある程度には浸透したと言ってよいだろう。ただ<a href="https://developer.mozilla.org/">Mozilla Developer Networkのグローバル・ナビゲーションに設置されている検索フォーム</a>のようにそのスタイリングに失敗しているケースはままある(Chrome 43だと入力済みかどうかまったく判断できない)。そういった失敗を極力減らすためには、Firefoxのように<code>opacity</code>プロパティーを使ってノーマライズしてやるのが良いだろう。</p>

<p>ではFirefoxの挙動に合わせるようにノーマリゼーションする場合はどのようにCSSを書くことになるのだろうか。</p>

<p>Firefoxではユーザー・エージェントCSSで<code>opacity</code>の値に<code>0.54</code>を指定している(以前は<code>0.4</code>だったようだが、Firefox 38では<code>0.54</code>のようだ)。これと他のブラウザー及びウェブ標準での挙動を合わせるためには以下のように書く必要がある。</p>

<pre><code >/*
<mark>::-moz-placeholder</mark> {
  color: inherit;
  opacity: .54;
}
*/

<mark>:-ms-input-placeholder</mark> {
  color: inherit;
  opacity: .54;
}

<mark>::-webkit-input-placeholder</mark> {
  color: inherit;
  opacity: .54;
}

<mark>:placeholder-shown</mark> {
  opacity: .54;
}
</code></pre>

<p>プレースホルダー文字列のスタイルは、Internet Explorer 10以降では<code>:-ms-input-placeholder</code><del>擬似要素</del><ins>擬似クラス</ins>で、ChromeやSafariでは<code>::-webkit-input-placeholder</code>擬似要素、そしてSelectors Level 4となることになるウェブ標準仕様では<a href="http://www.w3.org/TR/2013/WD-selectors4-20130502/#placeholder"><code>:placeholder-shown</code><em>擬似クラス</em></a>になる予定で、それぞれ行うことができる。ウェブ標準では擬似クラスになっていることは頭の隅に入れておいた方がよいが、まだこれに従った実装はない。</p>

<p>現行ブラウザー群の実装では擬似要素になっていることと、Internet ExplorerやChromeで決め打ちで色が指定されていることから、<code>color</code>プロパティーを<code>inherit</code>にしておく(<code>initial</code>でも悪くない)。ウェブ標準では擬似クラスのため<code>color</code>プロパティーを<code>inherit</code>にする必要はなくなる。<a href="http://hail2u.net/blog/webdesign/unknown-css-selector.html">不明なセレクターによるルールセットの無視</a>が起こらないように、それぞれのルールセットは別々に記述していく必要がある。</p>

<p>Firefoxの挙動に合わせるので<code>::-moz-placeholder</code>擬似要素の記述は不要だが、コメントで残しておいた。</p>

<hr>

<p>Firefoxが単に<code>grayText</code>キーワードや特定の色を指定しないようになった理由には、ユーザーの設定やテーマの設定によりフォーム要素の背景が何色になるか変化するからなどいくつかの理由は思い当たる。最適解ではない(制作者が色を指定したい時に<code>opacity</code>プロパティーを戻さなければならない)が、悪くはないデフォルト値ではあるだろう。</p>

<p>ウェブサイト制作者サイドから見てドキュメントのCSSでも<code>opacity</code>プロパティーを使う理由はあまりない。しかしユーザー側から見ると<em>常に入力テキストよりもコントラストが下がった色</em>でプレースホルダー文字列が表示されるということはそれなりにメリットがあると考えられる。ユーザーは入力例はグレーの文字列で表示されているというよりも、薄い色の文字で表示されていると捉えているからだ。</p>

<p>フォーム要素の前景色と背景色のコントラストが十分に確保されているという前提だと、プレースホルダー文字列の色は色相は変えずコントラストを落とすだけにするのがもっともわかりすい。色相を変えてしまうと特別な意味や機能が存在するように捉えられる可能がある上、デフォルトの<em>薄い文字</em>という感覚からかけ離れてしまう。もちろんそれぞれのウェブサイトのカラースキームを元にして完璧な色を追求するのも良いが、多くの場合は<code>opacity</code>プロパティーをうまく使ってノーマリゼーションというレベルで行うだけで十二分に機能させることが可能だろう。</p>

<h1>追記</h1>

<p>Internet Explorer 10以降では<code>:-ms-input-placeholder</code><em>擬似クラス</em>だった。修正し、サンプル・コードも修正しておいた。</p>]]></content:encoded>
    </item>
    <item>
      <title>MN</title>
      <link>http://hail2u.net/blog/software/mn.html</link>
      <description>等幅フォントは本文に使ってもうまく機能する。しかし余白が多くなりがちなその形状を、Google Fontsのような複雑なインターフェイスではレビューすることが難しい。MNではミニマルなスタイルでGoogle Fontsにある等幅フォントをサンプルの文章(そのフォントの説明文)を使ってレビューすることができるようにしたものだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/mn.html</guid>
      <pubDate>Mon, 01 Jun 2015 12:05:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="https://hail2u.github.io/mn/"><img alt="MN — the monospace fonts from the Google Fonts directory." height="627" src="http://hail2u.net/images/blog/mn.png" width="1200" ></a>
</figure>

<p >等幅フォントは本文に使ってもうまく機能する。しかし余白が多くなりがちなその形状を、<a href="https://www.google.com/fonts">Google Fonts</a>のような複雑なインターフェイスではレビューすることが難しい。<a href="https://hail2u.github.io/mn/">MN</a>ではミニマルなスタイルでGoogle Fontsにある等幅フォントをサンプルの文章(そのフォントの説明文)を使ってレビューすることができるようにしたものだ。</p>

<p>現在はSource Code ProやInconsolataを始めとしたGoogle Fontsにある等幅フォント、全11種類になる。新たにGoogle Fontsに追加されたら、その都度追加するつもりだ。余裕があったらGoogle Fontsにないオープンソースの等幅フォントも追加したい。</p>

<hr>

<p>等幅フォントを使ったプレビュー以外のフォントは、同じGoogle Fontsから<a href="https://www.google.com/fonts/specimen/Libre+Baskerville">Libre Baskerville</a>を使った。Boldの斜体がないのが残念なこと以外は使いやすく、よく使う。同じデザインでセリフのフォントをプレビューするものも作りたくなった。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Sassの基本</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Wed, 10 Jun 2015 03:15:00 +0900</lastBuildDate>
  </channel>
</rss>
