<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>プレースホルダーのスタイルにおけるノーマリゼーション</title>
      <link>http://hail2u.net/blog/webdesign/placeholder-normalization.html</link>
      <description>テキスト入力コントロールにplaceholder属性を使って入力例を表示することができるようになってから、もうかなりの年月がたった。悪用されてもいるが、わかりやすいフォームには不可欠になりつつある程度には浸透したと言ってよいだろう。ただMozilla Developer Networkのグローバル・ナビゲーションに設置されている検索フォームのようにそのスタイリングに失敗しているケースはままある(Chrome 43だと入力済みかどうかまったく判断できない)。そういった失敗を極力減らすためには、Firefoxのようにopacityプロパティーを使ってノーマライズしてやるのが良いだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/placeholder-normalization.html</guid>
      <pubDate>Tue, 02 Jun 2015 03:10:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >テキスト入力コントロールに<code>placeholder</code>属性を使って入力例を表示することができるようになってから、もうかなりの年月がたった。悪用されてもいるが、わかりやすいフォームには不可欠になりつつある程度には浸透したと言ってよいだろう。ただ<a href="https://developer.mozilla.org/">Mozilla Developer Networkのグローバル・ナビゲーションに設置されている検索フォーム</a>のようにそのスタイリングに失敗しているケースはままある(Chrome 43だと入力済みかどうかまったく判断できない)。そういった失敗を極力減らすためには、Firefoxのように<code>opacity</code>プロパティーを使ってノーマライズしてやるのが良いだろう。</p>

<p>ではFirefoxの挙動に合わせるようにノーマリゼーションする場合はどのようにCSSを書くことになるのだろうか。</p>

<p>Firefoxではユーザー・エージェントCSSで<code>opacity</code>の値に<code>0.54</code>を指定している(以前は<code>0.4</code>だったようだが、Firefox 38では<code>0.54</code>のようだ)。これと他のブラウザー及びウェブ標準での挙動を合わせるためには以下のように書く必要がある。</p>

<pre><code >/*
<mark>::-moz-placeholder</mark> {
  color: inherit;
  opacity: .54;
}
*/

<mark>:-ms-input-placeholder</mark> {
  color: inherit;
  opacity: .54;
}

<mark>::-webkit-input-placeholder</mark> {
  color: inherit;
  opacity: .54;
}

<mark>:placeholder-shown</mark> {
  opacity: .54;
}
</code></pre>

<p>プレースホルダー文字列のスタイルは、Internet Explorer 10以降では<code>:-ms-input-placeholder</code><del>擬似要素</del><ins>擬似クラス</ins>で、ChromeやSafariでは<code>::-webkit-input-placeholder</code>擬似要素、そしてSelectors Level 4となることになるウェブ標準仕様では<a href="http://www.w3.org/TR/2013/WD-selectors4-20130502/#placeholder"><code>:placeholder-shown</code><em>擬似クラス</em></a>になる予定で、それぞれ行うことができる。ウェブ標準では擬似クラスになっていることは頭の隅に入れておいた方がよいが、まだこれに従った実装はない。</p>

<p>現行ブラウザー群の実装では擬似要素になっていることと、Internet ExplorerやChromeで決め打ちで色が指定されていることから、<code>color</code>プロパティーを<code>inherit</code>にしておく(<code>initial</code>でも悪くない)。ウェブ標準では擬似クラスのため<code>color</code>プロパティーを<code>inherit</code>にする必要はなくなる。<a href="http://hail2u.net/blog/webdesign/unknown-css-selector.html">不明なセレクターによるルールセットの無視</a>が起こらないように、それぞれのルールセットは別々に記述していく必要がある。</p>

<p>Firefoxの挙動に合わせるので<code>::-moz-placeholder</code>擬似要素の記述は不要だが、コメントで残しておいた。</p>

<hr>

<p>Firefoxが単に<code>grayText</code>キーワードや特定の色を指定しないようになった理由には、ユーザーの設定やテーマの設定によりフォーム要素の背景が何色になるか変化するからなどいくつかの理由は思い当たる。最適解ではない(制作者が色を指定したい時に<code>opacity</code>プロパティーを戻さなければならない)が、悪くはないデフォルト値ではあるだろう。</p>

<p>ウェブサイト制作者サイドから見てドキュメントのCSSでも<code>opacity</code>プロパティーを使う理由はあまりない。しかしユーザー側から見ると<em>常に入力テキストよりもコントラストが下がった色</em>でプレースホルダー文字列が表示されるということはそれなりにメリットがあると考えられる。ユーザーは入力例はグレーの文字列で表示されているというよりも、薄い色の文字で表示されていると捉えているからだ。</p>

<p>フォーム要素の前景色と背景色のコントラストが十分に確保されているという前提だと、プレースホルダー文字列の色は色相は変えずコントラストを落とすだけにするのがもっともわかりすい。色相を変えてしまうと特別な意味や機能が存在するように捉えられる可能がある上、デフォルトの<em>薄い文字</em>という感覚からかけ離れてしまう。もちろんそれぞれのウェブサイトのカラースキームを元にして完璧な色を追求するのも良いが、多くの場合は<code>opacity</code>プロパティーをうまく使ってノーマリゼーションというレベルで行うだけで十二分に機能させることが可能だろう。</p>

<h1>追記</h1>

<p>Internet Explorer 10以降では<code>:-ms-input-placeholder</code><em>擬似クラス</em>だった。修正し、サンプル・コードも修正しておいた。</p>]]></content:encoded>
    </item>
    <item>
      <title>MN</title>
      <link>http://hail2u.net/blog/software/mn.html</link>
      <description>等幅フォントは本文に使ってもうまく機能する。しかし余白が多くなりがちなその形状を、Google Fontsのような複雑なインターフェイスではレビューすることが難しい。MNではミニマルなスタイルでGoogle Fontsにある等幅フォントをサンプルの文章(そのフォントの説明文)を使ってレビューすることができるようにしたものだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/mn.html</guid>
      <pubDate>Mon, 01 Jun 2015 12:05:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="https://hail2u.github.io/mn/"><img alt="MN — the monospace fonts from the Google Fonts directory." height="627" src="http://hail2u.net/images/blog/mn.png" width="1200" ></a>
</figure>

<p >等幅フォントは本文に使ってもうまく機能する。しかし余白が多くなりがちなその形状を、<a href="https://www.google.com/fonts">Google Fonts</a>のような複雑なインターフェイスではレビューすることが難しい。<a href="https://hail2u.github.io/mn/">MN</a>ではミニマルなスタイルでGoogle Fontsにある等幅フォントをサンプルの文章(そのフォントの説明文)を使ってレビューすることができるようにしたものだ。</p>

<p>現在はSource Code ProやInconsolataを始めとしたGoogle Fontsにある等幅フォント、全11種類になる。新たにGoogle Fontsに追加されたら、その都度追加するつもりだ。余裕があったらGoogle Fontsにないオープンソースの等幅フォントも追加したい。</p>

<hr>

<p>等幅フォントを使ったプレビュー以外のフォントは、同じGoogle Fontsから<a href="https://www.google.com/fonts/specimen/Libre+Baskerville">Libre Baskerville</a>を使った。Boldの斜体がないのが残念なこと以外は使いやすく、よく使う。同じデザインでセリフのフォントをプレビューするものも作りたくなった。</p>]]></content:encoded>
    </item>
    <item>
      <title>横浜散歩</title>
      <link>http://hail2u.net/blog/misc/strolling-in-yokohama.html</link>
      <description>5/27は天気が良かったので横浜まで行ったものの、海を見に行くところまでは辿りつけなかった。暑すぎた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/strolling-in-yokohama.html</guid>
      <pubDate>Sun, 31 May 2015 00:12:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >5/27は天気が良かったので横浜まで行ったものの、海を見に行くところまでは辿りつけなかった。暑すぎた。</p>

<figure >
<a href="http://hail2u.net/images/blog/strolling-in-yokohama-joinus-the-diamond.jpg"><img alt="希少になったザ・ダイヤモンドだけしか書かれていないロゴ" height="2448" src="http://hail2u.net/images/blog/strolling-in-yokohama-joinus-the-diamond.jpg" width="2448" ></a>
<figcaption>ザ・ダイアモンド西口側入り口アーケード</figcaption>
</figure>

<p>相鉄ジョイナスとザ・ダイヤモンドの合体が完了してた。新しいターゲット層と合わないというよりも、自分が老いて勝手にターゲット層から外れただけだった。ザ・ダイヤモンドとくっついた結果、ところどころ変な段差があったり、5段くらいのエスカレーターがあったりした。苦労の跡は感じる。</p>

<p>有隣堂がまとまって広く綺麗になったのはすごく良い。突然マンガの生原稿が並んでるだけの一角があったりするのは微妙な感じだと思われてそうでなんか辛い。全体的に照明が暗めで、静かな雰囲気はあるのだけど、雑誌とか美術書のあたりで致命的な感じがする。とにかくスーパーの魚の匂いが届かなくなっただけで気分が良い。</p>

<figure >
<a href="http://hail2u.net/images/blog/strolling-in-yokohama-nishiguchi-lumine.jpg"><img alt="西口ルミネの看板" height="2448" src="http://hail2u.net/images/blog/strolling-in-yokohama-nishiguchi-lumine.jpg" width="2448"></a>
<figcaption>西口ルミネ入り口</figcaption>
</figure>

<p>何がなんだかよくわからないままずっとそこにあって見てた西口ルミネは5/31で終わるみたいだ。</p>

<p>ロゴはちょっと好きだった。西口って横にちょこっと付けただけみたいなのは、肩肘張った感じがせずバランス良い。西なのに右にあって、ちょっと東っぽいとはずっと思ってる。</p>

<figure >
<a href="http://hail2u.net/images/blog/strolling-in-yokohama-sogo.jpg"><img alt="からくり時計横のそごうのロゴ" height="2448" src="http://hail2u.net/images/blog/strolling-in-yokohama-sogo.jpg" width="2448"></a>
<figcaption>横浜そごう正面入り口</figcaption>
</figure>

<p>そごうの地下食料品売り場にちょいちょいセブンプレミアムの商品が置いてあったり、専用のコーナーがあったりしたけど、誰も立ち止まってなかった。僕は立ち止まった。</p>

<p>富澤商店で頼まれてた紅茶を買って、昼飯用にメゾンカイザーでパンを買った。アンデルセンとメゾンカイザーが並んでるとさすがに迷う。</p>

<figure >
<a href="http://hail2u.net/images/blog/strolling-in-yokohama-sea-bass.jpg"><img alt="Sea Bass, not Sea Bus" height="2448" src="http://hail2u.net/images/blog/strolling-in-yokohama-sea-bass.jpg" width="2448"></a>
<figcaption>ベイクォーター横シーバス乗り場</figcaption>
</figure>

<p>海へ行って食べようかと考えていたけど、シーバスに人が並びまくってて萎えたので、ベイクォーターのCafé&amp;Meal MUJIでサラダを頼んでこっそりパンも食べてた。</p>

<p>あの辺りの海をすごく感じるものの海まではちょっとあるみたいな感じがすごい好き。海まで行くと行き止まりっぽい感じがあってちょっと沈んだ気持ちになる。</p>

<hr>

<p>サンダルかスリッポンを買うというのが主な目的だった。ベイクォーターのビルケンシュトックにいくつか良さそうなのがあったし、そこかしこに置いてあったナイキのつま先が足袋っぽくなってる奴とか、同じくナイキのオーロラっぽいグラデーションの奴(<a href="https://plus.google.com/+KotaroKokubo/posts/CfBbx8Eyzcx">@kotarokが買ったやつ</a>っぽい)とか、ちょっと欲しくなったのはあったけど結局買わなかった。</p>

<p>サンダルはもう完全にダメっぽい。去年くらいからダメそうだなと思ってて、去年も結局買わなかった。今年は試着まではいったけれど、足が痩せててひょろいのとか白いのとかはともかく、足の甲に浮く血管と足の爪の老化を完全に把握してしまった。血管が浮いていると病人が病院で履いてるようにしか見えない。足の爪は、真っ白とか形が汚いとか臭いとか(臭いけど)ではなく、ただただ健康な足の爪にはどうやっても見えない。色艶というものがまったくない。ネイル・エステ行きたい。</p>

<p>スリッポンは似合わなかった。VANSくらいの値段なら買っても良さそうだったけど、この歳でVANSってのもなみたいな感想だった。6月一杯くらいかけてじっくり探そう……と思ったけど、とりあえずのところは壊れかけのキャンバス・スニーカーを履きつぶすことにした。</p>]]></content:encoded>
    </item>
    <item>
      <title>Chrome 43における擬似要素のdisplayプロパティー</title>
      <link>http://hail2u.net/blog/webdesign/pseudo-element-on-resize-on-chrome-43.html</link>
      <description>Chrome 43で擬似要素に指定したdisplay: table-cellがうまく反映されないことがあった。当初はうまく再現できなかったが、どうもメディア・クエリーを使ってdisplayプロパティーを切り替えており、かつブラウザーをリサイズするなどして能動的に切り替わった時にのみ起こるようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/pseudo-element-on-resize-on-chrome-43.html</guid>
      <pubDate>Sat, 30 May 2015 11:20:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >Chrome 43で擬似要素に指定した<code>display: table-cell</code>がうまく反映されないことがあった。当初はうまく再現できなかったが、どうもメディア・クエリーを使って<code>display</code>プロパティーを切り替えており、かつブラウザーをリサイズするなどして能動的に切り替わった時にのみ起こるようだ。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/632.html">Pseudo Display on Resize</a></p>

<p>デモでは<code>ul</code>要素に対して<code>::before</code>擬似要素を使って「lorem」という単語を、それ以下の単語は<code>li</code>要素に直接記述している。それらをすべて<code>display: block</code>にし、メディア・クエリーを使って幅640px以下の場合に<code>display: table-cell</code>になるようにしてある。ブラウザーのウィンドウ幅を640px以下に変えた場合、横並びに切り替わるはずだが、Chrome 43でのみ擬似要素に指定した「lorem」という単語のみが意図通りに横並びへ変わらない。</p>

<p>ただしChrome 43でも幅640px以下の状態で再読み込みした場合は意図通りに横並びになる。そのため実害はほとんどない。強いて言うのならデバイスの向きが変わった時に切り替わるようなメディア・クエリーを書いているとハマるが、ほぼその場合のみだろう。</p>

<p>簡単なCSSプロパティーの追加などで可能な回避方法は見つけることはできなかった。<code>display</code>プロパティーを使う代わりに、<code>white-space: pre</code>と改行コードLFを組み合わせたりするなど、根本的にアプローチを変える必要がある。</p>]]></content:encoded>
    </item>
    <item>
      <title>KALDI ドリップコーヒーフィルター(カップ用)</title>
      <link>http://hail2u.net/blog/gadget/kaldi-drip-coffee-filter-for-cup.html</link>
      <description>普段はモカエキスプレス一辺倒で、そうでなければ水出しコーヒーなので、めったにドリップでコーヒーを淹れない。そのためまともなドリッパーがない。あるのは既に穴が割れててすごいダメな感じのだけ。そこそこ場所取るので、買い直そうという気もない。KALDIに使い捨てのカップ用ドリッパーがあったので、それを買った。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/kaldi-drip-coffee-filter-for-cup.html</guid>
      <pubDate>Fri, 29 May 2015 12:58:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://kaldi-online.com/item/4515996090202.html"><img alt="カルディオリジナル　ドリップコーヒーフィルター（カップ用）　30p" height="496" src="http://hail2u.net/images/blog/kaldi-drip-coffee-filter-for-cup.jpg" width="376" ></a>
</figure>

<p >普段はモカエキスプレス一辺倒で、そうでなければ水出しコーヒーなので、めったにドリップでコーヒーを淹れない。そのためまともなドリッパーがない。あるのは既に穴が割れててすごいダメな感じのだけ。そこそこ場所取るので、買い直そうという気もない。KALDIに<a href="http://kaldi-online.com/item/4515996090202.html">使い捨てのカップ用ドリッパー</a>があったので、それを買った。</p>

<p>これはモンカフェとかブルックスが出している個包装のドリップバッグとか呼ばれているやつの粉が入ってないバージョン。30枚入りで280円だった。さすがにモンカフェのものと比べるとちゃちだけど、粉が入っているわけではないので問題はなさそう。取っ手の形状からすると直径8cmくらいのカップまではいける。サーモスの320mlのもの(直径7.5cm)で大丈夫だった。</p>

<p>普通のコーヒー・カップに装着して淹れるとフィルターが浸かってしまうので、深めのカップに淹れた方が美味しかった。アイスコーヒーとして淹れてもそこそこ美味しかったけど、径はそのままでもっと深い必要がありそうだった。そんなカップはなかなかないので、現実的には無理がありそう。</p>

<p>モカエキスプレスやエスプレッソマシンがメインで、ドリップでは月に数回も飲まないとかいう人には良い。そのためにドリッパーやフィルターを常備しておくのは邪魔だし、片付けるのが面倒くさいけど、これならほとんど場所を取らないし、捨てるだけ。</p>]]></content:encoded>
    </item>
    <item>
      <title>ローカルのフォント</title>
      <link>http://hail2u.net/blog/webdesign/local-font.html</link>
      <description>少し前にこのウェブサイトがNeue HelveticaまたはCalibriになるように変更した。ウェブ・フォントを普通に使う機会が増えたその反動で、自分のウェブサイトは使いたくなくなる、といったところであまり深い理由は無い。ローカルのフォントだと表示の速さが3倍回しくらいに感じる。初期ページ表示までに特に引っかかりがないようなウェブページだと、コンマ1秒もないウェイトですら影響は大きい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/local-font.html</guid>
      <pubDate>Thu, 28 May 2015 07:52:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >少し前にこのウェブサイトがNeue HelveticaまたはCalibriになるように変更した。ウェブ・フォントを普通に使う機会が増えたその反動で、自分のウェブサイトは使いたくなくなる、といったところであまり深い理由は無い。ローカルのフォントだと表示の速さが3倍回しくらいに感じる。初期ページ表示までに特に引っかかりがないようなウェブページだと、コンマ1秒もないウェイトですら影響は大きい。</p>

<p>ウェブ・フォントの表示における技術的な問題は、解決することは難しいことがわかってきた。仕様が不十分なこともあるが、実装が依存している技術に左右され、そこはどうにもしようがなさそうな領域だからだ。HTTPS + HTTP/2でかなり改善する可能性はあるが、ウェブ・フォント用の専用ストレージがブラウザーに実装されない限りは完全には解決できないはずだ。</p>

<p>一方ローカルのフォントにも解決できない問題は多い。そのひとつはもちろんタイプフェイスの選択肢が限られるということだ。他にもプラットフォーム間で統一が取れないこと、それに由来するデザインの崩れを予測することが難しいこと、「見飽きた」という感覚を払しょくすることができないこと、まだまだあるだろう。</p>

<p>ウェブ・フォントが解決するのはまさにここで、そのため重宝され、広まり、根付くことに成功した。ウェブデザインの95%であるところのタイポグラフィー、その20%程を占めるであろうタイプフェイスの選定に大きな変革をもたらしたウェブ・フォントは大きな意味を持つ。</p>

<aside >
<p>Make your articles load faster in News Feed and deliver a better reading experience for people on Facebook with Instant Articles.</p>
</aside>

<p>大手ウェブサービスがウェブサイトを取り込む動きは以前からあり、Facebookユーザーにだけ最高の体験を提供しようとするInstant Articlesによりいっそう加速しそうなことは間違いない。キュレーション・ニュースのようなアプリたちが、Flipboardのようにトラフィックをほとんどアプリの外へ持ち出さないようにするのも時間の問題だろう。そこに個のブランドが残ることはなく、取り込まれたコンテンツだけが残る。</p>

<p>こういったインターネットの一部であり大部分における変化がブランディングに割く労力を割に合わないものにするかどうか、これがウェブ・フォントを捨て(諦めるのではなく)ローカルのフォントに戻るかどうかを決定するひとつの要因となる。現状ではそこにもう一つ技術的限界という問題が乗っかっているため、単なる反動もあるだろうが、また少しづつローカルのフォントを利用したウェブサイトが増えてくると考えられる。</p>

<hr>

<p>僕はローカルのフォントを使うとなると、以下の様な組み合わせにほぼ終わる。</p>

<ul>
<li><code>Helvetica Neue, Calibri, sans-serif</code></li>
<li><code>Baskerville, Cambria, serif</code></li>
<li><code>Menlo, Consolas, monospace</code></li>
<li><code>Verdana, sans-serif</code></li>
<li><code>Georgia, serif</code></li>
<li><code>Courier New, monospace</code></li>
</ul>

<p>UI向けフォント(Lucida Grande、Segoe UI、Tahomaなど)は、本文で使うと詰まりすぎていて読みづらいので避けたい、となるとこれくらいでまかなうことができる。似通った見た目といったレイアウト上の都合よりも、OSにおいて同じような扱いが想定されていることを主眼に組み合わせている。そのため今はもうArialではなくCalibriを、Times New RomanではなくCambriaを使うことが多い。そうでなければ古き良きCore fonts for the Webを使うだけにしている。</p>

<p>他にもいろいろフォントはあるが、Trebuchet MSなどはもはやComic Sans MSに近い印象を受ける人も多いだろう。OptimaはTrebuchet MSほどではないが、昨今の傾向から考えると本文で使うのは厳しい。Apple GaramondやBodoni、News Gothic MTは良いフォントだが使えない可能性もある。Hoefler TextやGabriolaも同じく良いが、Boldがない。Corbelも悪くはないが、まだサンセリフでオールドスタイルの数字がデフォルトな状況には対応しづらい(<code>font-feature-settings</code>プロパティーだけではなく、<code>font-variant-numeric</code>プロパティーが必要になる)。</p>

<p>また、素晴らしいテキスト・レンダリング環境であるOS XやiOSのために、それら向けのフォント・ファミリー名を優先して指定してやることで、それら向けではないフォントが使われないようにすることも重視している。古くは優先すべきメジャーなWindows向けのフォントを指定することが定石とされていたが、今はもうそういう時代ではなく、ベストにベストを届けられるようにすべきだろう。</p>

<p>最後に一般ファミリー名を忘れないようにすることも日本語を始めとした非ラテン文字言語のウェブページでは大切だ。せっかく各ブラウザーで日本語向けのデフォルト・フォントがメイリオになってきているのに、これを忘れていたら○○○が召喚されてしまう。</p>

<hr>

<p>ウェブ・フォントはきちんと正しい形で広まったが、顕在化した問題に目をつぶったままであることは否定出来ない。その問題がInstant Articlesのような仕組みによりもたらされる未来を肯定してしまうひとつの理由になっているとも言えるだろう。ここを乗り越えてウェブ・フォントがもう一度花開くためには、その技術的限界を手軽に解決する仕組みが必要になる。</p>

<p>それまではローカルのフォントを使うことで、ウェブサイトのブランディングよりもコンテンツのアクセス性を優先することがまた必要になってくるだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>scss-lint.sh</title>
      <link>http://hail2u.net/blog/software/scss-lint-sh.html</link>
      <description>SCSS Lintがv0.34.0から設定ファイルを上流から探さなくなった。カレント・ディレクトリーから探して見つからなかったらユーザーのホーム・ディレクトリーから探すようにはったようだが、プロジェクトのルート・ディレクトリーから探すようにはならないようだ。イシューを立てようかと思ったのだけど上流から探す機能をわざわざ削除したことの意味を調べるのが面倒くさかったので、シェル・スクリプトからプロジェクトのルート・ディレクトリーに.scss-lint.ymlがある場合はそれを使うようなラッパー・スクリプトを書くことにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/scss-lint-sh.html</guid>
      <pubDate>Wed, 27 May 2015 06:07:00 +0900</pubDate>
      <content:encoded><![CDATA[<p ><a href="https://github.com/brigade/scss-lint">SCSS Lint</a>がv0.34.0から設定ファイルを上流から探さなくなった。カレント・ディレクトリーから探して見つからなかったら<a href="https://github.com/brigade/scss-lint/pull/452">ユーザーのホーム・ディレクトリーから探すようにはった</a>ようだが、プロジェクトのルート・ディレクトリーから探すようにはならないようだ。イシューを立てようかと思ったのだけど上流から探す機能をわざわざ削除したことの意味を調べるのが面倒くさかったので、シェル・スクリプトからプロジェクトのルート・ディレクトリーに<code>.scss-lint.yml</code>がある場合はそれを使うようなラッパー・スクリプトを書くことにした。</p>

<pre><code >#!/bin/sh

b=${GEM_HOME}/bin/scss-lint
r=`git rev-parse --show-cdup 2&gt;/dev/null`
c=${r}.scss-lint.yml

if [ $? -eq 0 ] &amp;&amp; [ -e $c ]; then
  ${b} -c ${c} $*
else
  ${b} $*
fi
</code></pre>

<p>Gitの<code>rev-parse</code>サブコマンドで<code>--show-cdup</code>を使うと、<code>.git</code>ディレクトリーのあるディレクトリー、つまりプロジェクトのルート・ディレクトリーまでの相対パスが取得できる。これと<code>.scss-lint.yml</code>を連結してファイル・テスト演算子で存在チェックし、あった場合は<code>-c</code> (--config)オプションで設定を渡してやるようにする。オリジナルの<code>scss-lint</code>の実行ファイルは<code>$GEM_HOME</code>から探す。</p>

<p><a href="http://hail2u.net/pub/test/scss-lint.sh">このシェル・スクリプト</a>に<code>scss-lint</code>という名前をつけて、パスの通ったディレクトリーかつ<code>$GEM_HOME/bin/scss-lint</code>より先に見つかるディレクトリーに置けばそっくり入れ替えることができる。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150523.html</link>
      <description>メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150523.html</guid>
      <pubDate>Tue, 26 May 2015 12:49:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</p>

<p>めっきり圧縮ファイルを展開することもなくなった。あんまりメールで添付ファイルのやりとりをしなくなったとか、そのまま見れるツールが増えたとか理由はいろいろある。だからたとえ夢であってもこういう間違いを起こすことはきっとある。たぶん。</p>]]></content:encoded>
    </item>
    <item>
      <title>DuckDuckGoでサイト内検索</title>
      <link>http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</link>
      <description>このウェブサイトの全文検索フォームをDuckDuckGoによるものに変えた。公式にはiframe要素によるものが推奨されているが、そのページからリンクされている更なるカスタマイズを解説した記事のように、form要素を直接書いても良いようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</guid>
      <pubDate>Mon, 25 May 2015 00:17:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >このウェブサイトの全文検索フォームを<a href="https://duckduckgo.com/">DuckDuckGo</a>によるものに変えた。公式には<a href="https://duckduckgo.com/search_box"><code>iframe</code>要素によるもの</a>が推奨されているが、そのページからリンクされている<a href="http://hardik.org/2013/06/01/stylising-duckduckgo-site-search/">更なるカスタマイズを解説した記事</a>のように、<code>form</code>要素を直接書いても良いようだ。</p>

<p>サイト内検索を実現するための最小限のコードは以下のようになる。</p>

<pre><code >&lt;form
  <mark>action=&quot;https://duckduckgo.com/&quot;</mark>
  role=&quot;search&quot;&gt;
  &lt;input
    <mark>name=&quot;sites&quot;</mark>
    type=&quot;hidden&quot;
    <mark>value=&quot;hail2u.net&quot;</mark>&gt;
  &lt;input
    <mark>name=&quot;q&quot;</mark>
    type=&quot;search&quot;&gt;
  &lt;input
    type=&quot;submit&quot;
    value=&quot;Search&quot;&gt;
&lt;/form&gt;
</code></pre>

<p><code>form</code>要素の<code>action</code>属性でトップページのURLを、<code>name</code>属性の値を<code>sites</code>に設定した隠れコントロールで検索したいドメインを、<code>name</code>属性の値が<code>q</code>のテキスト入力コントロールが必須になる。<code>methodo</code>属性はデフォルトで<code>GET</code>なので必要なく、送信ボタンにも特に名前を付ける必要はない。ドメインはカンマで区切って複数指定することもできる。</p>

<p>これに加えて<a href="https://duckduckgo.com/params"><em>検索結果のページでの表示</em>を制御するパラメーター</a>を隠れコントロールで指定することができる。柔軟にカスタマイズできてすごい……ように思えるが、色を変えたりという程度なのでそれほどでもなく、<a href="https://cse.google.com/cse/">Googleカスタム検索エンジン</a>の方がそういう点では優る。手軽にちょっとだけ体裁を変えるということが可能ではあるけれども、HTMLの書き換えを伴うのであまり意味はない。</p>

<hr>

<p>肝心の検索結果はというと、サイト内検索なら問題は感じられない。確かにDuckDuckGoはGoogleと比べるとかなり検索結果のクオリティーは落ちる。普通に謎の業者が勝手に作った丸パクリのウェブサイトがかなり上位に出てきたりもするし、日本語のウェブサイトを検索しているのに延々と中国語のスパム・ウェブサイトが出てきたりもする。しかしサイト内検索で使う場合はそういったゴミが混ざることもなく、順位付けの精度も悪くはない。</p>]]></content:encoded>
    </item>
    <item>
      <title>CSS Transformによるセンタリングのベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</link>
      <description>上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</guid>
      <pubDate>Sun, 24 May 2015 02:59:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/631-1.html">Centering Unknown with CSS Transform (top/left)</a></p>

<p>このデモは実際に不具合が起こりうるパターンになっている。センタリングする要素を<code>top</code>と<code>left</code>プロパティーで動かした後、<code>transform: translate(-50%, -50%)</code>で元に戻しているわけだが、Internet Explorer 11では横スクロールバーが出る原因となる。どうやら<code>left</code>と<code>top</code>プロパティーで動かした時点で横スクロールバーの有無が確定してしまうようだ。コンテナー側で<code>overflow</code>プロパティーを使えばアドホックに対処することは可能ではあるが、副作用を伴うのでやらない方が良いだろう。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/631-2.html">Centering Unknown with CSS Transform (right/bottom)</a></p>

<p>対して<code>right</code>と<code>bottom</code>プロパティーで動かした後、<code>transform: translate(50%, 50%)</code>するパターンでは横スクロールバーが出ることはない。描画領域が拡大しない方向へ動かしているからだ。こちらのパターンには特にデメリットもなく、<code>top</code>と<code>left</code>プロパティーのパターンと比べても極端にコード量が増えるわけでもない(2文字増えるだけだ)。</p>

<p>CSS Transformによるセンタリングの説明では多くの場合、前者の<code>top</code>と<code>left</code>プロパティーを使ったパターンが使われている。その解説は間違っているわけではないが、Internet Explorer 11の挙動を考慮すると<code>right</code>と<code>bottom</code>プロパティーを使ったパターンが安定していると言え、ベスト・プラクティス足りえる。</p>

<hr>

<p>僕はこのCSS Transformによるセンタリングには欠点があると感じていて、あまり多用はしないようにしている。その欠点とは動かした要素がブラーがかかったようにぼやけることがあることだ。以前からWindowsのChromeでは多発する。文字はぼやけないのでわかりづらい(気づきづらい)が、幾何学的なシャープな画像を動かしてみたりすると気づきやすい。再現条件がよくわからないのでサンプルもうまく作れない。</p>

<p>ともあれ上下左右の中央寄せには選択肢は多くないので、結局は使わざるを得ない。<code>position</code>プロパティーでも<code>background-position</code>プロパティーのような配置ができれば良いのになとたまに思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Sassの基本</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Tue, 02 Jun 2015 03:10:00 +0900</lastBuildDate>
  </channel>
</rss>
