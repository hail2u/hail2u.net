<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>プリフェッチ中のリクエスト</title>
      <link>http://hail2u.net/blog/webdesign/fetching-when-prefetching.html</link>
      <description>特定のリソースをrel=prefetchを使ってプリフェッチしている最中に、何らかの形で新たにリクエストされるような状況になった場合、各ブラウザーはどういう挙動になるのかということを試していた。Firefox 38ではプリフェッチがそのまま続行され、新たなリクエストは発生しないという賢い挙動のようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fetching-when-prefetching.html</guid>
      <pubDate>Mon, 22 Jun 2015 09:42:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >特定のリソースを<code>rel=prefetch</code>を使ってプリフェッチしている最中に、何らかの形で新たにリクエストされるような状況になった場合、各ブラウザーはどういう挙動になるのかということを試していた。Firefox 38ではプリフェッチがそのまま続行され、新たなリクエストは発生しないという賢い挙動のようだ。</p>

<p >View Demo: <a href="http://hail2u.net/pub/test/637.html">Fetching when Prefetching</a></p>

<p>デモでは<code>rel=prefetch</code>を使って<code>head</code>要素内で画像を先読みさせ、ドキュメントの読み込み完了の1秒後に動的に突っ込んだ<code>img</code>要素によりリクエストしてやろうとしている。開発者ツールなどでネットワーク状況を確認することで、どういう挙動になるか確認できる。</p>

<p>Firefox 38ではプリフェッチがそのまま続行され、新たにリクエストを発生せずに画像が挿入される。対してChrome 43とInternet Explorer 11ではプリフェッチがそのまま続行された上で、<code>img</code>要素を追加した時にもリクエストが走るようになり、プリフェッチは完全に無駄になる。</p>

<hr>

<p>主に同じページで使われるリソースを想定した<a href="https://www.chromium.org/spdy/link-headers-and-server-hint/link-rel-subresource"><code>rel=subresource</code>という別のヒント</a>が考えられていることや、より正確に制御することが可能になる<a href="http://www.w3.org/TR/resource-hints/">Resource Hints仕様(これでは<code>rel=preload</code>になる)</a>が作られていることを踏まえると、<code>rel=prefetch</code>他は現状の実装のままで、仕様に従った実装が新たに追加されそうだ。少なくとも<code>rel=prefetch</code>がFirefox 38の挙動に揃うことはなさそうだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>WebhookからPubSubHubbubへの翻訳</title>
      <link>http://hail2u.net/blog/rss/webhook-to-pubsubhubbub.html</link>
      <description>少し前に公開されたIFTTTのMakerチャンネルを使って、GitHubリポジトリーのWebhookをPubSubHubbubの公開POSTリクエストに翻訳するようにした。GETを使った公開リクエストがあまり行儀が良くなさそうなことが前から気になっていたので、Makerチャンネルを使えば良いかなと試したところうまくいった。</description>
      <category>RSS</category>
      <guid isPermaLink="true">http://hail2u.net/blog/rss/webhook-to-pubsubhubbub.html</guid>
      <pubDate>Sun, 21 Jun 2015 07:13:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >少し前に公開された<a href="https://ifttt.com/">IFTTT</a>の<a href="https://ifttt.com/maker">Makerチャンネル</a>を使って、GitHubリポジトリーのWebhookをPubSubHubbubの公開POSTリクエストに翻訳するようにした。<a href="http://hail2u.net/blog/internet/publishing-feed-via-pubsubhubbbub-using-github-webhooks.html">GETを使った公開リクエスト</a>があまり行儀が良くなさそうなことが前から気になっていたので、Makerチャンネルを使えば良いかなと試したところうまくいった。</p>

<section>
<h2>Makerチャンネルの有効化</h2>

<p>まずはMakerチャンネルのページへ行き、Connectボタンを押す。するとユーザーごとに専用のエンドポイントURLが作成されるので、How to Trigger Eventsというリンクをクリックして、それを確認しておく。</p>

<pre>https://maker.ifttt.com/trigger/{event}/with/key/{secret_key}
</pre>

<p>エンドポイントURLはこのような形になっている。<code>{event}</code>は後ほど好きに指定することになる。<code>{secret key}</code>はユーザーごとに発行されるユニークな文字列に置き換えられて表示される。第三者にバレるとまずそうなので、気を付けた方が良い(再生成することは可能)。</p>
</section>

<section>
<h2>GitHub Pages側の準備</h2>

<p>各リポジトリーの設定からWebhooks &amp; Servicesのページにアクセスし、Add Webhookボタンを押す。Payload URLにIFTTTのMakerチャンネルで作成された専用のエンドポイントURLを指定する。ここではGitHub PagesがビルドされたらPubSubHubbubで公開したいので、<code>{event}</code>は<code>page_build</code>にしておいた。GitHubリポジトリー側のイベントに対応させた名前にすると良いだろう。データを受け取ってゴニョゴニョするわけではないのでContent typeはどちらでも良いが、Secretは指定する必要がある(と思う)。</p>

<p>イベントはPage builtのみに絞っておくと良いだろう。</p>
</section>

<section>
<h2>レシピの作成</h2>

<p>Trigger側では先ほどGitHubリポジトリー側で指定したエンドポイントURLで使ったイベント名を指定する(ここでは<code>page_build</code>)。Action側では、以下のように指定すれば良い。</p>

<table>
<thead>
<tr>
<th>フィールド</th>
<th>値</th>
</tr>
</thead>
<tbody>
<tr>
<td>URL</td>
<td>https://pubsubhubbub.appspot.com/</td>
</tr>
<tr>
<td>Method</td>
<td>POST</td>
</tr>
<tr>
<td>Content Type</td>
<td>application/x-www-form-urlencoded</td>
</tr>
<tr>
<td>Body</td>
<td>hub.mode=publish&amp;hub.url=http:%2F%2Fexample.com%2Ffeed</td>
</tr>
</tbody>
</table>

<p>Bodyフィールドで指定するRSSフィードのURL以外は同じで良いはずだ。Bodyフィールドでは自前でURLエンコードして指定しているが<code>&lt;&lt;&lt;</code>と<code>&gt;&gt;&gt;</code>で生URLを括るときっとURLエンコードされるだろう。</p>
</section>

<hr>

<p>これでGitHubリポジトリーの<code>gh-pages</code>ブランチへpushしGitHub Pagesのビルドを走らせると、一連の動作が確認できる。</p>

<p>GitHubリポジトリー側では、該当Webhookの管理画面にRecent Deliveriesというログが残っているので、そこでIFTTT側から<code>200</code>が帰っていることを確認することでリクエストが成功していることを確認できる。IFTTTのレシピ側では、Personal Recipe triggeredというログで、レシピが走りPubSubHubbubハブへのリクエストが成功していることを確認できる。更にGoogleのPubSubHubbubハブに用意されている<a href="https://pubsubhubbub.appspot.com/publish">Publisher Diagnostics</a>を使ってRSSフィードのURLを調べると、最後に記事を受け取った時刻と内容がわかるので、それを照らし合わせることで公開がうまくいっているか確認できる。</p>

<p>気になる人はFeedlyなどPubSubHubbubによる購読に対応しているフィード・リーダーを使うと公開即反映されているかも確認することができる。</p>

<hr>

<p>某アプリのおかげでRSSフィードが本来想定されていたような機械的に処理することのできるフォーマットのコンテンツとして復権する可能性がある。それと同時にポーリングではないPubSubHubbubによる公開と購読の重要性も上がるのではないかと考えられる。折に触れPubSubHubbubに言及することにより、少しでもPubSubHubbubによる公開を行ってくれるウェブログ(とウェブログ・ホスティング・サービス)が増えることに期待したい。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150620.html</link>
      <description>湯船で丸々一本漏らす。あわてて手桶ですくい、トイレに流そうと風呂から出たらおばあちゃん(故人)に見つかる。そのまま正座させられ説教をされる。おばあちゃんには怒られたことがなかったので、すごいショックを受けつつ、とにかく服を着たかった。途中で「体拭いて服着ていい？」って聞いたら、「良いよ」ってニッコリ笑って返事してくれて、そのまますうっと蒸発するみたいに消えた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150620.html</guid>
      <pubDate>Sat, 20 Jun 2015 06:24:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >湯船で丸々一本漏らす。あわてて手桶ですくい、トイレに流そうと風呂から出たらおばあちゃん(故人)に見つかる。そのまま正座させられ説教をされる。おばあちゃんには怒られたことがなかったので、すごいショックを受けつつ、とにかく服を着たかった。途中で「体拭いて服着ていい？」って聞いたら、「良いよ」ってニッコリ笑って返事してくれて、そのまますうっと蒸発するみたいに消えた。</p>

<p>なお現実世界では漏らしていなかった。</p>]]></content:encoded>
    </item>
    <item>
      <title>レイ → ← アウト</title>
      <link>http://hail2u.net/blog/webdesign/layout-changes-20150618.html</link>
      <description>ロゴの形状を変えたら広い画面のマルチカラムではずいぶんとバランスが悪くなった。そうでもないと思っていたけれど日に日に気になり度が増してきたため、レイアウトの基本を少し変更することにした。広い画面ではロゴを含めてコンテンツはメインカラムの左寄せに、サブカラムの中身は右寄せにするようにし、両者が詰まりすぎないようにその間を少し広くしてバランスをとった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/layout-changes-20150618.html</guid>
      <pubDate>Fri, 19 Jun 2015 08:23:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >ロゴの形状を変えたら広い画面のマルチカラムではずいぶんとバランスが悪くなった。そうでもないと思っていたけれど日に日に気になり度が増してきたため、レイアウトの基本を少し変更することにした。広い画面ではロゴを含めてコンテンツはメインカラムの左寄せに、サブカラムの中身は右寄せにするようにし、両者が詰まりすぎないようにその間を少し広くしてバランスをとった。</p>

<p>本当はカラムの間の中央にロゴを置きたいのだけど、グローバル・ナビゲーションの位置が難しい。そのまま右端だとヘッダーのバランスは良いものの、他のコンテンツとの一貫性に欠ける。左に浮かせた場合はロゴが左による分、ヘッダーだけずれているような印象になる。</p>

<p>グローバル・ナビゲーションを左右に分割してやるのが良さそうかなと調節しているところだ。これだとバランスは取れるが、CSSが異様に複雑になる。ロゴを浮かせて、グローバル・ナビゲーションをメインカラムに置いた方が良いのかもしれない。</p>]]></content:encoded>
    </item>
    <item>
      <title>外国語の読み方</title>
      <link>http://hail2u.net/blog/misc/foreign-words-pronunciation.html</link>
      <description>外国語の読み方はしゃべる人の立場としゃべる相手の想定によって変わってくる。大雑把に有識者やエバンジェリストなどと呼ばれる立場の人達は、なるべく誤解を広めないようにすることを重視して、正確に引き写した音で読んだ方が良い。一方、知識の拡散と質の向上を狙うわけではない人達は、同じような専門家に向けてしゃべるわけではないことも考え、まずは通じることを重要視して雑に読んでも良いはずだ。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/foreign-words-pronunciation.html</guid>
      <pubDate>Thu, 18 Jun 2015 09:43:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >外国語の読み方はしゃべる人の立場としゃべる相手の想定によって変わってくる。大雑把に有識者やエバンジェリストなどと呼ばれる立場の人達は、なるべく誤解を広めないようにすることを重視して、正確に引き写した音で読んだ方が良い。一方、知識の拡散と質の向上を狙うわけではない人達は、同じような専門家に向けてしゃべるわけではないことも考え、まずは通じることを重要視して雑に読んでも良いはずだ。</p>

<p>少なからず両方を担うことがある人達の発音がブレるのは仕方がない。僕もよくブレているし、人を見て恐る々々読み方を変えていたりする。重要視すべきものが立場と相手で変わってきてしまうからということが表の理由だ。広める側としてちゃんとしたいという見栄と、専門家ではない人達へネイティブに近い発音でしゃべった時に通じなかった場合のあの微妙な空気と間、このあたりが裏の理由だろうか。</p>

<p>場合によって読み分けると書こうとすると、この記事のようなふわっとした、ある種本質的ではない話になってしまう。そのためウェブではどうしてもとがった意見の記事ばかりになる。とにかく正確にしろという理想または通じれば良いという現実のどちらかに振り切った記事しか読んだ記憶がない。</p>

<hr>

<p>もののついでに<a href="https://gist.github.com/hail2u/e19d227da90e6393505e">僕がCSSプロパティーをどう読んでいるか</a>を表にした。</p>

<p><code>width</code>は紆余曲折の結果「ウィドス」に落ち着き、もうそれ以外で読めなくなっている。「ウィズ」くらいの感覚で読んでると「え？何？」とか「あっフフッ」みたいな反応をされることが多かった。「ウィドゥス」になるとちょっと凝った感じに聞こえるらしく、失笑される機会が極端に増えつらかった。「ウィドス」はだいたい通じるので便利だ。そろそろ「ヘイト」派に流されそうだ。</p>

<p>しかし世界も徐々に変わってきていて、耳慣れない読み方でも互いに察してくれるようになってきた。これは日本人特有の事なかれ主義の発現ではなくて、ネイティブっぽい発音を小馬鹿にするような因習が消え始めたのだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>ウェブデザインのトレンドとその背景</title>
      <link>http://hail2u.net/blog/webdesign/webdesign-trends-and-their-backgrounds.html</link>
      <description>7 future web design trendsという記事を読んでいた。これらは既に(または元々)未来のトレンドじゃないという点を見なかったことにしても、構図を単純化しすぎなきらいがあり、トレンドっぽいものの紹介とその正当化という記事としか読めなかった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/webdesign-trends-and-their-backgrounds.html</guid>
      <pubDate>Wed, 17 Jun 2015 10:59:00 +0900</pubDate>
      <content:encoded><![CDATA[<p ><a href="https://medium.com/@jowitaziobro/7-future-web-design-trends-fba93eba6355">7 future web design trends</a>という記事を読んでいた。これらは既に(または元々)<em>未来</em>のトレンドじゃないという点を見なかったことにしても、構図を単純化しすぎなきらいがあり、トレンドっぽいものの紹介とその正当化という記事としか読めなかった。</p>

<p>スクロールが中心になったことは確かで、そのことに最適化して無限スクロールを採用する(元記事の1)のは間違っていない。ファーストビュー信仰が最初から間違っていたことも事実で、ヒーロー・イメージなどと呼ばれるフルスクリーンの画像や動画の採用(元記事の2)は妥当に思える。しかしこの両者を同じスクロールという行為に対するトレンドとまとめるのは雑すぎる。</p>

<p>前者はスクロールという行為そのものと回線速度に最適化しているものだ。無限スクロールの利点は単にスクロールのみでコンテンツを読み進めていくことができるだけではなく、効率的なコンテンツの読み込みをもたらすことができる。むしろ<em>モバイル</em>というコンテキストで考えると、この回線速度における利点の方が重要だと言えるだろう。</p>

<p>後者はスクロールという行為を最優先させるユーザーに最適化したものだ。ウェブページを開くと人はスクロールするということを念頭に置くと、画面全体を支配する画像は特にデメリットにはならず、美しい包装紙のようにブランディングに良い影響を与えることができるだろう。しかしこのトレンドはモバイルに最適化されたものではない。なぜならばそういった画面全体を支配する画像はサイズが大きくなりがちで、回線速度に劣ることの多いモバイル環境では負担が大きくなりがちだからだ。</p>

<p>この筆者の言うところのトレンド自体はそれなりに受け入れられるし、既にトレンドになったと言って良いものだ。しかし、このようにモバイル対デスクトップという単純な構図に落としこむのは間違っている。少なくともウェブサイト制作に関わる人々はこういったトレンドの背景をもう少し掘り下げてみるべきだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>Chromeとpre要素</title>
      <link>http://hail2u.net/blog/webdesign/pre-on-chrome.html</link>
      <description>しばらく前から特定のフォントをpre要素へ指定すると、Chromeのみでほとんど意味のない縦スクロールバーが表れるという現象に悩まされている。とは言ってもWindows以外ではもはやスクロールバーが見えることはないので、事実上WindowsのChromeユーザーのみが影響を受ける。DirectWriteが有効になったChrome 37あたりから頻発するようになった印象だ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/pre-on-chrome.html</guid>
      <pubDate>Tue, 16 Jun 2015 10:01:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://hail2u.net/images/blog/pre-on-chrome.png"><img alt="謎の縦スクロールバー" height="627" src="http://hail2u.net/images/blog/pre-on-chrome.png" width="1200" ></a>
</figure>

<p >しばらく前から特定のフォントを<code>pre</code>要素へ指定すると、Chromeのみでほとんど意味のない縦スクロールバーが表れるという現象に悩まされている。とは言ってもWindows以外ではもはやスクロールバーが見えることはないので、事実上WindowsのChromeユーザーのみが影響を受ける。DirectWriteが有効になったChrome 37あたりから頻発するようになった印象だ。</p>

<p>修正は簡単で、上下どちらかに<code>padding</code>プロパティーを追加してやれば良い。</p>

<pre><code >pre {
  padding-bottom: 1px;
}
</code></pre>

<p>実害はあまりないように書いてしまったけれど、Mobile SafariなどWebKit系でもさり気なく発生しているような気がする。発生しても見た目は問題ない(スクロールバーが見えないので)が、ちょうどそこでスワイプしてスクロールしようとするとうまくスクロールされなかったりする。</p>

<p>とにかく再現条件がまったくわからない。このウェブサイトでは発生しているので、上記CSSによってアドホックに解決している。</p>]]></content:encoded>
    </item>
    <item>
      <title>パッケージのスコープ化</title>
      <link>http://hail2u.net/blog/software/scoped-npm-packages.html</link>
      <description>2015/04/15よりnpmレジストリーでパッケージのスコープ化が行えるようになった。パッケージのスコープ化は名前の衝突を回避することが主な目的のような取り上げられ方だが。僕は今まで色々な理由でnpmレジストリーへは非公開にしてGitHub経由でインストールすることを推奨していたようなパターンで使うのが良さそうだという感想を持った。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/scoped-npm-packages.html</guid>
      <pubDate>Mon, 15 Jun 2015 11:46:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >2015/04/15よりnpmレジストリーでパッケージのスコープ化が行えるようになった。パッケージのスコープ化は名前の衝突を回避することが主な目的のような取り上げられ方だが。僕は今まで色々な理由でnpmレジストリーへは非公開にしてGitHub経由でインストールすることを推奨していたようなパターンで使うのが良さそうだという感想を持った。</p>

<p><code>&quot;private&quot;: true</code>からスコープ化したパッケージへの変換は2ステップで行う。</p>

<section>
<h2>package.jsonの更新</h2>

<ul>
<li><code>&quot;private&quot;: true</code>の削除</li>
<li><code>name</code>フィールドの値へプリフィックスを追加</li>
</ul>

<p>プリフィックスはなんでも良いようだが、通常はnpmのユーザー名を使うと良いだろう。僕は<code>@hail2u/</code>にしておいた。GitHubオーガニゼーション単位でスコープ化したい場合はその名前の方が良い。</p>
</section>

<section>
<h2>公開</h2>

<p>npmレジストリーへの公開にはオプションを追加する必要がある。特にインストールへ制限は設けないのなら<code>public</code>で良い。</p>

<pre><samp>$ <kbd>npm publish <mark>--access public</mark></kbd>
</samp></pre>

<p>このオプションの指定は最初に<code>npm publish</code>する時だけ必要になるようだ。</p>
</section>

<hr>

<p>特にnpmパッケージ自体を非公開にしたいわけではないけれど、プライベートにすることはたまにある。それほど本気でずっと使う予定もないとか、npmレジストリーの名前を占拠したくないとか、その場合にも変な名前を付けるのも嫌だとか、環境に強く依存していて自分専用に近いものとか。</p>

<p>こういった半プライベートなnpmパッケージをGitHub経由でインストールする(してもらう)というアプローチは、短期的にはあまり問題ない。しかしインストールはやはり遅く、特にCI環境下では致命的といえる。また、バージョン指定が特殊で面倒な感じになりやすい。そのため常に最新版を使うような運用にしてしまいがちで、あっと思ったら環境が壊れたということになりうる(やった)。</p>

<p>スコープ化しておくと通常のnpmパッケージとほとんど変わらず扱える。運用も同じように行うことになるので、GitHub経由特有の問題からは解放され、npmレジストリーとnpmパッケージそのものの問題に集約されることになる。問題が減るわけではないが、少なくとも問題の原因は減るので、その究明は楽になるだろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>OGPとlink要素</title>
      <link>http://hail2u.net/blog/webdesign/ogp-and-link-element.html</link>
      <description>HTTPS化の準備を始めるにあたって、HTMLで内部的に利用しているURLを対応するのは簡単だ。すべて相対URLに書き換えるだけで対応することができる。その相対URLの書き換えもパスの位置を考慮して最短にする必要もなく、//で始まる相対URLで行えば良い。aやimg要素はもちろん、scriptやlink要素も相対URLで問題ない。しかし外部から利用されるURLもどきではこの限りではない。例えばOGPなど利用することになるmeta要素では相対URLは使えず、OGPの仕様そのものでmeta要素に限定されており、そのパーサー実装のひとつであるFacebookでも解釈できない(できなかった)。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/ogp-and-link-element.html</guid>
      <pubDate>Sun, 14 Jun 2015 07:18:00 +0900</pubDate>
      <content:encoded><![CDATA[<p >HTTPS化の準備を始めるにあたって、HTMLで内部的に利用しているURLを対応するのは簡単だ。すべて相対URLに書き換えるだけで対応することができる。その相対URLの書き換えもパスの位置を考慮して最短にする必要もなく、<code>//</code>で始まる相対URLで行えば良い。<code>a</code>や<code>img</code>要素はもちろん、<code>script</code>や<code>link</code>要素も相対URLで問題ない。しかし外部から利用されるURLもどきではこの限りではない。例えばOGPなど利用することになる<code>meta</code>要素では相対URLは使えず、OGPの仕様そのもので<code>meta</code>要素に限定されており、そのパーサー実装のひとつであるFacebookでも解釈できない(できなかった)。</p>

<p>OGPはRDFa Liteだが、なぜか<code>meta</code>要素で記述すると決められている。<code>meta</code>要素ではURLの解決が行われないので、URLスキームは省略できない(仮にFacebookが解釈できるようになっていたとしてもそう書くべきではないだろう)。もちろんCMSやそれに類するものを使っていれば書き換えは機械的に行うことは可能だが、そういう問題ではないだろうし、書き換えた時点でユーザーのキャッシュが破棄されることにもなる。</p>

<p>OGPと似ているもののRDFa LiteのモドキですらないTwitter Cardsでは<code>link</code>要素を使えたりもするが、相対URLへの対応は挙動が不審だった。少なくとも画像(<code>twitter:image</code>)についてはパーサー自体は通すものの表示には対応してくれないようだ。</p>

<p>URLの変更は気軽に行われるべきではないので、それだけを考えていれば良かった時代ではこういう仕様でもあまり問題はなかった。しかしHTTPS化の有形・無形の圧力と欲求にさらされることで、こういったウェブサービスの仕様がフレキシブルに対応できないものとなっている点が表面化してきてしまった。</p>

<hr>

<p>結局はこちら側からはどうにもできないので、やるしかない。手元ではCMSの設定でURLスキームの切り替えを簡単に行えるように対応させつつあり、ようやく準備は完了してきた。しかしよくわからない人達が勝手に作った標準っぽいオレオレ仕様を考慮して苦労するのは割に合わないし、すっきりしない。</p>]]></content:encoded>
    </item>
    <item>
      <title>2015ロ06ゴ12</title>
      <link>http://hail2u.net/blog/webdesign/logo-20150612.html</link>
      <description>ロゴを変えた。ベースはそのままに消印っぽい枠を付け、反時計回りに20度回転させている。ウェブページでは透過背景に青で、Facebook他で使う画像は青背景に薄いベージュした。faviconの方はそのままでは潰れてしまうので、16px四方と32px四方のバージョンのみ外側の枠を削除したものにしている。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/logo-20150612.html</guid>
      <pubDate>Sat, 13 Jun 2015 06:27:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure >
  <a href="http://hail2u.net/images/blog/logo-20150612.svg"><img alt="消印っぽいやつ" height="627" src="http://hail2u.net/images/blog/logo-20150612.svg" width="1200" ></a>
</figure>

<p >ロゴを変えた。ベースはそのままに消印っぽい枠を付け、反時計回りに20度回転させている。ウェブページでは透過背景に青で、Facebook他で使う画像は青背景に薄いベージュした。faviconの方はそのままでは潰れてしまうので、16px四方と32px四方のバージョンのみ外側の枠を削除したものにしている。</p>

<p>SVGはスケーラブルだけれども、縮小した場合にはどうしても細部が潰れてしまう。反対に拡大した時は大丈夫かというと、今度は余白を始めとした全体的な印象が変化してしまう。SVGで作れば単純に拡大・縮小するだけで済むというのは、一筆書きで書けるような単純な図形や幾何学的な図形の組み合わせの場合には正しい。または逆に細部の詳細さが無視できる程度に複雑なイラストの場合にも正しいと言っても良いだろう。</p>

<p>しかし、若干複雑で細部にそれなりに詳細さを要求するようなケースではそううまくはいかない。具体的に言うと社名やキャッチコピー付きのロゴなどがそうだ。最近の傾向としてはロゴを単純化することで、細部が潰れても問題ないようにすることが多い。サイズによって複数のデザインを使い分けるのはコストがかかるが、周囲のコンテンツとのバランスは取りやすい。単純化するのはイマドキではあるが、それだけが解ではないということだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <item>
      <title>Sassの基本</title>
      <link>http://hail2u.net/documents/sass-guide-ja.html</link>
      <pubDate>Wed, 11 Dec 2013 07:10:29 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/sass-guide-ja.html</guid>
      <description><![CDATA[<p><a href="http://sass-lang.com/">Sass</a>がリニューアルされ、このサイトに訳を載せていたチュートリアルが消え、代わりに<a href="http://sass-lang.com/guide">Sass Basics</a>になりました。内容的にはあまり変わらないか多少薄くなっていますが、<code>@extend</code>への言及も追加されたので、日本語訳を作成しました。</p>]]></description>
    </item>
    <lastBuildDate>Mon, 22 Jun 2015 09:42:00 +0900</lastBuildDate>
  </channel>
</rss>
