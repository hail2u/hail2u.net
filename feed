<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description>Make Things Simple</description>
    <language>ja-JP</language>
    <atom:link rel="self" type="application/rss+xml" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>
    <item>
      <title>Drawic v2.5.1</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.5.1.html</link>
      <description>FOAFのアイコンを見かけて郷愁を感じたので、勢いでDrawicに追加した。他にSVGやCSS 3、HTML5のアイコンも追加してv2.5.0に。FOAFのような仕様は需要はあるんだろうけど、裏で機能するものなので、表側それぞれが囲い込む方へ囲い込む方へ動きやすい世界になってしまったため廃れたのかな。RDFがそもそもみたいなのもありそうだけども。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.5.1.html</guid>
      <pubDate>Sun, 22 Jun 2014 09:07:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href=&quot;http://hail2u.github.io/drawic/&quot;&gt;&lt;img src=&quot;http://hail2u.net/images/blog/drawic-v2.5.0.png&quot; alt=&quot;Friend of a Friend&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.foaf-project.org/&quot;&gt;FOAF&lt;/a&gt;のアイコンを見かけて郷愁を感じたので、勢いで&lt;a href=&quot;http://hail2u.github.io/drawic/&quot;&gt;Drawic&lt;/a&gt;に追加した。他にSVGやCSS 3、HTML5のアイコンも追加してv2.5.0に。FOAFのような仕様は需要はあるんだろうけど、裏で機能するものなので、表側それぞれが囲い込む方へ囲い込む方へ動きやすい世界になってしまったため廃れたのかな。RDFがそもそもみたいなのもありそうだけども。&lt;/p&gt;

&lt;p&gt;HTML5のアイコンがちょっと雑な感じなのでちょっと修正したけど、もうちょっとどうにかできそう。SVGのアイコンは下の文字いらなそうな気がする。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>link要素の順序を後から変更する</title>
      <link>http://hail2u.net/blog/webdesign/changing-link-order-dynamically.html</link>
      <description>ちょっとした事情があって干渉するルールを持つ二つのlink要素を状況によってスワップさせたいことがあった。どちらかのみを書いておいて条件に合わせて差し替えるのが普通のアプローチだと思うけど、先読みさせたかったのであらかじめ両方共読み込ませておいて、head要素内での順序を変えてカスケーディング順序を変えるという方法で行った。動的にlink要素の順序を変更すると、カスケーディングの順序に影響を与えるようだ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/changing-link-order-dynamically.html</guid>
      <pubDate>Sat, 21 Jun 2014 12:39:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;ちょっとした事情があって干渉するルールを持つ二つの&lt;code&gt;link&lt;/code&gt;要素を状況によってスワップさせたいことがあった。どちらかのみを書いておいて条件に合わせて差し替えるのが普通のアプローチだと思うけど、先読みさせたかったのであらかじめ両方共読み込ませておいて、&lt;code&gt;head&lt;/code&gt;要素内での順序を変えてカスケーディング順序を変えるという方法で行った。動的に&lt;code&gt;link&lt;/code&gt;要素の順序を変更すると、カスケーディングの順序に影響を与えるようだ。&lt;/p&gt;

&lt;p&gt;View Demo: &lt;a href=&quot;http://hail2u.net/pub/test/573.html&quot;&gt;link Element Order&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモは&lt;code&gt;.test&lt;/code&gt;の前景色を緑にするCSS・赤にするCSSの順で両方読み込み、後で緑にするCSSを&lt;code&gt;head&lt;/code&gt;要素の最後に動かしている。だいたいのブラウザで意図した通りに緑になるようだ。考えて見れば当然とも言えるんだけど、やろうとすら考えたこともなかったのでちゃんとしてるんだなーという感想。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var elmHead = document.head;
var cssGreen = document.getElementById(&amp;#39;green&amp;#39;);
elmHead.appendChild(cssGreen.cloneNode());
elmHead.removeChild(cssGreen);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クローンして追加してから削除するようにすると、大きな干渉がある時にもオーバーヘッドが最小限に抑えられると思う。元のノードの削除は遅延させても良いかもしれない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;結局はその事情には別の方法で対処することになったので無駄な調査だったけど、なんかの時に思い出して使いたい。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>WEB+DB Press Vol.81 イマドキHTML/CSS開発</title>
      <link>http://hail2u.net/blog/webdesign/wdpress81.html</link>
      <description>6月24日発売のWEB+DB Press Vol.81にて「イマドキHTML/CSS開発」というタイトルで特集を執筆した。特集では機器や周辺技術の変化と進化がもたらす多様性に、今までのような現状の機器への逐次対応という視点ではなく、未来のそれらを見据えた形で相対するにあたっての考え方や実装方法を解説している。具体的には検証可能な「コンポーネント」という単位をどう作り、それをどう扱うか、だ。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/wdpress81.html</guid>
      <pubDate>Fri, 20 Jun 2014 11:24:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href=&quot;http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/61f-yCQaibL.jpg&quot; alt=&quot;WEB+DB PRESS Vol.81&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;6月24日発売の&lt;a href=&quot;http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069&quot;&gt;WEB+DB Press Vol.81&lt;/a&gt;にて「イマドキHTML/CSS開発」というタイトルで特集を執筆した。特集では機器や周辺技術の変化と進化がもたらす多様性に、今までのような現状の機器への逐次対応という視点ではなく、未来のそれらを見据えた形で相対するにあたっての考え方や実装方法を解説している。具体的には検証可能な「コンポーネント」という単位をどう作り、それをどう扱うか、だ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;「マルチデバイス」というイマドキの事情&lt;/li&gt;
&lt;li&gt;独立性を重視した設計&lt;/li&gt;
&lt;li&gt;コンパクトな開発サイクル&lt;/li&gt;
&lt;li&gt;デバイスの特徴を活かしたUI&lt;/li&gt;
&lt;li&gt;環境に左右されない画像&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;特集はこのような形で構成されている。現状の説明から始まり、コンポーネントの設計から、その実装をまず解説し、それらの自動化・最適化・効率化について、コンポーネントごとに実装から検証までを行う小さなサイクルを中心に据えたワークフローへの変革を絡めて触れていくという形になっている。&lt;/p&gt;

&lt;p&gt;今の確認を主軸にしたページ志向のウェブサイト制作に限界を感じている人が、予測を元にした検証を使うウェブサイト制作へ移行する考え方として読んでもらえたらと思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;フロントエンドのワークフロー界隈では、様々な人が最適解を求めて試行錯誤している。特にビルド・ツールやスキャフォルディング・ツール周りでは、一旦は天下を取ったかに見えた設定志向の&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;とそれに対するコード志向の&lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt;というだけでなく、ウェブアプリ開発に特化した&lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt;や&lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;Broccoli&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.org/doc/cli/npm-run-script.html&quot;&gt;npmのスクリプト実行機能&lt;/a&gt;を利用する原理主義者、makeに退化する回帰主義者など、実に多様だ。それらがどうなるかの結論はまだ出ないだろう。出たとしてもそれは長くて数年しか通用しないと考えることもできる。&lt;/p&gt;

&lt;p&gt;特集ではそういった環境についてはGruntについて軽く触れるくらいしかしていない。ページ数という問題ももちろんあったが、それだけではなくそういった環境に左右されない部分にフォーカスを当てた。それが「コンポーネント」という単位だ。これはこの特集ではあくまでも僕が定義したものだが、きっとWeb Componentsのようなウェブの未来へとつなげることができるはずだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;僕はGitHubではなくBitbucketを使ってこの特集を書かせてもらったんだけど、そこら辺の話は今度書くつもり。発売は6月24日なのでもう少し間があるけど、ぜひ&lt;a href=&quot;http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069&quot;&gt;Amazonで予約&lt;/a&gt;しよう！&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>WEB+DB Press Vol.81にて「イマドキHTML/CSS開発」を執筆</title>
      <link>http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</link>
      <pubDate>Thu, 19 Jun 2014 15:31:33 +0900</pubDate>
      <guid isPermaLink="true">http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069</guid>
      <description>&lt;p&gt;Web標準技術の進歩やデバイスの多様化といったWebをとりまく環境の急激な変化は、従来のWebサイト開発手法を時代遅れのものとしつつあります。設計から実装・検証、そしてデバイスへの最適化まで、ワークフロー全体の変革が求められているということです。本特集では、現在はもちろん、これからも増大し続ける多様性を見据えてどのような開発手法をとっていくべきかについて、実例を交じえながら詳しく解説していきます。6月24日発売、&lt;a href=&quot;http://www.amazon.co.jp/WEB-DB-PRESS-Vol-81-%E9%95%B7%E5%B6%8B/dp/4774165069%3FSubscriptionId%3D0WVS3J53FVP9M1E7ET02%26tag%3Dhail2unet-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774165069&quot;&gt;Amazonにて予約受付中&lt;/a&gt;です！&lt;/p&gt;</description>
    </item>
    <item>
      <title>rsyncをGit for Windowsに混ぜる</title>
      <link>http://hail2u.net/blog/software/install-rsync-to-git-for-windows.html</link>
      <description>Windowsでrsyncをインストールする方法はいくつかあって、一番簡単なのはmingw-getでパッケージとして導入する方法。またはrsyncは諦めてChococaltely経由でcwRsyncパッケージをインストールするのが簡単。両者ともrsyncのためだけに入れるには大仰なので、既に導入されているGit for WindowsにMinGWパッケージと手作業で混ぜてインストールするのも悪くない。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/install-rsync-to-git-for-windows.html</guid>
      <pubDate>Thu, 19 Jun 2014 12:42:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Windowsで&lt;a href=&quot;http://rsync.samba.org/&quot;&gt;rsync&lt;/a&gt;をインストールする方法はいくつかあって、一番簡単なのは&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/Installer/&quot;&gt;mingw-get&lt;/a&gt;でパッケージとして導入する方法。またはrsyncは諦めて&lt;a href=&quot;http://chocolatey.org/&quot;&gt;Chococaltely&lt;/a&gt;経由で&lt;a href=&quot;http://chocolatey.org/packages/cwrsync&quot;&gt;cwRsync&lt;/a&gt;パッケージをインストールするのが簡単。両者ともrsyncのためだけに入れるには大仰なので、既に導入されている&lt;a href=&quot;http://msysgit.github.io/&quot;&gt;Git for Windows&lt;/a&gt;にMinGWパッケージと手作業で混ぜてインストールするのも悪くない。&lt;/p&gt;

&lt;p&gt;必要な物は以下の4つの実行ファイルとDLLファイル。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/MSYS/Extension/rsync/&quot;&gt;&lt;code&gt;rsync.exe&lt;/code&gt;&lt;/a&gt; (rsync-*-bin.tar.lzma より)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/MSYS/Base/libiconv/&quot;&gt;&lt;code&gt;msys-iconv-2.dll&lt;/code&gt;&lt;/a&gt; (libiconv-*-dll-2.tar.lzma)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/MSYS/Base/gettext/&quot;&gt;&lt;code&gt;msys-intl-8.dll&lt;/code&gt;&lt;/a&gt; (libintl-*-dll-8.tar.lzma)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/MSYS/Extension/popt/&quot;&gt;&lt;code&gt;msys-popt-0.dll&lt;/code&gt;&lt;/a&gt; (libpopt-*-dll-0.tar.lzma)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれのLZMAアーカイブには必要になる実行ファイルかDLLファイルだけしか含まれていないので、7-Zipなどで展開してGit for Windowsの&lt;code&gt;bin&lt;/code&gt;フォルダー、つまり&lt;code&gt;msys-1.0.dll&lt;/code&gt;があるフォルダーにすべてコピーするだけで良い。コピーしたらGit Bashを開いて以下のようにちゃんと実行できるか確認してインストールは完了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync --version
rsync  version 3.0.8  protocol version 30
Copyright (C) 1996-2011 by Andrew Tridgell, Wayne Davison, and others.
Web site: http://rsync.samba.org/
Capabilities:
    32-bit files, 32-bit inums, 32-bit timestamps, 64-bit long ints,
    socketpairs, hardlinks, symlinks, no IPv6, batchfiles, inplace,
    append, ACLs, no xattrs, iconv, no symtimes

rsync comes with ABSOLUTELY NO WARRANTY.  This is free software, and you
are welcome to redistribute it under certain conditions.  See the GNU
General Public Licence for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アンインストールは上記ファイルを削除するだけ。あんまり混ぜるの良くない感じするけど、最近のMinGWパッケージ群はコンフリクトしづらいようにできているので、多分大丈夫。ちゃんと何をコピーして混ぜたかをメモしておくくらい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Grunt経由でrsyncするプラグインはいくつかあったけど、なんかイマイチだったので自分ででっち上げたものを使っている。デフォルトでは&lt;code&gt;-n&lt;/code&gt;でDRY RUNで動く安心設計。&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&quot;http://hail2u.net/pub/grunt-rsync.js&quot;&gt;grunt-rsync.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src&lt;/code&gt;を解釈して特定のパス以下を&lt;code&gt;dest&lt;/code&gt;にミラーみたいな使い方はできないようにしているので、常にGruntのルートを&lt;code&gt;options.remote&lt;/code&gt;で指定した先にミラーする。デフォルトのCLIオプションは&lt;code&gt;-aC --exculude-from=.rsyncignore&lt;/code&gt;としてあるので、無視ファイルは&lt;code&gt;-C&lt;/code&gt;により有効になるマスク群とグローバルな&lt;code&gt;.cvsignore&lt;/code&gt;、最後にGruntのルートにある&lt;code&gt;.rsyncignore&lt;/code&gt;を組み合わせて指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync: {
  options: {
    remote: &amp;#39;user@example.com:~/Sites/example.com/&amp;#39;
  },

  main: {
    dry_run: false,
    sync: true,
    progress: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sync&lt;/code&gt;オプションを有効にすると&lt;code&gt;--delete&lt;/code&gt;が追加され同期モードに、&lt;code&gt;progress&lt;/code&gt;オプションを有効にすると&lt;code&gt;--progress&lt;/code&gt;が追加され転送の詳細が確認できるように、それぞれなる。上述の通りデフォルトはDRY RUNなので、明示的に&lt;code&gt;dry_run&lt;/code&gt;オプションを無効にする必要がある。&lt;code&gt;stdio: inherit&lt;/code&gt;で&lt;code&gt;spawn()&lt;/code&gt;するので、実行結果はGruntの出力と混ざる形で表示される。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Twitterアカウントを作成</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description>&lt;p&gt;更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git subtreeの練習</title>
      <link>http://hail2u.net/blog/software/git-subtree-training.html</link>
      <description>Gitのサブモジュールでは面倒そうな、頻繁に更新される別のリポジトリを取り込む方法としてサブツリーマージを行うラッパーであるgit subtreeコマンドを使う練習を始めた。どちらかというと「参照する」要素の強いサブモジュールに対して、サブツリーは「切り分ける」や「取り込む」という感じなんじゃないかと理解している。全般的に間違ってそうで怖い。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/git-subtree-training.html</guid>
      <pubDate>Wed, 18 Jun 2014 11:16:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Gitのサブモジュールでは面倒そうな、頻繁に更新される別のリポジトリを取り込む方法としてサブツリーマージを行うラッパーである&lt;code&gt;git subtree&lt;/code&gt;コマンドを使う練習を始めた。どちらかというと「参照する」要素の強いサブモジュールに対して、サブツリーは「切り分ける」や「取り込む」という感じなんじゃないかと理解している。全般的に間違ってそうで怖い。&lt;/p&gt;

&lt;p&gt;「切り分ける」、つまりリポジトリのサブディレクトリを別のリポジトリにしたい場合は、単純なケースだと親にあたる方で&lt;code&gt;.gitignore&lt;/code&gt;や&lt;code&gt;.git/info/exclude&lt;/code&gt;を使ってサブディレクトリを除外してやれば良い。でもこの場合、両方のリポジトリで関連した変更がある時にそれぞれのリポジトリでコミットしてやらないとならないので面倒くさい。&lt;/p&gt;

&lt;p&gt;「取り込む」場合はサブモジュールが基本なわけだけど、他で作業して戻ってきてたりする必要があるし、サブモジュールの更新ほど面倒くさい作業はない。理解が足らないとミスもしやすいと思う。&lt;/p&gt;

&lt;p&gt;サブツリーを使うと、親となるリポジトリでまとめてコミットしたり、子になるリモート・リポジトリを取り込んだサブディレクトリでシームレスに作業を行ったりしたりできる。そしてその後、サブツリーとして登録したリモート・リポジトリへ、サブディレクトリのファイルへのコミットだけを反映させることもできる。&lt;/p&gt;

&lt;pre&gt;$ git subtree push --prefix=subtree_dir/ subtree_origin master
&lt;/pre&gt;

&lt;p&gt;まさにこれを目的としていた。つまり作業を一元化し、特定のディレクトリへ加わった変更だけを別のリポジトリに投げる、という感じ。親の方にプライベートなファイルが存在していたりして公開したくない(バージョン管理はしたい)が、サブディレクトリは普通に公開しておきたいとかそういうの。単一のリポジトリで普通に扱うので、ミスはしづらいような気がする。&lt;/p&gt;

&lt;h2&gt;リモート・リポジトリをサブツリーとして登録&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git remote add&lt;/code&gt;と&lt;code&gt;git subtree add&lt;/code&gt;を使う。&lt;/p&gt;

&lt;pre&gt;$ git remote add -f subtree_origin https://example.com/bob/foo.git
$ git subtree add --prefix=foo/ --squash subtree_origin master
&lt;/pre&gt;

&lt;p&gt;取り込みたいリモート・リポジトリを&lt;code&gt;subtree_origin&lt;/code&gt;として登録し、サブディレクトリ&lt;code&gt;foo/&lt;/code&gt;として取り込む。&lt;del&gt;&lt;code&gt;--squash&lt;/code&gt;を省略すると履歴を継承できるので、サブモジュールや上述のようなリポジトリのネストから移行する場合はつけない方が良さそう。履歴が読みづらくなるのがちょっとアレだけど、&lt;code&gt;log&lt;/code&gt;コマンドに&lt;code&gt;--date-order&lt;/code&gt;オプションを付ければなんとかなる気がする(または&lt;a href=&quot;http://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt;で)。&lt;/del&gt;&lt;ins&gt;リモートに反映させる時に死ぬので必ず&lt;code&gt;--squash&lt;/code&gt;を付けるべきとした方が良さそう。&lt;/ins&gt;&lt;/p&gt;

&lt;h2&gt;コミット&lt;/h2&gt;

&lt;p&gt;ファイルへ加えた変更のコミットはサブツリーのファイルだろうとそうでなかろうと普通にコミットするだけ。&lt;/p&gt;

&lt;pre&gt;$ git add file-a.txt
$ git add foo/file-b.txt
$ git commit -m &amp;#39;Modified!&amp;#39;
&lt;/pre&gt;

&lt;p&gt;単純にひとつのリポジトリとみなして操作すれば良い。&lt;/p&gt;

&lt;h2&gt;コミットをリモート・リポジトリへ反映&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;と&lt;code&gt;git subtree push&lt;/code&gt;を使う。&lt;/p&gt;

&lt;pre&gt;$ git push origin master
$ git subtree push --prefix=foo/ subtree_origin master
&lt;/pre&gt;

&lt;p&gt;これで&lt;code&gt;origin&lt;/code&gt;には&lt;code&gt;file-a.txt&lt;/code&gt;と&lt;code&gt;foo/file-b.txt&lt;/code&gt;へ加わった変更が、&lt;code&gt;subtree_origin&lt;/code&gt;へは&lt;code&gt;foo/file-b.txt&lt;/code&gt;へ加わった変更&lt;em&gt;のみ&lt;/em&gt;が反映される。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;サブツリー関係はウェブで調べてもノイズが多くてよくわからなかった。古い情報も勿論混ざっているし、新しく書かれた記事でも古い情報を元にしていたり、混ぜこぜになっていたり。前提知識がなさすぎて取捨選択できなかったので、一旦全て忘れてとにかく&lt;code&gt;git subtree -h&lt;/code&gt;と&lt;a href=&quot;https://github.com/git/git/blob/v2.0.0/contrib/subtree/git-subtree.txt&quot;&gt;&lt;code&gt;contirib/subtree/git-subtree.txt&lt;/code&gt;&lt;/a&gt;だけを読んで、色々試してみて覚えることにした。&lt;/p&gt;

&lt;p&gt;このウェブサイト全体のリポジトリをBitbucketでプライベートなリポジトリとして作り、&lt;a href=&quot;https://github.com/hail2u/hail2u.net-weblog&quot;&gt;ウェブログ&lt;/a&gt;や&lt;a href=&quot;https://github.com/hail2u/hail2u.net-documents&quot;&gt;ドキュメント&lt;/a&gt;、&lt;a href=&quot;https://github.com/hail2u/hail2u.net-styles&quot;&gt;CSS&lt;/a&gt;のリポジトリをsubtreeとして混ぜるみたいな形で色々試行錯誤してみて、なんとなく理解できたような気がする。&lt;code&gt;git reset --hard&lt;/code&gt;と&lt;code&gt;git push -f&lt;/code&gt;を数十回繰り返した価値はあった。&lt;/p&gt;

&lt;p&gt;誰かが管理してるリポジトリはサブモジュールで特定のコミットに縛り、自分がメインで管理しているリポジトリはサブツリーでいじりやすいようにしておく、というのが良いのかな。他のリポジトリを取り込むという利用だけでなく、サンプルを置いたディレクトリを&lt;code&gt;gh-pages&lt;/code&gt;ブランチを使ったサブツリーにして、GitHub Pagesの生成をシームレスに行うとかも出来そう。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Node.jsのfs.readFile(Sync)()の第二引数</title>
      <link>http://hail2u.net/blog/coding/nodejs-second-argument-of-fs-readfile.html</link>
      <description>Node.jsのfs.readFile()の第二引数はオブジェクトに変更され、文字列指定によるエンコード指定は削除されたと思っていた。しかし、第二引数が文字列になっているコードをたてつづけに見る機会があったので、文字列を渡した場合にencodingへセットしてくれる機能がそのまま残っていることがちゃんと調べたらわかった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/nodejs-second-argument-of-fs-readfile.html</guid>
      <pubDate>Tue, 17 Jun 2014 12:33:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;Node.jsの&lt;a href=&quot;http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback&quot;&gt;fs.readFile()&lt;/a&gt;の第二引数はオブジェクトに変更され、文字列指定によるエンコード指定は削除されたと思っていた。しかし、第二引数が文字列になっているコードをたてつづけに見る機会があったので、文字列を渡した場合に&lt;code&gt;encoding&lt;/code&gt;へセットしてくれる機能がそのまま残っていることがちゃんと調べたらわかった。&lt;/p&gt;

&lt;p&gt;v0.10.28のFile Systemモジュールでは&lt;a href=&quot;https://github.com/joyent/node/blob/v0.10.28/lib/fs.js#L187-L188&quot;&gt;第二引数が文字列の時は&lt;code&gt;encoding&lt;/code&gt;にその値が指定&lt;/a&gt;されている。なのでオブジェクトを作らず以下のように書くことも可能なままだった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fs.readFile(&amp;#39;uf8.txt&amp;#39;, &amp;#39;utf8&amp;#39;, function (err, data) {
  if (err) throw err;
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今まで書いてた苦労(スニペットだけど)は何だったのか。でも、ドキュメントにちゃんと書かれていないってことは、後方互換性のために残してあるだけで、実際には使わない方が良いってことなのかな。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>匂いか臭いか</title>
      <link>http://hail2u.net/blog/misc/smell.html</link>
      <description>いつも買っていたネピアのトイレットペーパーがリニューアルして香り付きになっていた。石けんの香り。香り付きの柔らかいやつか無香だけど硬い紙のどうにもならない二択になりつつある気がする。あ、ダブル派。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/smell.html</guid>
      <pubDate>Mon, 16 Jun 2014 08:23:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;いつも買っていた&lt;a href=&quot;http://www.nepia.co.jp/&quot;&gt;ネピア&lt;/a&gt;のトイレットペーパーがリニューアルして香り付きになっていた。石けんの香り。香り付きの柔らかいやつか無香だけど硬い紙のどうにもならない二択になりつつある気がする。あ、ダブル派。&lt;/p&gt;

&lt;p&gt;石けんの香りそのものには思うところはないんだけど、石けんでないものから臭うとウッってなる。母親がきれい好きで家が片付いていた上、芳香剤みたいなものがまったくない環境で育ったからか、こういった人工的につけられた香りが苦手で、ちょっと強いと不快な臭いにしか感じられなくなる。Twitterでもちょくちょく言ってる人を何人か見てるけど、洗剤や柔軟剤の臭いも本当に辛い。日によって違う香りの洗剤を使って気分をリフレッシュ！みたいな人種を好意的に取り上げている雑誌をしばらく前に読んでゾッとした。&lt;/p&gt;

&lt;p&gt;もちろんこれは僕の主観と感覚に過ぎないので、世の中に色々選択肢はあって良い。だけど上述のような不自由な選択肢しか残されないことも多くてなんだかなと思う。香りはそれが芳しいか臭いかは人によるとしか言えない。多くの人が芳しいと感じる香りであっても万人にそうではないし、香る環境にも強く依存する。香りが強制的に嗅覚に訴えてしまうことをもうちょっと意識して、メーカーも販売店もせめて選択肢を減らさないで欲しい。&lt;/p&gt;

&lt;p&gt;「まぁでも加齢臭よりマシじゃないですか」みたいな意見に反論しづらい年齢が憎い。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>UnUTM v0.1.0</title>
      <link>http://hail2u.net/blog/webdesign/unutm-v0.1.0.html</link>
      <description>URLのutm_*パラメーターのみを削除してreplaceState()するだけのスクリプトを、UnUTMという名前でBower化してv0.1.0とした。引き続きこのウェブサイトでも稼働中。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/unutm-v0.1.0.html</guid>
      <pubDate>Sun, 15 Jun 2014 11:25:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;URLの&lt;code&gt;utm_*&lt;/code&gt;パラメーターのみを削除して&lt;code&gt;replaceState()&lt;/code&gt;するだけのスクリプトを、&lt;a href=&quot;https://github.com/hail2u/unutm&quot;&gt;UnUTM&lt;/a&gt;という名前でBower化してv0.1.0とした。引き続きこのウェブサイトでも稼働中。&lt;/p&gt;

&lt;p&gt;対応環境のみでバックグラウンドで処理されるようになっているので、Bowerでインストールして&lt;code&gt;script&lt;/code&gt;要素で読み込むだけ。Google Analyticsへもなんとなく対応したつもりになっているけど、ユニバーサル・アナリティクスのみ。元々使いもしない&lt;code&gt;utm_*&lt;/code&gt;パラメーターを押し付けられてURLが分散してしまうのが辛いから作ったものなので、ちゃんと調べてきれいに対応する気にはなれない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;概要書こうとして「UTMって何の略だったっけ……」とか思って調べたら、Urchin Traffic Monitorの略だった。あーそういえばって感じだ。リネームするわけにもいかなそうなので、ずっとこれと付き合っていくんだろう。もはやutmと文字が並んでるだけで殺意が湧く。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Vimのrenderoptionsオプション</title>
      <link>http://hail2u.net/blog/software/vim-renderoptions-option.html</link>
      <description>最近のKaoriYa版のWindows向けgVimではどうやらrenderoptionsオプションを適切に設定すると、DirectWriteを使った描画に切り替えられるようだ。一年ほど前からパッチとして含められるようになっていたらしい。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/vim-renderoptions-option.html</guid>
      <pubDate>Sat, 14 Jun 2014 02:13:00 +0900</pubDate>
      <content:encoded>&lt;figure&gt;
  &lt;a href=&quot;http://hail2u.net/images/blog/vim-renderoptions-option.png&quot;&gt;&lt;img src=&quot;http://hail2u.net/images/blog/vim-renderoptions-option.png&quot; alt=&quot;renderoptionsオプションを使うと、デフォルトのGDI環境下(右)できれいに表示されないMigMix 1Mのようなフォントも、DirectWriteを利用してアンチエイリアスがかかった表示に切り替えることができる&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;最近のKaoriYa版のWindows向けgVimではどうやら&lt;code&gt;renderoptions&lt;/code&gt;オプションを適切に設定すると、DirectWriteを使った描画に切り替えられるようだ。一年ほど前から&lt;a href=&quot;http://www.kaoriya.net/blog/2013/05/05/&quot;&gt;パッチとして含められるように&lt;/a&gt;なっていたらしい。&lt;/p&gt;

&lt;p&gt;有効にしただけではあまり劇的な効果を上げることは出来ないようだけど、追加で細かく設定を行える。例えば上のスクリーンショットのようにブワッとアンチエイリアスをかけたい場合は&lt;code&gt;~/vimfiles/gvimrc&lt;/code&gt;などで以下のようにすれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set encoding=utf-8

if has(&amp;#39;win32&amp;#39;)
  set guifont=MigMix_1M:h12
  set renderoptions=type:directx,renmode:5
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;わかりやすそうなので&lt;a href=&quot;http://mix-mplus-ipa.sourceforge.jp/migmix/#migmix1m&quot;&gt;MigMix 1M&lt;/a&gt;を例にした。デフォルトのGDI下では、上のスクリーンショットの様に特に縦方向に残念な感じで、ところどころにゴミが出たりする。それがさっぱりと消えてくれるようになる。本当は&lt;code&gt;renmode:6,taamode:0&lt;/code&gt;としてアウトライン・モードにしたかったんだけど、うまくいかなかったので&lt;code&gt;renmode:5&lt;/code&gt;にしておいた。他のパラメーターをいじるのは結構大変なので、とりあえずは&lt;code&gt;renmode:5&lt;/code&gt;で良いんじゃないかと思う。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>CSS MQPacker v0.1.2</title>
      <link>http://hail2u.net/blog/webdesign/node-css-mqpacker-v0.1.2.html</link>
      <description>メディアクエリの順番が崩れることがあるバグを修正して、CSS MQPackerのv0.1.2をリリースした。CSSは順序に依存するものなので、やっぱり書いたままの順を維持した方が良いのかな……などと、このツールの根本を否定するような考えが頭をよぎった。</description>
      <author>kyo@hail2u.net (Kyo Nagashima)</author>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-css-mqpacker-v0.1.2.html</guid>
      <pubDate>Fri, 13 Jun 2014 04:26:00 +0900</pubDate>
      <content:encoded>&lt;p&gt;メディアクエリの順番が崩れることがあるバグを修正して、&lt;a href=&quot;https://github.com/hail2u/node-css-mqpacker&quot;&gt;CSS MQPacker&lt;/a&gt;のv0.1.2をリリースした。CSSは順序に依存するものなので、やっぱり書いたままの順を維持した方が良いのかな……などと、このツールの根本を否定するような考えが頭をよぎった。&lt;/p&gt;

&lt;p&gt;これまでは、同じ条件のメディアクエリが出てきた時に、それまでにあったメディアクエリのブロックを新しく出てきたメディアクエリのブロックへマージするという実装だった。必要な物を必要なだけ動かすことになるので、良い実装と勘違いしていたんだけど、以下の様なCSSを通すと破綻する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo { color: black; }

@media (min-width: 300px) {
  .foo { color: red; }
}

@media (min-width: 600px) {
  .foo { color: green; }
}

.bar { color: black; }

@media (min-width: 300px) {
  .bar { color: blue; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メディアクエリの条件が&lt;code&gt;(min-width: 600px)&lt;/code&gt;のものはひとつしかないので、このメディアクエリのブロックは移動されない。そのため処理結果のCSSは以下のようになり、&lt;code&gt;600px&lt;/code&gt;以上の時も&lt;code&gt;.foo&lt;/code&gt;は赤色の文字になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo { color: black; }

@media (min-width: 600px) {
  .foo { color: green; }
}

.bar { color: black; }

@media (min-width: 300px) {
  .foo { color: red; }
  .bar { color: blue; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新バージョンでは、逐次メディアクエリのブロックを削除しながら別にマージしていき、最後にCSSへ追加するようにした。メディアクエリは最後にまとめられることになる。上記例を新バージョンで処理すると以下のようになり、ちゃんと&lt;code&gt;600px&lt;/code&gt;以上の時に&lt;code&gt;.foo&lt;/code&gt;が緑色の文字になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.foo { color: black; }

.bar { color: black; }

@media (min-width: 300px) {
  .foo { color: red; }
  .bar { color: blue; }
}

@media (min-width: 600px) {
  .foo { color: green; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで大丈夫なんじゃないかと思う。&lt;/p&gt;</content:encoded>
    </item>
    <item>
      <title>Projectsに「UnUTM」を追加</title>
      <link>https://github.com/hail2u/unutm</link>
      <pubDate>Thu, 12 Jun 2014 06:32:16 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/unutm</guid>
      <description>&lt;p&gt;UnUTMはウェブページのURLからGoogle Analyticsなどで利用されているUrchin Traffic Monitor (UTM)用のパラメーターを自動的に削除し、URLの分散を解消するJavaScriptライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSSWring」を追加</title>
      <link>https://github.com/hail2u/node-csswring</link>
      <pubDate>Fri, 25 Apr 2014 08:19:34 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-csswring</guid>
      <description>&lt;p&gt;CSSWringはCSSを圧縮(minification)するNode.jsパッケージです。Node.jsパッケージとして組み込むだけでなく、コマンドラインからも実行できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「CSS MQPacker」を追加</title>
      <link>https://github.com/hail2u/node-css-mqpacker</link>
      <pubDate>Sat, 22 Feb 2014 15:39:04 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-css-mqpacker</guid>
      <description>&lt;p&gt;CSS MQPackerはCSSファイル内に散在するメディアクエリを、クエリごとにまとめCSSファイルを最適化するNode.jsパッケージです。これを利用した&lt;a href=&quot;https://github.com/hail2u/grunt-css-mqpacker&quot;&gt;Gruntプラグイン&lt;/a&gt;もあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentsに「安全でアクセシブルなアイコン・フォント」を追加</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description>&lt;p&gt;アイコン・フォントの安全な実装についての&lt;a href=&quot;http://filamentgroup.com/lab/bulletproof_icon_fonts/&quot;&gt;Bulletproof Accessible Icon Fonts&lt;/a&gt;という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Long URL (Gruntプラグイン)」を追加</title>
      <link>https://github.com/hail2u/grunt-long-url</link>
      <pubDate>Thu, 09 Jan 2014 08:34:03 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/grunt-long-url</guid>
      <description>&lt;p&gt;Long URL (Gruntプラグイン)はCSSファイルに含まれるURLの長さを調べ、2000文字以上のURLが見つかった場合に警告するGruntプラグインです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectsに「Pit RO」を追加</title>
      <link>https://github.com/hail2u/node-pit-ro</link>
      <pubDate>Thu, 09 Jan 2014 08:33:18 +0900</pubDate>
      <guid isPermaLink="true">https://github.com/hail2u/node-pit-ro</guid>
      <description>&lt;p&gt;Pit ROは&lt;a href=&quot;https://github.com/cho45/pit&quot;&gt;Pit&lt;/a&gt;のデータファイルをNode.jsで手軽に読み込めるようにするNodeパッケージです。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
