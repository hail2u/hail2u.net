<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>https://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="https://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
    <item>
      <title>英語で書かれた記事を優先的に読むこと</title>
      <link>https://hail2u.net/blog/media/preferring-to-read-tech-articles-in-english.html</link>
      <description>ウェブ開発・デザイン関係の記事は、英語で書かれたものを主に読むようにしている。英語が一次ソースなことが多いということもあるが、それは理由の2割くらいにしかならない。残りの8割の半分は先入観の排除で、もう半分は読み返しの促進だ。</description>
      <category>Media</category>
      <guid isPermaLink="true">https://hail2u.net/blog/media/preferring-to-read-tech-articles-in-english.html</guid>
      <pubDate>Thu, 05 Nov 2015 12:35:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>ウェブ開発・デザイン関係の記事は、英語で書かれたものを主に読むようにしている。英語が一次ソースなことが多いということもあるが、それは理由の2割くらいにしかならない。残りの8割の半分は先入観の排除で、もう半分は読み返しの促進だ。</p>

<p>どうしても日本語の記事は書いている人の背景が見えてきてしまう。するとその人の開発者としての得意な分野や場合によっては所属に対して先入観を持って読み進めることになる。そのことが良い方向へ転がることもあるが、悪い目が出たことの方が圧倒的に記憶に残る。そういった悪い目の記憶の積み重ねは先入観を更に補強してしまう。英語の記事では超有名人でもない限りよく知らないし、知ろうとも思わないので、先入観なしに読み始めることができる。</p>

<p>また、英語の記事はどうしても読む速度が落ちる。その結果読み飛ばし過ぎることもあるが、流し読みしてわかった気になるよりはマシだろう。落ちた読む速度は短期記憶の喪失に直結し、読んでる途中ですぐわからなくなるため、自然と読み返しを促される。技術的な記事の場合、そういった読む作業により消費する時間というデメリットより、噛みくだいた状態で知識を得られるというメリットの方が多い。</p>

<hr>

<p>こと効率という点で、自分をまったく信用していないため、こういうアプローチをとっている。若いころからもっと素直に色々文章を読む訓練を積んでいれば良かった。そう考えると身近に肩ひじを張らずに読むことのできる文章があふれている今の時代に青少年期を過ごしている人たちがうらやましいな、と感じる。</p>]]></content:encoded>
    </item>
    <item>
      <title>Encoding</title>
      <link>https://hail2u.net/blog/internet/encoding-specification.html</link>
      <description>2年弱くらい作業が続いているEncoding仕様を、新たなCRが出た機会に改めて読んでいた。このような仕様に人を浪費することがないように、どのような手間とヒマをかけてもUTF-8に変更していくべきなのかな、と感じる。</description>
      <category>Internet</category>
      <guid isPermaLink="true">https://hail2u.net/blog/internet/encoding-specification.html</guid>
      <pubDate>Tue, 03 Nov 2015 13:05:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>2年弱くらい作業が続いている<a href="http://www.w3.org/TR/encoding/">Encoding</a>仕様を、新たなCRが出た機会に改めて読んでいた。このような仕様に人を浪費することがないように、どのような手間とヒマをかけてもUTF-8に変更していくべきなのかな、と感じる。</p>

<p>UTF-8を使わない理由はあまりないが、同時にレガシーなEUC-JPやShift_JISを捨てる理由もあまりないことは確かだ。強い反論が思いつかないためそのまま残る。それはしょうがないが、問題はそれに釣られてしまうことがあることだ。新しいプロジェクトでも建設的な議論の末にUTF-8に落ち着きそうだったにも関わらず、ウェブサイトの変えられない他のページがShift_JISだからという消極的な理由でそれになりそうになることもある。</p>

<p>使い続けられるレガシーな文字コードという鎖の環を断ち切る地道な活動を続けたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>HTTPSにした時に気を付けたこと</title>
      <link>https://hail2u.net/blog/webdesign/https-checklist.html</link>
      <description>何回かやる必要が出てきそうなので、どういう形でやったのかをアバウトに記録しておく。本当は何もせずできればいいのだけど、世の仕様はそんなにうまくできてはいない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/https-checklist.html</guid>
      <pubDate>Mon, 02 Nov 2015 11:58:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>何回かやる必要が出てきそうなので、どういう形でやったのかをアバウトに記録しておく。本当は何もせずできればいいのだけど、世の仕様はそんなにうまくできてはいない。</p>

<section>
<h2>内部リンク</h2>

<p>事前に徹底的に書き換えておくのが良い。内部リンクにはドメインも不要なので<code>/</code>で始まる絶対パスで全部書くように統一するのが楽だろう。</p>

<p>ただし<code>rel=canonical</code>は色々なウェブサービスから（時々考えなしにプロトコル・スキームから始まっていると仮定されて）使われるため、<code>http:</code>から始める方が安全かもしれない。そもそもFacebook向けのOGPで<code>og:url</code>を書いている場合もあり、この類もプロトコル・スキームから始める必要があり、どうせ書き換える必要は出てくる。諦めて機械的に書き換えができる仕組みを作っておくのも良い。</p>

<p>このウェブサイトの場合は、OGP他を消した上で全て絶対パスにしておくという手法を取ったが、おすすめしない。</p>
</section>

<section>
<h2>Amazonアソシエイトの画像URL</h2>

<p>通常、Amazonアソシエイトを使って画像を得ようとするとHTTPの画像になる。一応リダイレクトで振り分けられるのだが、元々のURLはHTTPなためどうしてもMixed Contentにはなる。リダイレクトされて<code>images-fe.ssl-images-amazon.com</code>配下を参照する画像に書き換えるか、リダイレクト元の方をHTTPSに書き換えておくとうまくいく。</p>

<p>HTTPからHTTPSの画像を参照する分には問題は少ないので、これも事前に作業しておくことができる。</p>
</section>

<section>
<h2>RSSフィードの再構築</h2>

<p>RSSフィードでは絶対URLでリンクは書く。そのためすべてのリンクを書き換える必要がある。あまり忘れない上、概ねブログ・ツール等から自動的に更新されることになるので、大丈夫だろう。RSSリーダーからは全部新着になったり、IFTTTのようなウェブサービスが暴発することがあることには気を付けた方が良い。</p>

<p>僕のように魂を込めてRSS（一部だが）をテキスト・エディターで書いている人は忘れないようにする。</p>
</section>

<section>
<h2>サイトマップの再構築</h2>

<p>RSSフィードは忘れないだろうが、サイトマップは忘れる可能性が高い。それなりに自動生成していない人もいると思うので、再構築した方が良い。</p>

<p>301でのURLの移動とサイトマップのURLが食い違ってると何らかの悪影響がある可能性を否定できないので、特に気を付ける必要がある。</p>
</section>

<section>
<h2>連携ウェブサービスの再設定</h2>

<p>HTTPで始まるURLを登録しているウェブサービスを利用している場合は忘れずに書き換える。FacebookページやTwitterアカウントなどは忘れがちだろう。</p>

<p>IFTTTやDlvr.itのようなRSSフィードをトリガーとしているものは注意を要する。これらは新着記事かそうでないかをURLで判断し、多くの場合HTTPのURLとHTTPSのURLを区別する。そのため今までの設定を書き換えて使おうとすると、全部新着とみなされ暴発する（僕はまんまと暴発させた）。面倒だが新しく作り直す必要があるだろう。</p>
</section>

<section>
<h2>Search Consoleの再設定</h2>

<p>Googleの検索結果での表示などを制御するSearch ConsoleではHTTPとHTTPSが別のプロファイルになる。そのため改めて追加する必要がある。それだけでなくすべて設定のやり直しなので、ウェブサイトの認証やサイトマップの送信も行う。</p>

<p>特に何かこうというわけではないが、ウェブサイトについてGoogleへの連絡する際の要になるので、作っておいた方が無難だろう。</p>
</section>

<section>
<h2>Analyticsの設定変更</h2>

<p>AnalyticsはHTTPとHTTPSの両対応であるが、設定内に優先するプロトコルの設定が複数ある。プロパティのプロパティ設定にあるデフォルトのURLとビューのビュー設定にあるウェブサイトのURLの2つだ。どちらも書き換えておく必要が出てくるだろう。</p>

<p>思い切ってAnalysticsを捨てるという選択もなくはない。どちらにせよ設定は書き換えておいても損はないだろう。</p>
</section>

<section>
<h2>他</h2>

<p>HTML生成に使うツールなどでプロトコル・スキームを切り替えられるようにしておくと書き換える場所が少なくて済むので、作業がスムーズに進む。といってもそういうことができることはあまりないので、どこを書き換えればうまく切り替わるかを事前に色々実験しておくと良い。</p>

<p>もう誰が使っているか知らないが<a href="http://blosxom.sourceforge.net/">Blosxom</a>では<code>$blog_url</code>という設定変数で集中管理されるので、それをうまく利用する。</p>

<pre><code>$scheme = &quot;https:&quot;;
$domain = &quot;hail2u.net&quot;;
$blog_url = &quot;$scheme//$domain/blog&quot;;
</code></pre>

<p>このように<code>blosxom.conf</code>で設定を分離させ、切り替えられるようにしたうえで、プラグインやフレーバーから必ず<code>$blog_url</code>を使うようにしておいた。たまにどうしようもないプラグインもあったりするので、その場合に<code>$blosxom::scheme</code>で拾えるようにするためこうなっている。</p>
</section>

<hr>

<p>grepして置換など必要のない形に事前に整えるのが<em>最低限のライン</em>で、HTTPで公開済みのHTMLがそのままHTTPSで機能するようになっているのが理想だ。HTTPSへの移行を発動させる直前の作業は、HTTPな参照が残っていないかgrepして確認するくらいで終えたい。</p>]]></content:encoded>
    </item>
    <item>
      <title>HTTPSへ</title>
      <link>https://hail2u.net/blog/webdesign/moved-to-https.html</link>
      <description>宣言通りHTTPSに移行した。まずはCloudFlareの無料HTTPSを利用している。CloudFlareでは設定でHTTP Secure Transport Securityも有効にできるので、HTTPのままであろう旧URLからもスムーズに移行されるはずだ。RSSリーダー等で全部新着になったなどがあったら申し訳ないが諦めてほしい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/moved-to-https.html</guid>
      <pubDate>Sun, 01 Nov 2015 10:15:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
<a href="https://hail2u.net/images/blog/moved-to-https.png"><img alt="HTTPS" height="1440" src="https://hail2u.net/images/blog/moved-to-https.png" width="2560"></a>
</figure>

<p>宣言通りHTTPSに移行した。まずは<a href="https://www.cloudflare.com/">CloudFlare</a>の無料HTTPSを利用している。CloudFlareでは設定で<a href="https://support.cloudflare.com/hc/en-us/articles/204183088-Does-CloudFlare-offer-HSTS-HTTP-Strict-Transport-Security-">HTTP Secure Transport Security</a>も有効にできるので、HTTPのままであろう旧URLからもスムーズに移行されるはずだ。RSSリーダー等で全部新着になったなどがあったら申し訳ないが諦めてほしい。</p>

<p>移行にはなおかなり不安が残る。しかし<a href="http://www.coreserver.jp/info/sni.html">CORESERVER.JPが無料でHTTPSを有効に</a>できるようになったので、いざという時の避難場所は確保できるだろうと考えている。他のいくつかのホスティング・サービスでも無料だったり、年1000円程度で提供されていることは確認したので、もしCORESERVER.JPがダメでもなんとかなるだろう。</p>

<p>このままCloudFlareが無料で提供し続けてくれると楽でよいが、そう楽観視することも難しいと感じる。明らかに金のなる木でありそうだからだ。</p>

<hr>

<p>HTTPSへの移行の際にはGoogleのSearch Console（旧Webmaster Tools）のヘルプにある<a href="https://support.google.com/webmasters/answer/6073543?hl=ja">HTTPS でサイトを保護</a>というドキュメントを参考にした。気を付けるのはHSTSの提供だけでは不十分で、HTTPからHTTPSへのサーバー側での301リダイレクトも必要だということくらいだろう。HSTSをサポートしていない環境のためというよりは、サポートしている環境でスムーズな移行を促すために必要だ。</p>

<p>概ねうまくいった。事前にありとあらゆるページから絶対URLを排していたこともあり、ほとんどページの修正は必要なく、せいぜいRSSフィードのURLとサイトマップのURLを書き直すくらいだった。Googleのインデックス更新はまだ確認していないが、経験上大丈夫だろう。</p>

<p><del>ただFeedlyがHTTPからHTTPSへの301によるRSSの移動に追随してくれないようで、ちょっと困っている。とここで書いてもみな気づかないわけなので、なかなかな感じでハマった予感がする。半日待っても追随されなかったらサポートに問い合わせてみようと考えている。</del><ins>Feedlyも大丈夫そうで一安心だ。</ins></p>

<hr>

<p>ともあれこれでめでたくHTTPSかつSPDY/3.1になった。いずれCloudFlare側がHTTP/2にしてくれるだろう……と思いたいが、これが有料オプションというのは十分ありうるのかもしれない。Proの月20ドルというのはちょっと手が出ない……。</p>]]></content:encoded>
    </item>
    <item>
      <title>HTTPSへの移行</title>
      <link>https://hail2u.net/</link>
      <pubDate>Sun, 1 Nov 2015 00:00:00 +0900</pubDate>
      <guid isPermaLink="true">https://hail2u.net/</guid>
      <description><![CDATA[<p>このウェブサイトがHTTPSで提供されるようになりました。既存のHTTPであるURLからはHSTSを利用してクライアント・サイドでリダイレクトされるようになっています。</p>]]></description>
    </item>
    <item>
      <title>鎌倉散歩</title>
      <link>https://hail2u.net/blog/misc/kamakura-20151027.html</link>
      <description>鎌倉あたりまで散歩していた。週間予報ではずっと雨っぽい予報が続いていたが、晴れて暑いくらいですごく気持ち良かった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">https://hail2u.net/blog/misc/kamakura-20151027.html</guid>
      <pubDate>Sat, 31 Oct 2015 14:02:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-1.jpg"><img alt="七里ガ浜からの海" height="1440" src="https://hail2u.net/images/blog/kamakura-20151027-1.jpg" width="2560"></a>
</figure>

<p>鎌倉あたりまで散歩していた。週間予報ではずっと雨っぽい予報が続いていたが、晴れて暑いくらいですごく気持ち良かった。</p>

<p>鎌倉……の前に、10/29に正式オープンの<a href="http://www.lalaport-ebina.com/">ららぽーと海老名</a>を見てみたりする。ロータリーも完成しており、すでにバスの路線は変更になったようで、神奈中バスが通っていた。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-2.jpg"><img alt="駅側のプロムナード側から見て正面" height="405" src="https://hail2u.net/images/blog/kamakura-20151027-2.jpg" width="720"></a>
</figure>

<p>一方でロータリー及びららぽーと周辺には横断歩道及び入り口があまりなく、駅側ではない方からは微妙に面倒そうかなという印象だ。周辺にも店屋が進出しており、ららぽーとにはテナントとして入れなかったゴミのような店が散在する。居酒屋もついにできてしまった。それでもパチンコ屋が進出してこなければ、このままこぎれいな駅前を維持できそうだ。</p>

<p>周辺はさすがに道路が大幅に拡張整備されていた。とは言っても、もちろんそこにつながる道は古い狭い道路ばかりのままだ。しばらくは歩行者は大変そうだ（実際オープン当日はいきなりUターンする車や横断歩道にかまわず突っ込んでくる車が多くかなり厄介だった）が、相鉄線の改札が増える頃には改善されるらしいので、それに期待したい。</p>

<hr>

<p>改めて鎌倉……の前に相模線に乗るのも久しぶり、茅ヶ崎方面に乗るのは更に久々なので、案内表示を眺めていたりする。茅ヶ崎まで1時間くらいとか勝手に想像していたが、30分ちょっとくらいで着いて驚いた。</p>

<p>茅ヶ崎で東海道線に乗り換えて藤沢へ向かうが、<a href="http://www.jreast.co.jp/hitachi_tokiwa/uenotokyoline/">上野東京ライン</a>とか言われると慣れていない人には何がなんだかわからない。藤沢に着き、開けてるなーという感想を持ったものの、ルミネ藤沢を見るとららぽーと海老名に不安しか湧いてこなかったので、早々に江ノ電の駅へ移動した。</p>

<figure>
  <img alt="江ノ電のりばのレトロというほどではない、ただただ古い案内表示" height="360" src="https://hail2u.net/images/blog/kamakura-20151027-3.jpg" width="480">
</figure>

<p>藤沢で小田急百貨店の壁についている江ノ電の案内を見て、江の島・鎌倉気分になってきた。まずは用があったので由比ガ浜まで一気に行く。</p>

<p>サクッと用をこなし、そのまま海へいそいそと移動する。午前中はまだ寒くて人が全然いなかったものの、海岸にゴミひとつなく気持ち良かった。周辺のどうということもない街中もうろうろする。家が立派なものが多いだけでなく、どこの家も生け垣がちゃんと剪定されているか、そうでない場合もむやみに伐られたりしておらず、街の雰囲気はこの辺りで決まってくるのかなと感じた。</p>

<hr>

<p>そのまま歩いて和田塚の近くにある洋服屋で<a href="http://www.shoeslikepottery.com/">Moonstarの靴</a>を見ようと行ったら12時開店で30分ほど時間が残ってしまった。時間つぶしに更に散歩しようと、そういや<a href="http://makeitreal.jp/">Make It Real Inc.</a>がこの辺だったなと探すものの見つからなかった。見つかるのは猫ばかりだ。青いロードスターは見た気がするので、某さんには会ったということにしておく。</p>

<p>迷いすぎて時間を浪費し、12時を過ぎたので洋服屋に行き、靴を見る。すごく良さそうだったので、普段履いてる安い靴がダメになったら買いに来よう。</p>

<hr>

<p>腹が減ったので、七里ガ浜に戻り<a href="http://www.sangosho.net/">珊瑚礁</a>へ。本店は遠そうなので海っぺたにあるモアナマカイという方へ行った。野菜カレーにし、焼いたレンコンやカブを堪能した。レンコンとカブは今度家でもやってみよう。</p>

<p>暑かったので一緒に頼んだジンジャーエールは、まさかのウィルキンソンの瓶そのままで、氷入りのグラスに手酌でどうぞというものだった。瓶ままなこととKALDIで80円で売っているものが450円というあたりに観光地を感じた。当たり前だけど安定のおいしさだった。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-6.jpg"><img alt="七里ガ浜からの江の島" height="1440" src="https://hail2u.net/images/blog/kamakura-20151027-4.jpg" width="2560"></a>
  <figcaption>七里ガ浜</figcaption>
</figure>

<p>七里ガ浜も少し歩く。由比ガ浜よりも商売っ気を出している店ばかりで、あまり歩くには向いてないようだ。</p>

<p>今度は終点の鎌倉へ向かう。行ったり来たりすることになったので600円の江ノ電フリーパス買ったのは正解だった。鎌倉で降りて<a href="http://spingle.jp/">SPINGLE MOVE</a>へ。また靴か。路面店ということで期待していたが、思ったよりも小さかった。しかしSPINGLE MOVEのスニーカーだけを見れる空間というのはすごく良い。Moonstarのスニーカーに傾いていたが、SPINGLE MOVEとPatrickだけで生きていくのも良さそうとも思い始めている。</p>

<hr>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-8.jpg"><img alt="鶴岡八幡宮の森と共に建物" height="1836" src="https://hail2u.net/images/blog/kamakura-20151027-5.jpg" width="3264"></a>
  <figcaption>神奈川県立近代美術館・鎌倉館</figcaption>
</figure>

<p>ようやく目的の<a href="http://www.moma.pref.kanagawa.jp/public/HallTop.do?hl=k">神奈川県立近代美術館・鎌倉館</a>へ。建物自体の保存は決まったものの美術館ではなくなるようで、今開催中のものが最後の展覧会になるそうだ。展示は所蔵品をノンジャンルでずらっと並べたもので、あまり考えずに見れた。展覧会らしくはなかったけれど、これはこれで……というところだ。Part 1と2も行けば良かった。</p>

<p>江ノ電フリーパスを持っていると100円引きで入館できる。年明けまでやっており、11/03は無料で中に入れるようだ。新館が閉鎖されており、入れなかったのが残念だ。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-9.jpg"><img alt="朱・黄・緑できれいに塗られた楼門" height="1836" src="https://hail2u.net/images/blog/kamakura-20151027-6.jpg" width="3264"></a>
  <figcaption>鶴岡八幡宮・本宮の楼門</figcaption>
</figure>

<p>最後に鶴岡八幡宮を見にいって、鎌倉駅から帰途へ。表参道はいつ頃完成するんだろうか。完成の暁には、ぜひ桜の季節に行きたい。</p>

<hr>

<p>ただ歩いただけだったが楽しかった。鎌倉館へ向かう途中に通った小町通りも、あれはあれで手軽に観光地感を味わえて面白い。</p>]]></content:encoded>
    </item>
    <item>
      <title>山崎実業 ドアストッパー キューブ（グリーン）</title>
      <link>https://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</link>
      <description>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、山崎実業というところのキューブというものにした。色はグリーンにした。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">https://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</guid>
      <pubDate>Fri, 30 Oct 2015 12:39:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="山崎実業 ドアストッパーキューブ グリーン 7108" src="https://images-fe.ssl-images-amazon.com/images/I/31TqLvm7Y1L.jpg"></a>
</figure>

<p>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、<a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22">山崎実業というところのキューブ</a>というものにした。色はグリーンにした。</p>

<p>条件は完全に満たしていて、色もAmazonの画像で見るよりも落ち着いたグリーンで申し分なかった。6cm四方程度とスマホの半分くらいの大きさで、重さも65gと軽量で良い。</p>

<p>ストッパーとしての力はそれなりで、玄関ドアだと力不足だろうけれど、屋内のドアで床が変わった素材でもなければ十分に機能するようだ。フローリングや撥水コートしている床では大丈夫だった。それほど深くグッと差し込まずともドアを止めてくれる。</p>

<p>ネックは価格（購入時は1300円強）だったけど、今は800円を切っていてうらやましい。もうひとつ必要そうだったら色違いを買おうと思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>HTTP Strict Transport SecurityとContent Security Policyを利用した履歴調査</title>
      <link>https://hail2u.net/blog/internet/history-sniffing-with-hsts-and-csp.html</link>
      <description>Content Security Policyを使ってHTTPからしか画像を読み込めないように制限しておき、HTTP Strict Transport Securityを使ってHTTPSへ書き換えようとするウェブサイトのURLをimg要素で読み込ませることで、訪問済みかどうか調べるというSnifflyという手法の実装例を見ていた。HSTSが強制的にHTTPSへ書き換えることが逆にプライバシーを漏えいさせてしまう結果になったのは皮肉だ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">https://hail2u.net/blog/internet/history-sniffing-with-hsts-and-csp.html</guid>
      <pubDate>Thu, 29 Oct 2015 00:46:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>Content Security Policyを使ってHTTPからしか画像を読み込めないように制限しておき、HTTP Strict Transport Securityを使ってHTTPSへ書き換えようとするウェブサイトのURLを<code>img</code>要素で読み込ませることで、訪問済みかどうか調べるという<a href="https://github.com/diracdeltas/sniffly">Sniffly</a>という手法の実装例を見ていた。HSTSが強制的にHTTPSへ書き換えることが逆にプライバシーを漏えいさせてしまう結果になったのは皮肉だ。</p>

<p>HSTSを提供している場合、そのウェブサイトへのアクセスはすべてHTTPSにブラウザー側で書き換えられる。つまりHSTSを提供しているウェブサイトへ訪問済みの場合、そのウェブサイトへHTTPで画像をリクエストしてもHTTPSに書き換わることになる。そうするとCSPでHTTPな画像に制限している場合、必ず読み込みエラーになることになる。</p>

<p>それだけでは普通の読み込みエラーと判別できない。しかしHTTPSへの書き換えとCSPによる読み込みエラーはブラウザー側で高速に行われるため、<code>error</code>イベントでエラーになるまでの時間を調査することで通常の読み込みエラーと識別できる。</p>

<p>だいたいこのような仕組みのようだ。HSTSの仕組みでどうにかするのは難しそうなので、CSP側で……ということになりそう。いずれにせよHTTPS化が一気に進みそうになる前になんとか解決されると良いなと思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>MediumのPublication Page</title>
      <link>https://hail2u.net/blog/internet/medium-pulication-page.html</link>
      <description>少し前からMediumに記事をミラーし始め、うまく動いているようだ。個人アカウントは個人アカウントとして扱いたい感じもするので、midueM no ten.u2liaHという名前でPublication Pageを作ってそこに置くという形にした。</description>
      <category>Internet</category>
      <guid isPermaLink="true">https://hail2u.net/blog/internet/medium-pulication-page.html</guid>
      <pubDate>Wed, 28 Oct 2015 20:23:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="https://medium.com/muidem-no-ten-u2liah"><img alt="Start Your Own Publication" height="1440" src="https://hail2u.net/images/blog/medium-publication-page.png" width="2560"></a>
</figure>


<p>少し前からMediumに記事をミラーし始め、うまく動いているようだ。個人アカウントは個人アカウントとして扱いたい感じもするので、<a href="https://medium.com/muidem-no-ten-u2liah">midueM no ten.u2liaH</a>という名前で<a href="https://medium.com/help-center/publications-d23372baede0">Publication Page</a>を作ってそこに置くという形にした。</p>

<p>Publication Pageは本来は複数の人からの記事を集め、雑誌的なものを構築するために使うようだ。元々Collectionと呼ばれていたものがブラッシュアップされて名前を変えたもという話だった。雑誌を視野に入れているからか、見た目のデザインはかなりの感じで色々できる。CSSの知識が不要で（CSSはまったく使えない）それなりにゴリゴリいじることができ、よくできているなと感心する。このウェブサイトのPulication Pageではセクションを2つ作って、上に固定表示したい記事を1つ、その下に時系列順で3つとしておいた。</p>

<p>記事ごとに高解像度の画像を必ず用意するような人は、セクションの設定のいじりがいがありそうだ。Show stroy info over the imageへ切り替えると画像の上にタイトルが乗るようになり、おさまりが非常に良くなる。またNo margin between stroriesへ切り替えると、画面幅いっぱいに画像が使われるようになり、その配置も表示する記事数によりダイナミックに切り替わる。どちらもGridレイアウトにすることでしか使えないが、かなり良いので色々いじってみると良い。</p>

<p>ただページのロゴやアイコン画像へのアクセスがかなり悪い。右上にある「‹」のアイコンからサイドバーを出すと、色々変えられる設定画面が出てくる。カスタマイズ結果の保存もここにあり、Saveすることでカスタマイズ結果を保存することができる。全体的にすごく色がすごく薄いので見づらいとも感じた。不具合っぽい挙動もちらほらあった。</p>

<hr>

<p>能動的な公式アナウンスと雑記などが中心のブログ、受動的な活動の報告など、ウェブサイトの規模やジャンルにもよるが、更新が必要なページは概ねいくつかのカテゴリーに分けられる。それをそれぞれ別のMediumアカウントで投稿し、最終的にPublication Pageでまとめるというようなアプローチはうまく使えば便利に運用できそうだ。</p>

<p>このアプローチの良い点は、例えばとある会社のPublication Pageへ社員として投稿しつつ、自分のMediumは自分で管理できるというところかな、と思う。会社を辞めたとしても自分のMediumアカウントを閉鎖する必要もないし、記事を消す必要もない。その一方で消す必要があったら自分の意志で消せるし、会社側もPublication Pageからは消すことができる。責任の範囲がクロスオーバーしておらず、うまく分担されているような印象だ。</p>

<p>単に記事を書く場としてはTumblrのようなものやWordPress.comのようなものと比較してしまうとアピール力に劣るが、Publication Pageのような投稿全体の管理をしなくても良い複数のブログ的な何かの管理システムとするとアピールできそうと感じた。独自ドメインもちゃんと使うことができるようになるそうなので、そういう点でも考慮する価値はありそうだ。</p>

<p>はてなブログでも企業向けにはそういうものを提供していそうな雰囲気があり、クラウドCMS的なものの未来はこの辺りに収束していくのかもしれない。</p>

<hr>

<p>Medium以外にも引き続き、</p>

<ul>
<li><a href="https://hail2u.net/feed">RSS</a></li>
<li><a href="https://twitter.com/hail2unet">Twitter</a></li>
<li><a href="https://www.facebook.com/hail2u.net">Facebook</a></li>
<li><a href="http://u2liah.tumblr.com/">Tumblr</a></li>
</ul>

<p>も提供しているので、好きなもので読むと良い。</p>]]></content:encoded>
    </item>
    <item>
      <title>ファイル記述子がfs.readFile()等でサポートへ</title>
      <link>https://hail2u.net/blog/coding/file-descriptor-support-in-fs-file-functions.html</link>
      <description>Node.js v5のリリース案を見ていたところ、fs.readFile()等の第一引数でファイル記述子（file descriptor）がサポートされるようになるようだ。便利極まりない/dev/stdinなどがない環境（Windowsとか）で標準入出力の読み込みが簡単になるのかなと想像している。</description>
      <category>Coding</category>
      <guid isPermaLink="true">https://hail2u.net/blog/coding/file-descriptor-support-in-fs-file-functions.html</guid>
      <pubDate>Tue, 27 Oct 2015 02:28:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/nodejs/node/pull/3466">Node.js v5のリリース案</a>を見ていたところ、<code>fs.readFile()</code>等の第一引数でファイル記述子（file descriptor）がサポートされるようになるようだ。便利極まりない<code>/dev/stdin</code>などがない環境（Windowsとか）で標準入出力の読み込みが簡単になるのかなと想像している。</p>

<p>今までは標準入力を一気読みしようとするとこのようなコードを書く必要があった。</p>

<pre><code>var fs = require(&quot;fs&quot;);

var fd = process.stdin.fd;
var len = fs.fstatSync(fd).size;
var buf = new Buffer(len);
var input = buf.toString(&quot;utf8&quot;, 0, fs.readSync(fd, buf, 0, len, 0));
</code></pre>

<p>もちろんこれと同じことをやってくれる便利パッケージがいっぱいあるので、それらのうちのどれかを使えば良いという話ではある。しかし<code>/dev/stdin</code>を読むくらい手軽に読む手段が標準モジュールでできるときっとうれしいはずだ。</p>

<pre><code>var fs = require(&quot;fs&quot;);

var input = fs.readFileSync(process.stdin.fd, &quot;utf8&quot;);
</code></pre>

<p>ソースを読んだ限りでは、ファイル記述子サポートの実装は上記コードと同じように見えた。そのため、このような簡単なコードで標準入力を一気に読めるという風に理解しているが、実際にはどうなるのだろう。こうなったらとてもうれしい。</p>

<section>
<h2>追記</h2>

<p>Node.js v5がリリースされたので、上記コードで簡単な確認を行ったところ、ちゃんとWindowsで標準入力が一気に読めた。標準入力の一気読みには今後これで良いようだ。</p>
</section>]]></content:encoded>
    </item>
    <item>
      <title>サブディレクトリ－をgh-pagesへ向ける運用</title>
      <link>https://hail2u.net/blog/software/pointing-sub-directory-to-gh-pages.html</link>
      <description>gh-pagesブランチの管理にはいくつか手法はあると思うのだけど、決定版はなさそうに思える。まともにやるとするとsubtreeを使うのが良さそうだが、パワフルすぎて役不足な印象だ。僕は公開するファイル群を吐くサブディレクトリーをmasterからは無視しつつ、gh-pagesブランチではそのサブディレクトリーをルートにするみたいな運用に落ち着きつつある。</description>
      <category>Software</category>
      <guid isPermaLink="true">https://hail2u.net/blog/software/pointing-sub-directory-to-gh-pages.html</guid>
      <pubDate>Mon, 26 Oct 2015 14:01:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><code>gh-pages</code>ブランチの管理にはいくつか手法はあると思うのだけど、決定版はなさそうに思える。まともにやるとすると<a href="https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt">subtree</a>を使うのが良さそうだが、パワフルすぎて役不足な印象だ。僕は公開するファイル群を吐くサブディレクトリーを<code>master</code>からは無視しつつ、<code>gh-pages</code>ブランチではそのサブディレクトリーをルートにするみたいな運用に落ち着きつつある。</p>

<pre>example.com/
├ dist/
│ └ index.html
├ src/
│ └ index.mustache
├ .gitignore
├ index.js
└ package.json
</pre>

<p>Node.jsで<code>index.js</code>を使って<code>src/index.mustache</code>を処理し、<code>dist/index.html</code>を吐くという形だ。ルートでは<code>.gitignore</code>で<code>dist/</code>を無視し、普通に<code>origin</code>を追加しておく。<code>dist/</code>で改めて<code>git init</code>し、ルートと同じ<code>origin</code>を追加しつつブランチは<code>gh-pages</code>に向くようにしておく。</p>

<p>サブディレクトリーではファイルの更新と追加、削除しか起こらないので、機械的に以下のようなコマンドを発行するのみでGitHub Pagesが更新できる。</p>

<pre><samp>$ <kbd>cd dist/ &amp;&amp; git add --all &amp;&amp; git commit -m &quot;Build&quot; &amp;&amp; git push origin gh-pages</kbd>
</samp></pre>

<ul>
<li>subtreeのような特殊な知識を必要としない</li>
<li><code>gh-pages</code>ブランチへ切り替える作業が必要ない</li>
<li><code>dist/</code>サブディレクトリーでルートのnpmスクリプトを使える</li>
<li><code>gh-pages</code>ブランチに不必要なファイルとログが含まれない</li>
</ul>

<p>このあたりがメリットと考えて使っている。</p>

<p>デメリットとしては<code>gh-pages</code>ブランチをまとめて<code>push</code>することがGitからはできないので、npmスクリプトなどでまとめて<code>push</code>する手法を編み出す必要があることが挙げられる。他にも2回<code>clone</code>しないと他のPCに作業環境を作れないことあたりもなかなか厳しそうだ。</p>

<p>ここに至って通常はsubtreeに落ち着く理由がようやくわかった。つまり複数の人間が触る環境だと、何よりも<code>clone</code>のしやすさが重要になるということだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>Mediumへの配信</title>
      <link>https://medium.com/muidem-no-ten-u2liah</link>
      <pubDate>Fri, 23 Oct 2015 05:07:39 +0900</pubDate>
      <guid isPermaLink="true">https://medium.com/muidem-no-ten-u2liah</guid>
      <description><![CDATA[<p>このウェブサイトへの投稿を<a href="https://medium.com/muidem-no-ten-u2liah">Mediumのpublication page</a>へも同時に配信するようにしました。</p>]]></description>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>https://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">https://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>https://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">https://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <lastBuildDate>Thu, 05 Nov 2015 12:35:00 +0900</lastBuildDate>
  </channel>
</rss>
