<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule">
  <channel>
    <description>幅広い話題の記事や、おすすめのウェブページ、読んだ本などを公開している、ながしまきょう(hail2u)の個人ウェブサイトです。CSSや、HTML、ウェブ標準についての話題が多く、JavaScriptやサーバーサイドの話がそれに続きます。近年は特に話題を限定せずにいろいろ書いています。</description>
    <link>https://hail2u.net/</link>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <title>Hail2u</title>
    <atom:link href="https://hail2u.net/feed" rel="self" type="application/rss+xml"/>
    <creativeCommons:license>https://creativecommons.org/licenses/by/4.0/</creativeCommons:license>

      <item>
        <description><![CDATA[CSSでの抽象化はコミュニケーションと相互運用性の解決手段なので、力技で乗り越えられる現在は「脱抽象化CSS」みたいなその場しのぎコードが降ってくるため、それを修正するために仕様と実装を読もうみたいな雑談をしていた]]></description>
        <guid>https://hail2u.net/statuses/#1742965242224</guid>
        <link>https://hail2u.net/statuses/#1742965242224</link>
        <pubDate>Wed, 26 Mar 2025 14:00:42 +0900</pubDate>
        <title><![CDATA[CSSでの抽象化はコミュニケーションと相互運用性の解決手段なので、力技で乗り越えられる現在は「脱抽象化CSS」みたいなその場しのぎコードが降ってくるため、それを修正するために仕様と実装を読もうみたいな雑談をしていた]]></title>
        
      </item>
      <item>
        <description><![CDATA[GitHubはログインしないと検索できないのか、bot対策とかなのかな]]></description>
        <guid>https://hail2u.net/statuses/#1742958744619</guid>
        <link>https://hail2u.net/statuses/#1742958744619</link>
        <pubDate>Wed, 26 Mar 2025 12:12:24 +0900</pubDate>
        <title><![CDATA[GitHubはログインしないと検索できないのか、bot対策とかなのかな]]></title>
        
      </item>
      <item>
        <description><![CDATA[カラー・スキームへの反応を指示するcolor-schemeは、metaタグとCSSプロパティーのどちらでも定義できる。しかし、CSSプロパティーとして書いてしまうと、HTMLのレンダリング開始が速すぎる場合、FOUCのように一瞬白くなることがある。そのためmetaタグの方が安全なようだ。このウェブサイトでもCSSに書くように変えてから、ちょくちょくフラッシュしていた。今はもうmetaタグに戻している。]]></description>
        <guid>https://hail2u.net/blog/2025-03-26.html</guid>
        <link>https://hail2u.net/blog/2025-03-26.html</link>
        <pubDate>Wed, 26 Mar 2025 11:28:47 +0900</pubDate>
        <title><![CDATA[metaタグのcolor-schemeとCSSのcolor-schemeプロパティー]]></title>
        <content:encoded><![CDATA[<p>カラー・スキームへの反応を指示する<code>color-scheme</code>は、<code>meta</code>タグとCSSプロパティーのどちらでも定義できる。しかし、CSSプロパティーとして書いてしまうと、HTMLのレンダリング開始が速すぎる場合、<a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a>のように一瞬白くなることがある。そのため<code>meta</code>タグの方が安全なようだ。このウェブサイトでもCSSに書くように変えてから、ちょくちょくフラッシュしていた。今はもう<code>meta</code>タグに戻している。</p>

<p>仕様をよく読むと、やや機能が違うこともわかってくる。<code>color-scheme</code>プロパティーはコンポーネントで挙動を変えたい時だけ使うことになりそうだ。他にはSVG画像で使っても良いだろう。SVGファビコンなど、単独で利用される場合は必要になる。</p>

<hr>

<p>まだあまり使われていない<code>color-scheme</code>プロパティーは、その機能に混乱があるように思う。たまに以下のようなコードを見る。このような書き方でも期待通りになるが、冗長だろう。</p>

<pre><code class="language-css">:root {
  color-scheme: light;
}

@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
  }
}</code></pre>

<p><a href="https://www.w3.org/TR/css-color-adjust-1/#color-scheme-prop"><code>color-scheme</code>プロパティー</a>は、どのカラー・スキームでレンダリングするように設計されているかを示すものだ。両対応しているのなら以下のように書くだけで済む。</p>

<pre><code class="language-css">:root {
  color-scheme: light dark;
}</code></pre>

<hr>

<p>最近になって「ダーク・モード対応を止めた」という記事をちょくちょく見るようになっている。雰囲気を維持することが難しいというような観点は頷ける。手元では消したので、来週くらいにはなくなっていることと思う。</p>]]></content:encoded>
      </item>
      <item>
        <description><![CDATA[色を手作業指定に戻しているけど、ちょっとはcolor-mix()使いたいのでa:visitedで使うか]]></description>
        <guid>https://hail2u.net/statuses/#1742900142984</guid>
        <link>https://hail2u.net/statuses/#1742900142984</link>
        <pubDate>Tue, 25 Mar 2025 19:55:42 +0900</pubDate>
        <title><![CDATA[色を手作業指定に戻しているけど、ちょっとはcolor-mix()使いたいのでa:visitedで使うか]]></title>
        
      </item>
      <item>
        <description><![CDATA[FirefoxのリーダービューのCSSファイル。ちょっと面白いが、技術的負債という感じがある。]]></description>
        <guid>https://github.com/mozilla/gecko-dev/blob/master/toolkit/themes/shared/aboutReader.css</guid>
        <link>https://github.com/mozilla/gecko-dev/blob/master/toolkit/themes/shared/aboutReader.css</link>
        <pubDate>Tue, 25 Mar 2025 18:14:06 +0900</pubDate>
        <title><![CDATA[gecko-dev/toolkit/themes/shared/aboutReader.css]]></title>
        
      </item>
      <item>
        <description><![CDATA[エビのリゾットはうまいけど、作るのが面倒すぎるな]]></description>
        <guid>https://hail2u.net/statuses/#1742892627655</guid>
        <link>https://hail2u.net/statuses/#1742892627655</link>
        <pubDate>Tue, 25 Mar 2025 17:50:27 +0900</pubDate>
        <title><![CDATA[エビのリゾットはうまいけど、作るのが面倒すぎるな]]></title>
        
      </item>
      <item>
        <description><![CDATA[既定のブラウザーがFirefoxなので、ChromeでURLを開きたい場合はスクリプトを書く必要があった。wslviewは関連付けに従って開くため、Chromeが既定のブラウザーでない場合はうまくいかない。Chromeの実行ファイルのパスとURLを引数にしても起動できないという意味だ。書くのはPowerShellでStart-Processするだけのスクリプトだ。]]></description>
        <guid>https://hail2u.net/blog/opening-a-url-with-non-default-browser-from-wsl.html</guid>
        <link>https://hail2u.net/blog/opening-a-url-with-non-default-browser-from-wsl.html</link>
        <pubDate>Tue, 25 Mar 2025 08:44:36 +0900</pubDate>
        <title><![CDATA[WSLからURLを既定ではないブラウザーで開く]]></title>
        <content:encoded><![CDATA[<p>既定のブラウザーがFirefoxなので、ChromeでURLを開きたい場合はスクリプトを書く必要があった。wslviewは関連付けに従って開くため、Chromeが既定のブラウザーでない場合はうまくいかない。Chromeの実行ファイルのパスとURLを引数にしても起動できないという意味だ。書くのはPowerShellで<code>Start-Process</code>するだけのスクリプトだ。</p>

<pre><code class="language-sh">#!/bin/sh

/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe Start-Process -FilePath "\$ENV:USERPROFILE/AppData/Local/Google/Chrome/Application/chrome.exe" -ArgumentList "$1"
</code></pre>

<p>WSLの設定でWindows側の環境変数PATHを追加していないので、パスをベタ書きすることになったが、既定ではPATHが通っているはずなので、省略できるだろう。PowerShellへはWSLでのパス、ChromeへはWindowsでのパスで書く。環境変数を使う場合は「$」をエスケープする。PowerShellを経由しないと、Chromeを終了するまで戻ってこない。cmd経由で<code>start</code>コマンドを使っても可能だが、作業フォルダーに関する警告メッセージが出るので面倒臭い。</p>]]></content:encoded>
      </item>
      <item>
        <description><![CDATA[white-spaceプロパティーのショートハンド版を使うと、今までできなかったpre-lineで自動折り返しは禁止するみたいなのができるのか]]></description>
        <guid>https://hail2u.net/statuses/#1742796622180</guid>
        <link>https://hail2u.net/statuses/#1742796622180</link>
        <pubDate>Mon, 24 Mar 2025 15:10:22 +0900</pubDate>
        <title><![CDATA[white-spaceプロパティーのショートハンド版を使うと、今までできなかったpre-lineで自動折り返しは禁止するみたいなのができるのか]]></title>
        
      </item>
      <item>
        <description><![CDATA[野生のiPhone 16eを見た記念日]]></description>
        <guid>https://hail2u.net/statuses/#1742782780456</guid>
        <link>https://hail2u.net/statuses/#1742782780456</link>
        <pubDate>Mon, 24 Mar 2025 11:19:40 +0900</pubDate>
        <title><![CDATA[野生のiPhone 16eを見た記念日]]></title>
        
      </item>
      <item>
        <description><![CDATA[興が乗って色々いじる。内部に手を入れ、各ページの順序などを定義し、ホームにあるナビゲーションを自動生成できるようにするところから始めた。副作用としてテンプレートがすっきりするなど、良いことが多い。他にローカルにコピーしたNu Html Checkerにパスを通して実行するエイリアスを作り、HTMLファイルをテストするようにもする。あまり速くない。CSSは戻したり、直したり、追加したりだ。]]></description>
        <guid>https://hail2u.net/blog/version-nine-point-thirty-four-point-seven.html</guid>
        <link>https://hail2u.net/blog/version-nine-point-thirty-four-point-seven.html</link>
        <pubDate>Mon, 24 Mar 2025 07:54:00 +0900</pubDate>
        <title><![CDATA[v9.34.7]]></title>
        <content:encoded><![CDATA[<p>興が乗って色々いじる。内部に手を入れ、各ページの順序などを定義し、ホームにあるナビゲーションを自動生成できるようにするところから始めた。副作用としてテンプレートがすっきりするなど、良いことが多い。他にローカルにコピーした<a href="https://github.com/validator/validator/">Nu Html Checker</a>にパスを通して実行するエイリアスを作り、HTMLファイルをテストするようにもする。あまり速くない。CSSは戻したり、直したり、追加したりだ。</p>

<ul>
<li><code>color-scheme</code>プロパティーをやめる</li>
<li>View Transitionsの有効化</li>
<li><code>scrollbar-gutter: stable</code>にして計算を楽にする</li>
<li><code>text-align: justify</code>をまた諦める</li>
<li>ハイパーリンクの色を青寄りに戻し、コントラスト比を上げる</li>
<li>文字色や<code>pre</code>要素の背景色を、背景色から<code>color-mix()</code>関数で生成する</li>
<li>無理やり計算していたサイズを文字または行などで制御する</li>
<li><code>round()</code>関数を使って、文字サイズが整数ピクセルになるようにする</li>
</ul>

<p>他にもあるが、CSSでは主にこのようなことを行う。<code>color-scheme</code>プロパティーとView Transitionsについては別に書こうと思う。両端寄せはやはりというか、5日くらい確認すると受け入れ難い程崩れるところがいくつか見つかってしまうし、日本語ではまだまだ厳しいのかもしれない。ハイパーリンクは緑に寄せるとWCAG 2.1のコントラスト比計算が落ちがちで、それを確保しようとすると、今度は地の文字との識別がやや厳しくなる。やはり青っぽいなら青い方が良いようだ。</p>

<p>View Transitionsや<code>scrollbar-gutter</code>プロパティーは、バグはあっても副作用はほとんどないようなので、リセットやノーマライズに含めても良さそうな気配がある。<code>color-scheme</code>の<code>meta</code>タグも含めて、HTMLやCSSの初期ファイルを更新する良い機会かもしれない。さすがにもうHTML5 BoilerplateやNormalize.cssは使っていないが、かといってそれほど進化してもいない。</p>

<p><code>color-mix()</code>関数の利用はそこそこすんなり進められる。ただし、それで生成される色を<code>getComputedStyle()</code>で拾うと、今までのように<code>rgb()</code>関数で返ってこない。<a href="https://wpt.live/css/css-color/parsing/color-computed-color-mix-function.html">Web Platform Testsの実行結果</a>を見ると、<code>color(srgb ...)</code>だったり、<code>lch(...)</code>だったり、色々だ。色空間への理解が中途半端なので、<a href="https://colorjs.io/">Color.js</a>に頼るしかなさそうだ。</p>

<p><code>round()</code>関数は<code>min()</code>関数を含められないような気がしていた。しかし、寝て、起きて、ご飯を食べて、書き直したらちゃんと含められた。睡眠と食事は大切だ。このウェブサイトでは、主に文字サイズを整数ピクセルにするために利用しているが、割り算の余りが丸められる時のずれを吸収するためにも利用している。</p>]]></content:encoded>
      </item>
  </channel>
</rss>
