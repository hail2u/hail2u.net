<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:lang="ja-JP" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hail2u.net</title>
    <link>http://hail2u.net/</link>
    <description><![CDATA[Hail2u.net is simply a notebook of Kyo Nagashima mainly about web design, programming & their related technologies.]]></description>
    <language>ja-JP</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <atom:link rel="self" href="http://hail2u.net/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
    <item>
      <title>山崎実業 ドアストッパー キューブ（グリーン）</title>
      <link>http://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</link>
      <description>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、山崎実業というところのキューブというものにした。色はグリーンにした。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</guid>
      <pubDate>Fri, 30 Oct 2015 12:39:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="山崎実業 ドアストッパーキューブ グリーン 7108" src="https://images-fe.ssl-images-amazon.com/images/I/31TqLvm7Y1L.jpg"></a>
</figure>

<p>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、<a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22">山崎実業というところのキューブ</a>というものにした。色はグリーンにした。</p>

<p>条件は完全に満たしていて、色もAmazonの画像で見るよりも落ち着いたグリーンで申し分なかった。6cm四方程度とスマホの半分くらいの大きさで、重さも65gと軽量で良い。</p>

<p>ストッパーとしての力はそれなりで、玄関ドアだと力不足だろうけれど、屋内のドアで床が変わった素材でもなければ十分に機能するようだ。フローリングや撥水コートしている床では大丈夫だった。それほど深くグッと差し込まずともドアを止めてくれる。</p>

<p>ネックは価格（購入時は1300円強）だったけど、今は800円を切っていてうらやましい。もうひとつ必要そうだったら色違いを買おうと思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>HTTP Strict Transport SecurityとContent Security Policyを利用した履歴調査</title>
      <link>http://hail2u.net/blog/internet/history-sniffing-with-hsts-and-csp.html</link>
      <description>Content Security Policyを使ってHTTPからしか画像を読み込めないように制限しておき、HTTP Strict Transport Securityを使ってHTTPSへ書き換えようとするウェブサイトのURLをimg要素で読み込ませることで、訪問済みかどうか調べるというSnifflyという手法の実装例を見ていた。HSTSが強制的にHTTPSへ書き換えることが逆にプライバシーを漏えいさせてしまう結果になったのは皮肉だ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/history-sniffing-with-hsts-and-csp.html</guid>
      <pubDate>Thu, 29 Oct 2015 00:46:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>Content Security Policyを使ってHTTPからしか画像を読み込めないように制限しておき、HTTP Strict Transport Securityを使ってHTTPSへ書き換えようとするウェブサイトのURLを<code>img</code>要素で読み込ませることで、訪問済みかどうか調べるという<a href="https://github.com/diracdeltas/sniffly">Sniffly</a>という手法の実装例を見ていた。HSTSが強制的にHTTPSへ書き換えることが逆にプライバシーを漏えいさせてしまう結果になったのは皮肉だ。</p>

<p>HSTSを提供している場合、そのウェブサイトへのアクセスはすべてHTTPSにブラウザー側で書き換えられる。つまりHSTSを提供しているウェブサイトへ訪問済みの場合、そのウェブサイトへHTTPで画像をリクエストしてもHTTPSに書き換わることになる。そうするとCSPでHTTPな画像に制限している場合、必ず読み込みエラーになることになる。</p>

<p>それだけでは普通の読み込みエラーと判別できない。しかしHTTPSへの書き換えとCSPによる読み込みエラーはブラウザー側で高速に行われるため、<code>error</code>イベントでエラーになるまでの時間を調査することで通常の読み込みエラーと識別できる。</p>

<p>だいたいこのような仕組みのようだ。HSTSの仕組みでどうにかするのは難しそうなので、CSP側で……ということになりそう。いずれにせよHTTPS化が一気に進みそうになる前になんとか解決されると良いなと思う。</p>]]></content:encoded>
    </item>
    <item>
      <title>MediumのPublication Page</title>
      <link>http://hail2u.net/blog/internet/medium-pulication-page.html</link>
      <description>少し前からMediumに記事をミラーし始め、うまく動いているようだ。個人アカウントは個人アカウントとして扱いたい感じもするので、midueM no ten.u2liaHという名前でPublication Pageを作ってそこに置くという形にした。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/medium-pulication-page.html</guid>
      <pubDate>Wed, 28 Oct 2015 20:23:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="https://medium.com/muidem-no-ten-u2liah"><img alt="Start Your Own Publication" height="1440" src="http://hail2u.net/images/blog/medium-publication-page.png" width="2560"></a>
</figure>


<p>少し前からMediumに記事をミラーし始め、うまく動いているようだ。個人アカウントは個人アカウントとして扱いたい感じもするので、<a href="https://medium.com/muidem-no-ten-u2liah">midueM no ten.u2liaH</a>という名前で<a href="https://medium.com/help-center/publications-d23372baede0">Publication Page</a>を作ってそこに置くという形にした。</p>

<p>Publication Pageは本来は複数の人からの記事を集め、雑誌的なものを構築するために使うようだ。元々Collectionと呼ばれていたものがブラッシュアップされて名前を変えたもという話だった。雑誌を視野に入れているからか、見た目のデザインはかなりの感じで色々できる。CSSの知識が不要で（CSSはまったく使えない）それなりにゴリゴリいじることができ、よくできているなと感心する。このウェブサイトのPulication Pageではセクションを2つ作って、上に固定表示したい記事を1つ、その下に時系列順で3つとしておいた。</p>

<p>記事ごとに高解像度の画像を必ず用意するような人は、セクションの設定のいじりがいがありそうだ。Show stroy info over the imageへ切り替えると画像の上にタイトルが乗るようになり、おさまりが非常に良くなる。またNo margin between stroriesへ切り替えると、画面幅いっぱいに画像が使われるようになり、その配置も表示する記事数によりダイナミックに切り替わる。どちらもGridレイアウトにすることでしか使えないが、かなり良いので色々いじってみると良い。</p>

<p>ただページのロゴやアイコン画像へのアクセスがかなり悪い。右上にある「‹」のアイコンからサイドバーを出すと、色々変えられる設定画面が出てくる。カスタマイズ結果の保存もここにあり、Saveすることでカスタマイズ結果を保存することができる。全体的にすごく色がすごく薄いので見づらいとも感じた。不具合っぽい挙動もちらほらあった。</p>

<hr>

<p>能動的な公式アナウンスと雑記などが中心のブログ、受動的な活動の報告など、ウェブサイトの規模やジャンルにもよるが、更新が必要なページは概ねいくつかのカテゴリーに分けられる。それをそれぞれ別のMediumアカウントで投稿し、最終的にPublication Pageでまとめるというようなアプローチはうまく使えば便利に運用できそうだ。</p>

<p>このアプローチの良い点は、例えばとある会社のPublication Pageへ社員として投稿しつつ、自分のMediumは自分で管理できるというところかな、と思う。会社を辞めたとしても自分のMediumアカウントを閉鎖する必要もないし、記事を消す必要もない。その一方で消す必要があったら自分の意志で消せるし、会社側もPublication Pageからは消すことができる。責任の範囲がクロスオーバーしておらず、うまく分担されているような印象だ。</p>

<p>単に記事を書く場としてはTumblrのようなものやWordPress.comのようなものと比較してしまうとアピール力に劣るが、Publication Pageのような投稿全体の管理をしなくても良い複数のブログ的な何かの管理システムとするとアピールできそうと感じた。独自ドメインもちゃんと使うことができるようになるそうなので、そういう点でも考慮する価値はありそうだ。</p>

<p>はてなブログでも企業向けにはそういうものを提供していそうな雰囲気があり、クラウドCMS的なものの未来はこの辺りに収束していくのかもしれない。</p>

<hr>

<p>Medium以外にも引き続き、</p>

<ul>
<li><a href="http://hail2u.net/feed">RSS</a></li>
<li><a href="https://twitter.com/hail2unet">Twitter</a></li>
<li><a href="https://www.facebook.com/hail2u.net">Facebook</a></li>
<li><a href="http://u2liah.tumblr.com/">Tumblr</a></li>
</ul>

<p>も提供しているので、好きなもので読むと良い。</p>]]></content:encoded>
    </item>
    <item>
      <title>ファイル記述子がfs.readFile()等でサポートへ</title>
      <link>http://hail2u.net/blog/coding/file-descriptor-support-in-fs-file-functions.html</link>
      <description>Node.js v5のリリース案を見ていたところ、fs.readFile()等の第一引数でファイル記述子（file descriptor）がサポートされるようになるようだ。便利極まりない/dev/stdinなどがない環境（Windowsとか）で標準入出力の読み込みが簡単になるのかなと想像している。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/file-descriptor-support-in-fs-file-functions.html</guid>
      <pubDate>Tue, 27 Oct 2015 02:28:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/nodejs/node/pull/3466">Node.js v5のリリース案</a>を見ていたところ、<code>fs.readFile()</code>等の第一引数でファイル記述子（file descriptor）がサポートされるようになるようだ。便利極まりない<code>/dev/stdin</code>などがない環境（Windowsとか）で標準入出力の読み込みが簡単になるのかなと想像している。</p>

<p>今までは標準入力を一気読みしようとするとこのようなコードを書く必要があった。</p>

<pre><code>var fs = require(&quot;fs&quot;);

var fd = process.stdin.fd;
var len = fs.fstatSync(fd).size;
var buf = new Buffer(len);
var input = buf.toString(&quot;utf8&quot;, 0, fs.readSync(fd, buf, 0, len, 0));
</code></pre>

<p>もちろんこれと同じことをやってくれる便利パッケージがいっぱいあるので、それらのうちのどれかを使えば良いという話ではある。しかし<code>/dev/stdin</code>を読むくらい手軽に読む手段が標準モジュールでできるときっとうれしいはずだ。</p>

<pre><code>var fs = require(&quot;fs&quot;);

var input = fs.readFileSync(process.stdin.fd, &quot;utf8&quot;);
</code></pre>

<p>ソースを読んだ限りでは、ファイル記述子サポートの実装は上記コードと同じように見えた。そのため、このような簡単なコードで標準入力を一気に読めるという風に理解しているが、実際にはどうなるのだろう。こうなったらとてもうれしい。</p>

<section>
<h2>追記</h2>

<p>Node.js v5がリリースされたので、上記コードで簡単な確認を行ったところ、ちゃんとWindowsで標準入力が一気に読めた。標準入力の一気読みには今後これで良いようだ。</p>
</section>]]></content:encoded>
    </item>
    <item>
      <title>サブディレクトリ－をgh-pagesへ向ける運用</title>
      <link>http://hail2u.net/blog/software/pointing-sub-directory-to-gh-pages.html</link>
      <description>gh-pagesブランチの管理にはいくつか手法はあると思うのだけど、決定版はなさそうに思える。まともにやるとするとsubtreeを使うのが良さそうだが、パワフルすぎて役不足な印象だ。僕は公開するファイル群を吐くサブディレクトリーをmasterからは無視しつつ、gh-pagesブランチではそのサブディレクトリーをルートにするみたいな運用に落ち着きつつある。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/pointing-sub-directory-to-gh-pages.html</guid>
      <pubDate>Mon, 26 Oct 2015 14:01:00 +0900</pubDate>
      <content:encoded><![CDATA[<p><code>gh-pages</code>ブランチの管理にはいくつか手法はあると思うのだけど、決定版はなさそうに思える。まともにやるとすると<a href="https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt">subtree</a>を使うのが良さそうだが、パワフルすぎて役不足な印象だ。僕は公開するファイル群を吐くサブディレクトリーを<code>master</code>からは無視しつつ、<code>gh-pages</code>ブランチではそのサブディレクトリーをルートにするみたいな運用に落ち着きつつある。</p>

<pre>example.com/
├ dist/
│ └ index.html
├ src/
│ └ index.mustache
├ .gitignore
├ index.js
└ package.json
</pre>

<p>Node.jsで<code>index.js</code>を使って<code>src/index.mustache</code>を処理し、<code>dist/index.html</code>を吐くという形だ。ルートでは<code>.gitignore</code>で<code>dist/</code>を無視し、普通に<code>origin</code>を追加しておく。<code>dist/</code>で改めて<code>git init</code>し、ルートと同じ<code>origin</code>を追加しつつブランチは<code>gh-pages</code>に向くようにしておく。</p>

<p>サブディレクトリーではファイルの更新と追加、削除しか起こらないので、機械的に以下のようなコマンドを発行するのみでGitHub Pagesが更新できる。</p>

<pre><samp>$ <kbd>cd dist/ &amp;&amp; git add --all &amp;&amp; git commit -m &quot;Build&quot; &amp;&amp; git push origin gh-pages</kbd>
</samp></pre>

<ul>
<li>subtreeのような特殊な知識を必要としない</li>
<li><code>gh-pages</code>ブランチへ切り替える作業が必要ない</li>
<li><code>dist/</code>サブディレクトリーでルートのnpmスクリプトを使える</li>
<li><code>gh-pages</code>ブランチに不必要なファイルとログが含まれない</li>
</ul>

<p>このあたりがメリットと考えて使っている。</p>

<p>デメリットとしては<code>gh-pages</code>ブランチをまとめて<code>push</code>することがGitからはできないので、npmスクリプトなどでまとめて<code>push</code>する手法を編み出す必要があることが挙げられる。他にも2回<code>clone</code>しないと他のPCに作業環境を作れないことあたりもなかなか厳しそうだ。</p>

<p>ここに至って通常はsubtreeに落ち着く理由がようやくわかった。つまり複数の人間が触る環境だと、何よりも<code>clone</code>のしやすさが重要になるということだ。</p>]]></content:encoded>
    </item>
    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20151019.html</link>
      <description>マイナンバーが575になり、簡単に暗謡できるようになる。うっかり口ずさんでしまうと、俳人に依頼して新しい575を詠んでもらう。という冗談がうっかり採用され、なにかの賞の候補に……というところで頑張って起きた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20151019.html</guid>
      <pubDate>Sun, 25 Oct 2015 14:21:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>マイナンバーが575になり、簡単に暗謡できるようになる。うっかり口ずさんでしまうと、俳人に依頼して新しい575を詠んでもらう。という冗談がうっかり採用され、なにかの賞の候補に……というところで頑張って起きた。</p>

<p>涼しくなってぐっすり眠れるようになったからか、またあまり夢を見なくなってきた。</p>]]></content:encoded>
    </item>
    <item>
      <title>calc()内の0</title>
      <link>http://hail2u.net/blog/webdesign/unitless-zero-inside-css-calc-notation.html</link>
      <description>感覚としてcalc(1rem + 1)は明らかにダメそうだとわかるが、なんとなく通りそうに見えるcalc(1rem + 0)もダメになるということをCSSWringへのPRで知った。0ならユニットを省略できることが多いが、calc()内では別のようだ。最初良くわからなかったが、この辺りを定義しているCSS Values and Units Module Level 3仕様でもちゃんとそうなっていた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/unitless-zero-inside-css-calc-notation.html</guid>
      <pubDate>Sat, 24 Oct 2015 13:23:00 +0900</pubDate>
      <content:encoded><![CDATA[<p>感覚として<code>calc(1rem + 1)</code>は明らかにダメそうだとわかるが、なんとなく通りそうに見える<code>calc(1rem + 0)</code>もダメになるということを<a href="https://github.com/hail2u/node-csswring/pull/62">CSSWringへのPR</a>で知った。<code>0</code>ならユニットを省略できることが多いが、<code>calc()</code>内では別のようだ。最初良くわからなかったが、この辺りを定義している<a href="http://www.w3.org/TR/css3-values/">CSS Values and Units Module Level 3仕様</a>でもちゃんとそうなっていた。</p>

<p>仕様では<code>calc()</code>の中身を処理する時に、<a href="http://www.w3.org/TR/css3-values/#calc-type-checking">右辺と左辺の型をチェックすること</a>を求められている。<code>*</code>（乗算）の場合は両辺のどちらかが数字であることが、<code>/</code>（除算）では右辺が数字でありかつ<code>0</code>ではないことが求められる。そして<code>+</code>（加算）と<code>-</code>（減算）では<em>両辺の型が同じである</em>か<em><code>&lt;number&gt;</code>と<code>&lt;integer&gt;</code>の組み合わせである</em>ことが求められる。</p>

<p>問題の<code>calc(1em + 0)</code>は左辺が<code>&lt;length&gt;</code>で右辺が<code>&lt;integer&gt;</code>となる。そのため両辺の型が一致せず文法違反になる。実際に各ブラウザーでもことごとく無視されるようになる。</p>

<hr>

<p>CSSWringではプロパティーの値の中で単位を外せそうな<code>0</code>の長さかパーセンテージを見つけたら問答無用に削除していたため、このバグを作ってしまっていた。PRでは<code>calc()</code>かどうか簡単に探してスキップされるようになっており、これで問題なさそうだったため、ちょっとだけマッチ方法を変えてマージした。そういうわけで<a href="https://github.com/hail2u/node-csswring/releases/tag/v4.1.0">CSSWring v4.1.0</a>では既に修正済みだ。</p>

<hr>

<p>v4.1.0では<code>::before</code>を<code>:before</code>に縮める機能も追加している。すべての擬似要素というわけではなく、以下の4つの擬似要素でのみ1つに縮められる。</p>

<ul>
<li><code>::before</code></li>
<li><code>::after</code></li>
<li><code>::first-line</code></li>
<li><code>::first-letter</code></li>
</ul>

<p>これら以外の擬似要素でコロンを1つにすることは<a href="http://www.w3.org/TR/css3-selectors/#pseudo-elements">セレクターの仕様</a>では許されていない。同時にこれらの擬似要素では後方互換性のために必ずコロン1つでも良いように実装することとなっているので、安全に縮めることが可能だろう。</p>]]></content:encoded>
    </item>
    <item>
      <title>Mediumへの配信</title>
      <link>https://medium.com/muidem-no-ten-u2liah</link>
      <pubDate>Fri, 23 Oct 2015 05:07:39 +0900</pubDate>
      <guid isPermaLink="true">https://medium.com/muidem-no-ten-u2liah</guid>
      <description><![CDATA[<p>このウェブサイトへの投稿を<a href="https://medium.com/muidem-no-ten-u2liah">Mediumのpublication page</a>へも同時に配信するようにしました。</p>]]></description>
    </item>
    <item>
      <title>WEB+DB PRESS Vol.89</title>
      <link>http://hail2u.net/blog/media/wdpress-89.html</link>
      <description>以前記事を書いてより毎号WEB+DB PRESSをいただいているが、感想を書いてなくて申し訳ない。謝罪から始めたが、11/24発売の第89号に載っていた@kazuhoによる速習HTTP/2という記事が非常に良かった。これはフロントエンド側の人からもっとデザイナーよりの人にまでも薦めることのできるHTTP/2の入門記事だと感じた。</description>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/wdpress-89.html</guid>
      <pubDate>Fri, 23 Oct 2015 02:37:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://www.amazon.co.jp/gp/product/4774176389/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774176389&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="WEB+DB PRESS Vol.89" height="500" src="https://images-fe.ssl-images-amazon.com/images/I/61aoxzmo9OL.jpg" width="354"></a>
</figure>

<p>以前記事を書いてより毎号WEB+DB PRESSをいただいているが、感想を書いてなくて申し訳ない。謝罪から始めたが、<a href="http://www.amazon.co.jp/gp/product/4774176389/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=4774176389&linkCode=as2&tag=hail2unet-22">11/24発売の第89号</a>に載っていた<a href="https://twitter.com/kazuho">@kazuho</a>による速習HTTP/2という記事が非常に良かった。これはフロントエンド側の人からもっとデザイナーよりの人にまでも薦めることのできるHTTP/2の入門記事だと感じた。</p>

<p>もう結構な量が観測されるHTTP/2についての記事やページは、やはりサーバーを管理する人やネットワーク知識が豊富な人向けのものが多く、出てくるキーワードからなかなかの敷居の高さを演出してくる。それでも必要ではありそうなので頑張って読むが、もちろん僕をはじめとしたフロントエンド側の人に向けて書かれているわけではないので、ちゃんとは理解できない。それぞれの記事で20%くらいわかるというのを繰り返すことで少しづつ分かってきた……つもりという程度のものだった。この辺りはあまり変わらないのではないかと思う。</p>

<p>記事の内容についてはそれほど長くもない（10ページ）こともあり、特に触れないこととするが、冒頭だけ引用する。</p>

<blockquote>
  <p>本稿では、その背景とHTTP/2の機能、利点、使い方、および今後について解説します。</p>
</blockquote>

<p>まさにこれで、これらが専門的なキーワードのわかりやすい説明とともに書き進められている。この記事を読んだ後、フロントエンド側の人でも自らHTTPS化と同時にHTTP/2化を働きかけるようになるのではないか、というくらいHTTP/2のパワーと可能性を十二分に伝えきっている。</p>

<p>第89号では第一特集でChromeのデベロッパー・ツールを、そして第三特集では様々なフォームの改善方法をそれぞれ取り上げている。そういう意味でもフロントエンド側の人間に多くの学びがある号だと言えるだろう。是非手に取ってみてほしい。</p>]]></content:encoded>
    </item>
    <item>
      <title>画像配置の自動化とその本当の目標</title>
      <link>http://hail2u.net/blog/webdesign/automatic-image-layout-and-its-goal.html</link>
      <description>ウェブページにおいて図であったり飾りであったりする画像の配置はCSSを通して行う。多くの場合はクラスとしてパターン化した配置のひとつを要素に割り当てることで行うわけだが、これを自動化したい。具体的に言えば、画像の縦横サイズやアスペクト比、キャプションの有無に基づいて最適な配置を自動で行い、手作業で要素にクラス名を振らなくて済むようにしたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/automatic-image-layout-and-its-goal.html</guid>
      <pubDate>Thu, 22 Oct 2015 13:11:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <img alt="" height="1254" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-1.png" width="2400">
</figure>

<p>ウェブページにおいて図であったり飾りであったりする画像の配置はCSSを通して行う。多くの場合はクラスとしてパターン化した配置のひとつを要素に割り当てることで行うわけだが、これを自動化したい。具体的に言えば、画像の縦横サイズやアスペクト比、キャプションの有無に基づいて最適な配置を自動で行い、手作業で要素にクラス名を振らなくて済むようにしたい。</p>

<p>紙媒体の場合は物理的な制限があるので、文章が収まるようにレイアウトを決め、それに合うように画像を作成し配置するという形が多い。ウェブページでも同じように行われてきたが、物理的な制限は違う形のもののため、レイアウトは別の形で自由に行えるのではないだろうか。</p>

<figure>
  <img alt="" height="256" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-2.png" width="192">
</figure>

<p>また画像そのものにはその最適解が別にあるはずだ。写っているものの最も良い状態を求めて作成し、配置はその画像で伝えたいことが存分に伝わるように、かつ本文のバランスを崩すことなく配置できると良い。そういった場合には画像ありきで配置が決定できることになるので、自動化することも不可能ではない。</p>

<p>もちろんレイアウトにあわせて画像を調整するべき場合も多い。例えばロゴもそうだし、グローバル・ナビゲーションのアイコンもそうだ。ここでいう配置を自動化したい画像とは、主にブログ記事で使われる画像のようなコンテンツの一部である画像だ。</p>

<p>やたら大きくて横長ならばビューポートいっぱいに配置すると良さそうだし、正方形なら少しサイズを制限して本文の右に浮かせて配置すると良さそうだろう。こういうものはかなりのところまで一般化できるのではないだろうか。横長でも小さい画像なら本文の左に浮かせることができるし、それより少し大きい横長の画像なら本文からちょっと飛び出すような形で配置すると今風かもしれない。</p>

<hr>

<figure>
  <img alt="" height="256" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-3.png" width="256">
</figure>

<p>自動化するといっても最終的にはパターン化した配置のためのクラスをどういう条件の画像へと割り当てるかということに過ぎない。クライアント・サイドで行うと実装は楽そうだが、パフォーマンスは大きく落ちることだろう。読んでいる途中でレイアウトが変化するなどということもありえ、あまりやるべきではなさそうだ。</p>

<p>逆にサーバー・サイドやローカルで行う場合はHTMLをちゃんとパースして行わなければならない。そうでないとレイアウトを制御する<code>img</code>要素のコンテナーへクラスを割り当てるのが難しくなる。親の要素を選択するセレクターがあれば……というところだが、ないものはない。DOMを構築する何らかのライブラリを利用する必要があり、やりたいことに対してかなり大げさとも思える。</p>

<p>実装にはいくつか超えなくてはならないハードルがあるようだ。</p>

<hr>

<figure>
  <img alt="" height="270" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-4.png" width="480">
</figure>

<p>実現するとブログ記事のHTMLソースからクラスやIDを追放できることになるので、保守性が上がりそうだ。もっと大雑把に言えばMarkdownだけでほぼ完全に管理することができるようになるということだ。画像の配置だけでなく、見出しを見つけたらその影響下の要素をまとめてセクションにするような機能もあってよい。</p>

<p>Markdownは便利ではあるが、それだけで書かれたコンテンツはやはり退屈な見た目になりやすい。画像は常に段落と揃って表示されるし、プログラムのコードであろうとシェルの入力例であろうと同じように表示される。もっとこのあたりでコンテンツの内容から判断してプレゼンテーションを工夫する余地はあるはずだ。</p>

<p>例えば次のようなMarkdownテキストを考えてみよう。恣意的な例であることは承知してもらいたい。</p>

<pre><code>&gt; Lorem ipsum dolor sit amet

Fusce tincidunt hendrerit quam. Lorem ipsum dolor sit amet,
consectetur adipiscing elit. Pellentesque fermentum dolor
vel velit ultricies ullamcorper.
</code></pre>

<p>このMarkdownテキストは通常<code>blockquote</code>と<code>p</code>要素に変換される。しかし引用に続く段落を見ると同じ文章が出てきていることがわかるので、この引用は出典もないことであるし、まず間違いなくプル・クォートであると判断できるだろう。となると<code>blockquote</code>要素の代わりに<code>aside</code>要素（<a href="https://html.spec.whatwg.org/multipage/semantics.html#the-aside-element">仕様でもプル・クォートにはこの要素を使うことができると</a>言及されている）を使って変換されるとなお良いと考えられる。</p>

<p>既にこういったコンテンツを考慮したMarkdownのプレゼンテーションを行う仕組みは少ないが存在する。例えばGitHubでは見出しへIDを機械的に振っており、かつそこへジャンプするためのURLを手軽にコピーできるようにもしてある。多くの人が便利に使っていることだろう。</p>

<p>このようにコンテンツを機械的に判断して（content-aware）、適切にマークアップしたり、画像をその大きさや縦横比によって自動配置するような機能を持つツールはもっと出てきても良いはずだ。文章が主で画像が従という今の関係性をもっと<em>コンテンツ</em>という形で平等に扱える（マネージできる）ようなシステムが出てくると、初めてCMSが登場したと言えるのではないだろうか。</p>]]></content:encoded>
    </item>
    <item>
      <title>遅延読み込み用のぼやけた画像</title>
      <link>http://hail2u.net/blog/webdesign/blurred-image-for-lazyload.html</link>
      <description>Mediumでとある記事を高速にスクロールして読んでいたら、さりげなく画像を遅延読み込みしていることを知った。読み込み発火のタイミングがうまいのかあまり遅延読み込みの存在を感じさせないのもすごいと思ったが、プレースホルダ―画像の実装方法が良さそうだった。単純に元の画像を幅30px程度まで小さくしてそれをブラウザーにリサイズさせることでぼやけた画像をプレースホルダ―として表示しているだけだが、十分に機能していそうで目から鱗だった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/blurred-image-for-lazyload.html</guid>
      <pubDate>Wed, 21 Oct 2015 09:20:00 +0900</pubDate>
      <content:encoded><![CDATA[<figure>
  <a href="http://hail2u.net/images/blog/blurred-image-for-lazyload.png"><img alt="617バイトのぼやけたプレースホルダ―画像" height="18" src="http://hail2u.net/images/blog/blurred-image-for-lazyload.png" width="32"></a>
</figure>

<p><a href="https://medium.com/">Medium</a>でとある記事を高速にスクロールして読んでいたら、さりげなく画像を遅延読み込みしていることを知った。読み込み発火のタイミングがうまいのかあまり遅延読み込みの存在を感じさせないのもすごいと思ったが、プレースホルダ―画像の実装方法が良さそうだった。単純に元の画像を幅<code>30px</code>程度まで小さくしてそれをブラウザーにリサイズさせることでぼやけた画像をプレースホルダ―として表示しているだけだが、十分に機能していそうで目から鱗だった。</p>

<p>画像の遅延読み込みはなかなか曲者で、読み込むタイミングやプレースホルダ―としている画像が悪いと大きくユーザーにストレスを与える。プレースホルダ―でよく使われるローディング画像は読み込み中のインジケーターではあるが、同時に何か遅いことをやっていますというネガティブな印象も与えてしまう。ユーザーはローディング画像を見るとスクロールを止めなくてはならないのかと感じることもあるだろう。</p>

<p>Mediumのぼやけた画像はローディング画像のような強い意味を持たないので、ユーザーは無視することができる。そういう点でも優れているが、クオリティなどを考えなくても良いので作りやすいという点も優れている。問題は画像ごとに作成される点だが、Mediumの構成(HTTPS + SPDY/3.1)では無視できそうだ。</p>

<p><a href="https://twitter.com/myakura">@myakura</a>に<a href="https://code.facebook.com/posts/991252547593574/the-technology-behind-preview-photos/">Facebookでも同じ手法で体感速度の向上を狙っていること</a>を教えてもらった。実際にはかなり複雑なことを考えた結果のようだ。どちらが先かはわからないが、想像以上にリーズナブルな手法ではありそうだ。</p>

<hr>

<p>あまり遅延読み込みに良い思い出はないのだけど、必要な機会があったらこの手法を真似て実装したい。</p>]]></content:encoded>
    </item>
    <item>
      <title>“マークアップ”するということ ～ HTML5勧告に寄せて ～</title>
      <link>http://hail2u.net/documents/markup.html</link>
      <pubDate>Sat, 27 Dec 2014 21:02:53 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/markup.html</guid>
      <description><![CDATA[<p>HTMLを適切な要素を使って書いていくことは実はそれほど難しくはない。しかし過剰に要素を使わずに、かつスタイリングすることも意識して、と適切に“マークアップ”するのはなかなかの修練を必要とする。いったい“マークアップ”するということはどういうことなのだろうか、そしてどのような思考の元に行えば良いのだろうか。</p>]]></description>
    </item>
    <item>
      <title>ウェブ・タイポグラフィーのベスト・プラクティス</title>
      <link>http://hail2u.net/documents/web-typography-best-practices.html</link>
      <pubDate>Sun, 28 Sep 2014 00:51:35 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/web-typography-best-practices.html</guid>
      <description><![CDATA[<p><a href="http://www.smashingmagazine.com/2013/05/17/typographic-design-patterns-practices-case-study-2013/">Smashing Magazineによるウェブサイトのタイポグラフィーについての調査</a>をわかりやすくまとめた<a href="http://bootstrapbay.com/blog/web-typography-best-practices/">The All-Inclusive Guide to Web Typography Best Practices</a>の日本語訳です。ベスト・プラクティスになりうる部分のみコンパクトに抽出された参考になる文書だと思います。</p>]]></description>
    </item>
    <item>
      <title>Twitterアカウント</title>
      <link>https://twitter.com/hail2unet</link>
      <pubDate>Thu, 19 Jun 2014 07:15:12 +0900</pubDate>
      <guid isPermaLink="true">https://twitter.com/hail2unet</guid>
      <description><![CDATA[<p>更新情報やブログに公開された記事の他、重要なお知らせを通知するためのTwitterアカウントを作成しました。今まで個人のアカウントでツイートされていたそれらは、今後こちらで行われます。</p>]]></description>
    </item>
    <item>
      <title>安全でアクセシブルなアイコン・フォント</title>
      <link>http://hail2u.net/documents/bulletproof-icon-fonts.html</link>
      <pubDate>Tue, 28 Jan 2014 11:09:52 +0900</pubDate>
      <guid isPermaLink="true">http://hail2u.net/documents/bulletproof-icon-fonts.html</guid>
      <description><![CDATA[<p>アイコン・フォントの安全な実装についての<a href="http://filamentgroup.com/lab/bulletproof_icon_fonts/">Bulletproof Accessible Icon Fonts</a>という記事の日本語訳です。アクセシビリティ上の問題を含め、巷間のアイコン・フォントの現状の課題とその対処についても触れられているので、アイコン・フォントの実装に大いに役に立ってくれるでしょう。</p>]]></description>
    </item>
    <lastBuildDate>Fri, 30 Oct 2015 12:39:00 +0900</lastBuildDate>
  </channel>
</rss>
