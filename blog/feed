<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Sat, 24 Oct 2015 13:24:30 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>calc()内の0</title>
      <link>http://hail2u.net/blog/webdesign/unitless-zero-inside-css-calc-notation.html</link>
      <description>感覚としてcalc(1rem + 1)は明らかにダメそうだとわかるが、なんとなく通りそうに見えるcalc(1rem + 0)もダメになるということをCSSWringへのPRで知った。0ならユニットを省略できることが多いが、calc()内では別のようだ。最初良くわからなかったが、この辺りを定義しているCSS Values and Units Module Level 3仕様でもちゃんとそうなっていた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/unitless-zero-inside-css-calc-notation.html</guid>
      <pubDate>Sat, 24 Oct 2015 13:23:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>感覚として<code>calc(1rem + 1)</code>は明らかにダメそうだとわかるが、なんとなく通りそうに見える<code>calc(1rem + 0)</code>もダメになるということを<a href="https://github.com/hail2u/node-csswring/pull/62">CSSWringへのPR</a>で知った。<code>0</code>ならユニットを省略できることが多いが、<code>calc()</code>内では別のようだ。最初良くわからなかったが、この辺りを定義している<a href="http://www.w3.org/TR/css3-values/">CSS Values and Units Module Level 3仕様</a>でもちゃんとそうなっていた。</p>

<p>仕様では<code>calc()</code>の中身を処理する時に、<a href="http://www.w3.org/TR/css3-values/#calc-type-checking">右辺と左辺の型をチェックすること</a>を求められている。<code>*</code>（乗算）の場合は両辺のどちらかが数字であることが、<code>/</code>（除算）では右辺が数字でありかつ<code>0</code>ではないことが求められる。そして<code>+</code>（加算）と<code>-</code>（減算）では<em>両辺の型が同じである</em>か<em><code>&lt;number&gt;</code>と<code>&lt;integer&gt;</code>の組み合わせである</em>ことが求められる。</p>

<p>問題の<code>calc(1em + 0)</code>は左辺が<code>&lt;length&gt;</code>で右辺が<code>&lt;integer&gt;</code>となる。そのため両辺の型が一致せず文法違反になる。実際に各ブラウザーでもことごとく無視されるようになる。</p>

<hr>

<p>CSSWringではプロパティーの値の中で単位を外せそうな<code>0</code>の長さかパーセンテージを見つけたら問答無用に削除していたため、このバグを作ってしまっていた。PRでは<code>calc()</code>かどうか簡単に探してスキップされるようになっており、これで問題なさそうだったため、ちょっとだけマッチ方法を変えてマージした。そういうわけで<a href="https://github.com/hail2u/node-csswring/releases/tag/v4.1.0">CSSWring v4.1.0</a>では既に修正済みだ。</p>

<hr>

<p>v4.1.0では<code>::before</code>を<code>:before</code>に縮める機能も追加している。すべての擬似要素というわけではなく、以下の4つの擬似要素でのみ1つに縮められる。</p>

<ul>
<li><code>::before</code></li>
<li><code>::after</code></li>
<li><code>::first-line</code></li>
<li><code>::first-letter</code></li>
</ul>

<p>これら以外の擬似要素でコロンを1つにすることは<a href="http://www.w3.org/TR/css3-selectors/#pseudo-elements">セレクターの仕様</a>では許されていない。同時にこれらの擬似要素では後方互換性のために必ずコロン1つでも良いように実装することとなっているので、安全に縮めることが可能だろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>WEB+DB PRESS Vol.89</title>
      <link>http://hail2u.net/blog/media/wdpress-89.html</link>
      <description>以前記事を書いてより毎号WEB+DB PRESSをいただいているが、感想を書いてなくて申し訳ない。謝罪から始めたが、11/24発売の第89号に載っていた@kazuhoによる速習HTTP/2という記事が非常に良かった。これはフロントエンド側の人からもっとデザイナーよりの人にまでも薦めることのできるHTTP/2の入門記事だと感じた。</description>
      <category>Media</category>
      <guid isPermaLink="true">http://hail2u.net/blog/media/wdpress-89.html</guid>
      <pubDate>Fri, 23 Oct 2015 02:37:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/4774176389/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774176389&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="WEB+DB PRESS Vol.89" height="500" src="https://images-fe.ssl-images-amazon.com/images/I/61aoxzmo9OL.jpg" width="354"></a>
</figure>

<p>以前記事を書いてより毎号WEB+DB PRESSをいただいているが、感想を書いてなくて申し訳ない。謝罪から始めたが、<a href="http://www.amazon.co.jp/gp/product/4774176389/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=4774176389&linkCode=as2&tag=hail2unet-22">11/24発売の第89号</a>に載っていた<a href="https://twitter.com/kazuho">@kazuho</a>による速習HTTP/2という記事が非常に良かった。これはフロントエンド側の人からもっとデザイナーよりの人にまでも薦めることのできるHTTP/2の入門記事だと感じた。</p>

<p>もう結構な量が観測されるHTTP/2についての記事やページは、やはりサーバーを管理する人やネットワーク知識が豊富な人向けのものが多く、出てくるキーワードからなかなかの敷居の高さを演出してくる。それでも必要ではありそうなので頑張って読むが、もちろん僕をはじめとしたフロントエンド側の人に向けて書かれているわけではないので、ちゃんとは理解できない。それぞれの記事で20%くらいわかるというのを繰り返すことで少しづつ分かってきた……つもりという程度のものだった。この辺りはあまり変わらないのではないかと思う。</p>

<p>記事の内容についてはそれほど長くもない（10ページ）こともあり、特に触れないこととするが、冒頭だけ引用する。</p>

<blockquote>
  <p>本稿では、その背景とHTTP/2の機能、利点、使い方、および今後について解説します。</p>
</blockquote>

<p>まさにこれで、これらが専門的なキーワードのわかりやすい説明とともに書き進められている。この記事を読んだ後、フロントエンド側の人でも自らHTTPS化と同時にHTTP/2化を働きかけるようになるのではないか、というくらいHTTP/2のパワーと可能性を十二分に伝えきっている。</p>

<p>第89号では第一特集でChromeのデベロッパー・ツールを、そして第三特集では様々なフォームの改善方法をそれぞれ取り上げている。そういう意味でもフロントエンド側の人間に多くの学びがある号だと言えるだろう。是非手に取ってみてほしい。</p>]]></content:encoded>
    </item>

    <item>
      <title>画像配置の自動化とその本当の目標</title>
      <link>http://hail2u.net/blog/webdesign/automatic-image-layout-and-its-goal.html</link>
      <description>ウェブページにおいて図であったり飾りであったりする画像の配置はCSSを通して行う。多くの場合はクラスとしてパターン化した配置のひとつを要素に割り当てることで行うわけだが、これを自動化したい。具体的に言えば、画像の縦横サイズやアスペクト比、キャプションの有無に基づいて最適な配置を自動で行い、手作業で要素にクラス名を振らなくて済むようにしたい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/automatic-image-layout-and-its-goal.html</guid>
      <pubDate>Thu, 22 Oct 2015 13:11:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <img alt="" height="1254" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-1.png" width="2400">
</figure>

<p>ウェブページにおいて図であったり飾りであったりする画像の配置はCSSを通して行う。多くの場合はクラスとしてパターン化した配置のひとつを要素に割り当てることで行うわけだが、これを自動化したい。具体的に言えば、画像の縦横サイズやアスペクト比、キャプションの有無に基づいて最適な配置を自動で行い、手作業で要素にクラス名を振らなくて済むようにしたい。</p>

<p>紙媒体の場合は物理的な制限があるので、文章が収まるようにレイアウトを決め、それに合うように画像を作成し配置するという形が多い。ウェブページでも同じように行われてきたが、物理的な制限は違う形のもののため、レイアウトは別の形で自由に行えるのではないだろうか。</p>

<figure>
  <img alt="" height="256" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-2.png" width="192">
</figure>

<p>また画像そのものにはその最適解が別にあるはずだ。写っているものの最も良い状態を求めて作成し、配置はその画像で伝えたいことが存分に伝わるように、かつ本文のバランスを崩すことなく配置できると良い。そういった場合には画像ありきで配置が決定できることになるので、自動化することも不可能ではない。</p>

<p>もちろんレイアウトにあわせて画像を調整するべき場合も多い。例えばロゴもそうだし、グローバル・ナビゲーションのアイコンもそうだ。ここでいう配置を自動化したい画像とは、主にブログ記事で使われる画像のようなコンテンツの一部である画像だ。</p>

<p>やたら大きくて横長ならばビューポートいっぱいに配置すると良さそうだし、正方形なら少しサイズを制限して本文の右に浮かせて配置すると良さそうだろう。こういうものはかなりのところまで一般化できるのではないだろうか。横長でも小さい画像なら本文の左に浮かせることができるし、それより少し大きい横長の画像なら本文からちょっと飛び出すような形で配置すると今風かもしれない。</p>

<hr>

<figure>
  <img alt="" height="256" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-3.png" width="256">
</figure>

<p>自動化するといっても最終的にはパターン化した配置のためのクラスをどういう条件の画像へと割り当てるかということに過ぎない。クライアント・サイドで行うと実装は楽そうだが、パフォーマンスは大きく落ちることだろう。読んでいる途中でレイアウトが変化するなどということもありえ、あまりやるべきではなさそうだ。</p>

<p>逆にサーバー・サイドやローカルで行う場合はHTMLをちゃんとパースして行わなければならない。そうでないとレイアウトを制御する<code>img</code>要素のコンテナーへクラスを割り当てるのが難しくなる。親の要素を選択するセレクターがあれば……というところだが、ないものはない。DOMを構築する何らかのライブラリを利用する必要があり、やりたいことに対してかなり大げさとも思える。</p>

<p>実装にはいくつか超えなくてはならないハードルがあるようだ。</p>

<hr>

<figure>
  <img alt="" height="270" src="http://hail2u.net/images/blog/automatic-image-layout-and-its-goal-4.png" width="480">
</figure>

<p>実現するとブログ記事のHTMLソースからクラスやIDを追放できることになるので、保守性が上がりそうだ。もっと大雑把に言えばMarkdownだけでほぼ完全に管理することができるようになるということだ。画像の配置だけでなく、見出しを見つけたらその影響下の要素をまとめてセクションにするような機能もあってよい。</p>

<p>Markdownは便利ではあるが、それだけで書かれたコンテンツはやはり退屈な見た目になりやすい。画像は常に段落と揃って表示されるし、プログラムのコードであろうとシェルの入力例であろうと同じように表示される。もっとこのあたりでコンテンツの内容から判断してプレゼンテーションを工夫する余地はあるはずだ。</p>

<p>例えば次のようなMarkdownテキストを考えてみよう。恣意的な例であることは承知してもらいたい。</p>

<pre><code>&gt; Lorem ipsum dolor sit amet

Fusce tincidunt hendrerit quam. Lorem ipsum dolor sit amet,
consectetur adipiscing elit. Pellentesque fermentum dolor
vel velit ultricies ullamcorper.
</code></pre>

<p>このMarkdownテキストは通常<code>blockquote</code>と<code>p</code>要素に変換される。しかし引用に続く段落を見ると同じ文章が出てきていることがわかるので、この引用は出典もないことであるし、まず間違いなくプル・クォートであると判断できるだろう。となると<code>blockquote</code>要素の代わりに<code>aside</code>要素（<a href="https://html.spec.whatwg.org/multipage/semantics.html#the-aside-element">仕様でもプル・クォートにはこの要素を使うことができると</a>言及されている）を使って変換されるとなお良いと考えられる。</p>

<p>既にこういったコンテンツを考慮したMarkdownのプレゼンテーションを行う仕組みは少ないが存在する。例えばGitHubでは見出しへIDを機械的に振っており、かつそこへジャンプするためのURLを手軽にコピーできるようにもしてある。多くの人が便利に使っていることだろう。</p>

<p>このようにコンテンツを機械的に判断して（content-aware）、適切にマークアップしたり、画像をその大きさや縦横比によって自動配置するような機能を持つツールはもっと出てきても良いはずだ。文章が主で画像が従という今の関係性をもっと<em>コンテンツ</em>という形で平等に扱える（マネージできる）ようなシステムが出てくると、初めてCMSが登場したと言えるのではないだろうか。</p>]]></content:encoded>
    </item>

    <item>
      <title>遅延読み込み用のぼやけた画像</title>
      <link>http://hail2u.net/blog/webdesign/blurred-image-for-lazyload.html</link>
      <description>Mediumでとある記事を高速にスクロールして読んでいたら、さりげなく画像を遅延読み込みしていることを知った。読み込み発火のタイミングがうまいのかあまり遅延読み込みの存在を感じさせないのもすごいと思ったが、プレースホルダ―画像の実装方法が良さそうだった。単純に元の画像を幅30px程度まで小さくしてそれをブラウザーにリサイズさせることでぼやけた画像をプレースホルダ―として表示しているだけだが、十分に機能していそうで目から鱗だった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/blurred-image-for-lazyload.html</guid>
      <pubDate>Wed, 21 Oct 2015 09:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.net/images/blog/blurred-image-for-lazyload.png"><img alt="617バイトのぼやけたプレースホルダ―画像" height="18" src="http://hail2u.net/images/blog/blurred-image-for-lazyload.png" width="32"></a>
</figure>

<p><a href="https://medium.com/">Medium</a>でとある記事を高速にスクロールして読んでいたら、さりげなく画像を遅延読み込みしていることを知った。読み込み発火のタイミングがうまいのかあまり遅延読み込みの存在を感じさせないのもすごいと思ったが、プレースホルダ―画像の実装方法が良さそうだった。単純に元の画像を幅<code>30px</code>程度まで小さくしてそれをブラウザーにリサイズさせることでぼやけた画像をプレースホルダ―として表示しているだけだが、十分に機能していそうで目から鱗だった。</p>

<p>画像の遅延読み込みはなかなか曲者で、読み込むタイミングやプレースホルダ―としている画像が悪いと大きくユーザーにストレスを与える。プレースホルダ―でよく使われるローディング画像は読み込み中のインジケーターではあるが、同時に何か遅いことをやっていますというネガティブな印象も与えてしまう。ユーザーはローディング画像を見るとスクロールを止めなくてはならないのかと感じることもあるだろう。</p>

<p>Mediumのぼやけた画像はローディング画像のような強い意味を持たないので、ユーザーは無視することができる。そういう点でも優れているが、クオリティなどを考えなくても良いので作りやすいという点も優れている。問題は画像ごとに作成される点だが、Mediumの構成(HTTPS + SPDY/3.1)では無視できそうだ。</p>

<p><a href="https://twitter.com/myakura">@myakura</a>に<a href="https://code.facebook.com/posts/991252547593574/the-technology-behind-preview-photos/">Facebookでも同じ手法で体感速度の向上を狙っていること</a>を教えてもらった。実際にはかなり複雑なことを考えた結果のようだ。どちらが先かはわからないが、想像以上にリーズナブルな手法ではありそうだ。</p>

<hr>

<p>あまり遅延読み込みに良い思い出はないのだけど、必要な機会があったらこの手法を真似て実装したい。</p>]]></content:encoded>
    </item>

    <item>
      <title>NovaフォントとProフォント他</title>
      <link>http://hail2u.net/blog/software/nova-fonts-pro-fonts-and-others-on-win10.html</link>
      <description>Windows 10ではデフォルトでもいくつか新しいフォントが加わっているが、欧米向けには特別に新たなフォントが提供されている。それらはオプション機能から機能の追加を選択し、ヨーロッパ各国語追加フォントを探してインストールすると使えるようになる。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/nova-fonts-pro-fonts-and-others-on-win10.html</guid>
      <pubDate>Tue, 20 Oct 2015 01:35:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.net/images/blog/nova-fonts-pro-fonts-and-others-on-win10.gif"><img alt="Arial Nova/Georgia Pro/Gill Sans Nova/Neue Haas Grotesk/Rockwell Nova/Verdana Pro" src="http://hail2u.net/images/blog/nova-fonts-pro-fonts-and-others-on-win10.gif"></a>
</figure>

<p>Windows 10ではデフォルトでもいくつか新しいフォントが加わっているが、欧米向けには特別に新たなフォントが提供されている。それらはオプション機能から機能の追加を選択し、<em>ヨーロッパ各国語追加フォント</em>を探してインストールすると使えるようになる。</p>

<ul>
<li style="font-family: Arial Nova, sans-serif">Arial Nova</li>
<li style="font-family: Georgia Pro, serif">Georgia Pro</li>
<li style="font-family: Gill Sans Nova, sans-serif">Gill Sans Nova</li>
<li style="font-family: Neue Haas Grotesk Text Pro, sans-serif">Neue Haas Grotesk</li>
<li style="font-family: Rockwell Nova, serif">Rockwell Nova</li>
<li style="font-family: Verdana Pro, sans-serif">Verdana Pro</li>
</ul>

<p>追加されるのは以上の6ファミリーだ。Novaフォントはウェイトの充実はあるものの正直期待外れで、Neue Haas Groteskも高DPI環境下なら……という程度であまり魅力的ではない。</p>

<p>その一方でGeorgia ProとVerdana Proはかなりのクオリティに感じる。Georgia ProはGeorgiaが元々優れていたためあまり違いは感じないが、見やすさを失わずにヒゲ（セリフ）が鮮明になっている。Verdana Proでも細かいところの修正にとどまっているが、特筆すべきはCondensedバージョンの追加だろう。</p>

<figure>
  <a href="http://hail2u.net/images/blog/verdana-pro-condensed.png"><img alt="Verdanaの読みやすさはそのまま細身に" height="1254" src="http://hail2u.net/images/blog/verdana-pro-condensed.png" width="2400"></a>
  <figcaption>Verdana Pro Condensed</figcaption>
</figure>

<p>近年のディスプレイ解像度に対してはともすれば大振りすぎるVerdanaはその役目を終えてしまったような印象ではあるが、Condensedバージョンなら……と少し感じる。またボールドも均一な太さになり、使いやすくなった。</p>

<hr>

<p>ウェブでもダメ元で<code>font-family: Georgia Pro, Georgia, serif</code>とするのは良さそうだ。一方でArialの代わりにArial Novaとしたり、Helvetica対抗としてNeue Haas Groteskを追加するのは勧められない。</p>]]></content:encoded>
    </item>

    <item>
      <title>VimへのEditorConfigの導入</title>
      <link>http://hail2u.net/blog/software/installing-editorconfig-to-vim.html</link>
      <description>他人のリポジトリーをいじるときだけEditorConfigを使うような仕組みにしていたが、3回ミスして迷惑をかけたので、諦めて常時使用することにした。バイナリーをパスを通ったところに入れて、ediorconfig-vimをインストール……ではすんなり環境を構築できなかった。どうやらWindowsでset shell=shかつset shellslashしてる場合でだけで起こるようだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/installing-editorconfig-to-vim.html</guid>
      <pubDate>Mon, 19 Oct 2015 13:32:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>他人のリポジトリーをいじるときだけ<a href="http://editorconfig.org/">EditorConfig</a>を使うような仕組みにしていたが、3回ミスして迷惑をかけたので、諦めて常時使用することにした。<a href="http://sourceforge.net/projects/editorconfig/">バイナリー</a>をパスを通ったところに入れて、<a href="https://github.com/editorconfig/editorconfig-vim">ediorconfig-vim</a>をインストール……ではすんなり環境を構築できなかった。どうやらWindowsで<code>set shell=sh</code>かつ<code>set shellslash</code>してる場合でだけで起こるようだ。</p>

<p>うまく動かない理由はeditorconfig-vimが内部で<code>setlocal noshellslash</code>しており、それにより<code>sh.exe</code>が解釈できない形（バックスラッシュによるパス区切り）でファイルのパスが渡されることによるものだった。該当箇所をコメントアウトするだけで動くことが確認できたので、イシューを投げておいた。その後テスト環境ないのでPR欲しいと言われたため、Vundleのコードを参考にして直したものも投げておいた。取り込まれれば直ると思う。</p>

<p>また<code>:vimgrep</code>を使うと隠しバッファーとして開いたファイルのすべてでEditorConfigの設定読み込みが行われてしまうので死ぬほど遅くなる。普段は<code>:vimgrep</code>を使わない（<a href="http://hail2u.net/blog/software/using-git-grep-with-vim.html"><code>git grep</code></a>を使っている）ので問題ないが、たまに使おうとするとものすごい遅い。</p>

<pre><code>:noautocmd vimgrep /foo/ **/*
</code></pre>

<p>プラグインを変えるのは影響が大きそうなので、能動的に<code>:noautocmd</code>を付けることで回避するのがよさそうだ。</p>

<hr>

<p>ちゃんと動くまでに大変だったが、ちゃんと動くようになったので、これでもうミスはしないはずだ。ごめんなさい。</p>]]></content:encoded>
    </item>

    <item>
      <title>姓名ジェネレーター</title>
      <link>http://hail2u.net/blog/coding/namegen.html</link>
      <description>必要に迫られてランダムな名前を生成するJavaScriptを書いた。姓が100通り、名が男女50通りずつで、ランダムに組み合わされる。前田さくら、大野亮太、岩崎健太、伊藤悠斗、佐藤智子。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/namegen.html</guid>
      <pubDate>Sun, 18 Oct 2015 18:46:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>必要に迫られて<a href="https://gist.github.com/hail2u/c268787ded82236ecfcf">ランダムな名前を生成するJavaScript</a>を書いた。姓が100通り、名が男女50通りずつで、ランダムに組み合わされる。前田さくら、大野亮太、岩崎健太、伊藤悠斗、佐藤智子。</p>

<p>実際の目標は与えられた任意の姓名へそのフリガナを推測させるというものだった。ジェネレーターを作ったところで、メジャーな姓名なので容易に推測できそうみたいなことに気付いたのだが、難読姓名のジェネレーターはそれはそれで難しそうだ。ということで準備時点で詰まってしまった。</p>

<p>何かには使えるだろうということで記事にしておく。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSSやJSの分割</title>
      <link>http://hail2u.net/blog/webdesign/split-css-and-js.html</link>
      <description>HTTPS化したらやろうと思っていた、CSSファイルとJavaScriptファイルの分割を別ドメインの方で試していた。果たして聞いていたように効果があるのか……と思ったが、利用しているファイルが少なくてよくわからない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/split-css-and-js.html</guid>
      <pubDate>Sat, 17 Oct 2015 02:17:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.net/images/blog/split-css-and-js.png"><img alt="HTTPリクエストがスパパパッと並行に走っている様子" height="1200" src="http://hail2u.net/images/blog/split-css-and-js.png" height="600"></a>
</figure>

<p>HTTPS化したらやろうと思っていた、CSSファイルとJavaScriptファイルの分割を別ドメインの方で試していた。果たして聞いていたように効果があるのか……と思ったが、利用しているファイルが少なくてよくわからない。</p>

<p>CSSファイルのダウンロードが終わってからその中で使われている画像を読み始めるとなると遅いので、画像のプリロードを大量に仕込むようなことも同時に行うと良いのかもしれない。全部やろうとするとHTMLが肥大化し、保守性が落ちるのでクリティカル・レンダリング・パスで使われている画像のみなどと制限を付けるべきだろう。</p>

<hr>

<p>実証実験をそのうちちゃんとやろう。HTTP/2はともかくHTTPSのテスト環境の作り方が皆目見当もつかないので先は長そう。</p>]]></content:encoded>
    </item>

    <item>
      <title>図書館とか</title>
      <link>http://hail2u.net/blog/misc/on-my-local-library.html</link>
      <description>噂の図書館は地元のため、ちょくちょく行っている。行くようになった。色々に色々と書かれていて、それに対して思うところはあるもののうまく書けそうもない。原子力発電所の地元に住んでいる人たちは東日本大震災以降ずっとこんな気持ちだったのかなと少し感じる。もちろんスケールはまったく違うと思うが。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/on-my-local-library.html</guid>
      <pubDate>Fri, 16 Oct 2015 11:20:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>噂の図書館は地元のため、ちょくちょく行っている。行くようになった。色々に色々と書かれていて、それに対して思うところはあるもののうまく書けそうもない。原子力発電所の地元に住んでいる人たちは東日本大震災以降ずっとこんな気持ちだったのかなと少し感じる。もちろんスケールはまったく違うと思うが。</p>

<p>だから書くな！とかいう話ではもちろんない。気をつかって書け！でもない。しかしTwitterででもやれというレベルの伝聞推定の記事が紙媒体で散見されるのはなかなか受け入れがたい。</p>

<p>とにかく来月の11/15が市長選挙である。これ（やもうすぐ開業するららぽーと海老名を中心とした北側の開発計画）を進めた市長について市民の評価が問われることは知っておいてほしいかなと感じる。</p>

<hr>

<p>公式ウェブサイトの<a href="https://ebina.city-library.jp/library/en">英語バージョン</a>が90%英語じゃないのはさっさと直した方が良い。これじゃせいぜい地図を探せる（Accessが伝わるのか知らないけど）くらいで、それ以外はGoogle翻訳を使わせた方がずっと良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>ブックマークのおっかけ</title>
      <link>http://hail2u.net/blog/internet/tracking-bookmarks.html</link>
      <description>ソーシャル・ブックマークはまだそれなりに機能するが、いまだに追いかけるのが難しい。その中ではてなブックマークのお気に入り機能は出色の出来栄えと言えそうだが、やはりブラウザーであのページを見るのは辛い。かといってRSSリーダーで読むのもなかなか難しいと感じる。HBFavは良いものだが、やはりデスクトップでどうにかしたい。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/tracking-bookmarks.html</guid>
      <pubDate>Thu, 15 Oct 2015 10:35:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ソーシャル・ブックマークはまだそれなりに機能するが、いまだに追いかけるのが難しい。その中ではてなブックマークのお気に入り機能は出色の出来栄えと言えそうだが、やはりブラウザーであのページを見るのは辛い。かといってRSSリーダーで読むのもなかなか難しいと感じる。<a href="http://hbfav.bloghackers.net/">HBFav</a>は良いものだが、やはりデスクトップでどうにかしたい。</p>

<p>ストック型では色々試した末にはてなブックマークのお気に入りRSSから<a href="https://ifttt.com/email_digest">IFTTTのEmail Digest</a>に貯めて毎日深夜に送っておくという形でしばらく落ち着いた。RSSリーダーでお気に入りフィード読むのは本当に苦行だったが、相当マシな気もする。特に気が向かなかったら読まずにとっておくこと（未読でプレッシャーかかったりしない）も、捨てることもできる。僕は送る時間を夜中の3時にして余裕のある朝にチェックできるようにしているが、みながウェブページを見てブックマークし終わる午後3時くらいも悪くはない（休み明けに大量に来やすいのには注意が必要）。</p>

<p>ただやはりSlackを使っているならこれかなと思う。個人で管理できて、かつクライアントを問わないというのはかなりのメリットだ。個人でドメインを作って#generalに流すだけで良いし、既読位置もわかるのでストック型のようにも利用できる。Slackの提供するFeedインテグレーションを使っても良さそうだが、シンプルにURLだけ流したかったのでIFTTTを挟んで流している。</p>

<figure>
  <a href="http://hail2u.net/images/blog/favorite-bookmarks-in-slack.png"><img alt="IFTTT経由ではてなブックマークのお気に入りフィードを流す場合、リンクが張られたタイトルと投稿者と投稿日時が表示されるだけのシンプルな形でチャンネルに流すことができる" height="720" src="http://hail2u.net/images/blog/favorite-bookmarks-in-slack.png" width="528"></a>
  <figcaption>Hatena Bookmark on Slack</figcaption>
</figure>

<p>他にGitHub（スターだけ）やDribbble、VimeoなどもRSSリーダーはやめてダラダラとSlackに流し続けるようにしてみたけれど、それはやりすぎだった。少なくともパーソナライズされたものとは非常に相性が良いことがわかったので、うまくチャンネルを分けてミュートしたりすれば良いのではないかと思う。</p>

<hr>

<p>その一方で、もう今やソーシャル・ブックマークという時代ではない感じもあり、このような手段を考えるのも馬鹿々々しいという思いもある。若いウェブデザイナーがはてなブックマークを使っているとも思えないし、その他のソーシャル・ブックマークに至ってはその存在すら知らなそうだ。</p>

<p>本当はそういう人たちのアンテナの先に触れたものが知りたい。きっとそういう人たちもPocketであったり、何かしらの形で読んだウェブページを記録してたりするのだろう。でもそれがRSSのような誰にでもアクセスでき、扱いやすい形で表に出てくることはない。</p>

<hr>

<p>こういう時にウェブは進化してるのか退化してるのかよくわからなくなる。今さらのアプリ化の流れなども含めて、それに違和感を感じることが正しいのかどうかまったく自信が持てない。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
