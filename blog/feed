<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Fri, 25 Sep 2015 12:08:00 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>TIGER サハラマグ MMP-G031</title>
      <link>http://hail2u.net/blog/gadget/tiger-mmp-g031-ww.html</link>
      <description>とにかく軽いマグボトルを探していた。本当はS’wellがかっこいいなと思っていたが、特に軽くもないし、氷を入れられないのは後々絶対に後悔すると考え、やめておいた。最終的に飲み口がないTIGERのサハラマグに決め、白の300mlのものにした。2648円だった。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">http://hail2u.net/blog/gadget/tiger-mmp-g031-ww.html</guid>
      <pubDate>Fri, 25 Sep 2015 12:07:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
  <a href="http://www.amazon.co.jp/gp/product/B013OKRY4W/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B013OKRY4W&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="TIGER 水筒 ステンレスミニボトル 「サハラマグ」 軽量 (夢重力) スノーホワイト 0.3L MMP-G031-WW" src="http://ecx.images-amazon.com/images/I/215%2B-wrhxuL.jpg"></a>
</figure>

<p>とにかく軽いマグボトルを探していた。本当は<a href="http://www.swellbottle.com/">S’well</a>がかっこいいなと思っていたが、特に軽くもないし、氷を入れられないのは後々絶対に後悔すると考え、やめておいた。最終的に飲み口がない<a href="http://www.amazon.co.jp/gp/product/B013OKRY4W/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B013OKRY4W&amp;linkCode=as2&amp;tag=hail2unet-22">TIGERのサハラマグに決め、白の300mlのもの</a>にした。2648円だった。</p>

<p>探していた条件は以下のようなものだった。</p>

<ul>
<li>重さ200g以下</li>
<li>直径8cm以下</li>
<li>高さ20cm以下</li>
<li>容量250ml以上</li>
<li>コップではない</li>
<li>プッシュ栓ではない</li>
<li>飲み口が洗える</li>
<li>白かシルバー</li>
</ul>

<p>この条件に合いそうなものは他にThermosの350mlのものがあるくらい。飲み口が洗えるという条件は、サハラマグを使っている人に聞いたら飲み口がなくても大丈夫だと言ってたのでそれで良しとした。</p>

<hr>

<p>使い勝手の悪いところはなく、するっとした形なのでかばんからも出しやすくて非常に良い。心配していた漏れもない。飲み口がない分、洗う時もさっと洗えるので逆に良かった。色は高級感があるというほどではないが、安っぽいというほどでもない。飲み物を入れても500mlのペットボトルより軽くて気に入っている。</p>]]></content:encoded>
    </item>

    <item>
      <title>vim-css3-syntax v0.15.0</title>
      <link>http://hail2u.net/blog/software/vim-css3-syntax-v0.15.0.html</link>
      <description>俗に言うところのCSS3仕様もずいぶん安定版のものが増えてきた。更新があっても文章上の修正にとどまり、機能自体の追加や更新はあまりない。ある場合はLevel 4モジュールが作られるようになり、Level 3モジュールへは変更が加わらなくなった。ということでCSS Text Module Level 4最初のWDが出た記念に、vim-css3-syntaxのv0.15.0をリリースした。スナップショットの方も動きがあったようで、何かしらの一線を引ける日も近そうだ。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/vim-css3-syntax-v0.15.0.html</guid>
      <pubDate>Wed, 23 Sep 2015 15:29:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>俗に言うところのCSS3仕様もずいぶん安定版のものが増えてきた。更新があっても文章上の修正にとどまり、機能自体の追加や更新はあまりない。ある場合はLevel 4モジュールが作られるようになり、Level 3モジュールへは変更が加わらなくなった。ということでCSS Text Module Level 4最初のWDが出た記念に、<a href="https://github.com/hail2u/vim-css3-syntax/tree/v0.15.0">vim-css3-syntaxのv0.15.0</a>をリリースした。スナップショットの方も動きがあったようで、何かしらの一線を引ける日も近そうだ。</p>

<p>プラグイン名を間違えたな、とここに至って思う。Level 4モジュールを別プラグインに分けても良いのだけど、ユーザーに負担を強いることになるのでやめたほうが良さそうだ。複数管理するの面倒だろうというのもある。vim-css-extra-syntaxとかにさりげなくリネームすればよいのかなと考えているが、それほどのものでもないか。</p>

<hr>

<p>Round Display Moduleは本気なのだろうかという感想しか持てない。Shapes Moduleのバリエーションとして作るべきなんじゃないかなと思うけれど、円形以外が数年以内に出てくるとも思えないので、汎用化して複雑怪奇にしたくないということなのかもしれない。死ぬまで使わない気がしてきた。</p>]]></content:encoded>
    </item>

    <item>
      <title>表のセルにおける少数の行揃え</title>
      <link>http://hail2u.net/blog/webdesign/decimal-alignment-in-table-cell.html</link>
      <description>表のセルでは数字は右揃えにすることが多い。しかし少数を右揃えにすると、小数点以下の桁数が違う時に読みづらくなる。等幅フォントにしてもそれは解決しない。少数点がうまく縦に並ぶように揃えたいわけだ。CSSではtext-alignプロパティーで文字列が指定できるようにしたいようで、いずれ可能になるかもしれない。とされているが、実はHTML4.01の頃からほぼ同じ機能は仕様で定義されているものの実装はないので、期待は薄い……と思ったものの、うっかり実装されていないかどうか確認した。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/decimal-alignment-in-table-cell.html</guid>
      <pubDate>Tue, 22 Sep 2015 11:38:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>表のセルでは数字は右揃えにすることが多い。しかし少数を右揃えにすると、小数点以下の桁数が違う時に読みづらくなる。等幅フォントにしてもそれは解決しない。少数<em>点</em>がうまく縦に並ぶように揃えたいわけだ。CSSでは<a href="https://drafts.csswg.org/css-text-4/#character-alignment"><code>text-align</code>プロパティーで文字列が指定できるようにしたい</a>ようで、いずれ可能になるかもしれない。とされているが、実は<a href="http://www.w3.org/TR/html401/struct/tables.html#h-11.3.2">HTML4.01の頃からほぼ同じ機能は仕様で定義されている</a>ものの実装はないので、期待は薄い……と思ったものの、うっかり実装されていないかどうか確認した。</p>

<p >See also: <a href="http://hail2u.net/pub/test/639.html">Test Page for Decimal Alignment in Table Cell</a></p>

<p>やはりというか<code>&lt;td align=&quot;char&quot; char=&quot;.&quot;&gt;</code>の実装はなかった。ついでに<code>text-align: &quot;.&quot;</code>もテストしてみたが、こちらもまだ実装はない模様だ。テスト・ページでは省いたが、ベンダー拡張プリフィックスでの実装ということもなかった。</p>

<hr>

<p>この小数点での行揃えは前に@ub_pnrと「欲しいね」とか言ってたような記憶がある。それ以外にもどうにかしてそうして欲しいというようなことはよく言われる。じゃあどうするかというと、大体は表で欲しがられ、その表は何かしらのデータから生成されるので、データ側をいじって誤魔化している。</p>

<ol>
<li>データをいじり、小数点以下の最大桁に足りない分半角スペースを追加する</li>
<li>セルのスタイルで以下の3つを指定する<ol>
<li><code>font-family: monospace</code></li>
<li><code>text-align: right</code></li>
<li><code>white-space: pre</code></li>
</ol>
</li>
</ol>

<p>これでなんとか揃う。</p>

<p>今時だと等幅フォントに変える代わりに<code>font-feature-settings</code>プロパティーで<code>tnum &quot;1&quot;</code>するのも良い。このウェブサイトでは<a href="http://hail2u.net/pub/test/639.html">ずいぶん前から試しに設定してみて</a>おり、稀に効果を発揮していた（今は発揮していない）。もちろん対応フォントを上流で使っている必要はあるが、違うフォントを使わずに専用の等幅数字を使えるので、より読みやすい結果となりうる。</p>

<hr>

<p>CSS Text Module Level 4はLevel 3に入れることはできなかったものが寄せ集められている。</p>

<ul>
<li><code>display: inline-block</code>でできる隙間を潰す、<code>text-space-collapse: discard</code></li>
<li>最後の一文字や句読点だけ次の行になったりしなくなる、<code>text-wrap: balance</code></li>
<li>完全なる自動ハイフネーション</li>
<li>日本語の文章内の英単語の前後に空白をはさむ、<code>text-spacing: ideograph-alpha</code></li>
</ul>

<p>などなど、<del>人類</del><ins>ウェブ・デザイナー</ins>の夢が詰まっているので、可及的速やかに実装が出てくるとうれしい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Mobile Safari 8と表のセルのフォント・サイズ</title>
      <link>http://hail2u.net/blog/webdesign/font-size-of-table-cell-on-mobile-safari-8.html</link>
      <description>Mobile Safari 8でフォント・サイズが表のセルでのみおかしくなる現象に遭遇した。条件はセルへwhites-pace: nowrapを指定していることのみのようだ（paddingプロパティーの指定があると再現率が上がる）。手元の環境ではスクリーンショットのように16pxで表示されるはずの表のセルが19pxほどで表示されてしまった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/font-size-of-table-cell-on-mobile-safari-8.html</guid>
      <pubDate>Mon, 21 Sep 2015 11:57:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
  <a href="http://hail2u.net/pub/test/638.html"><img alt="段落と同じフォント・サイズで表示されるはずの表のセルが少し大きめに表示されてしまっている" height="627" src="http://hail2u.net/images/blog/font-size-of-table-cell-on-mobile-safari-8.png" width="1200"></a>
</figure>

<p>Mobile Safari 8でフォント・サイズが表のセルでのみおかしくなる現象に遭遇した。条件はセルへ<code>whites-pace: nowrap</code>を指定していることのみのようだ（<code>padding</code>プロパティーの指定があると再現率が上がる）。手元の環境ではスクリーンショットのように16pxで表示されるはずの表のセルが19pxほどで表示されてしまった。</p>

<p >See also: <a href="http://hail2u.net/pub/test/638.html">Table Font Size on Mobile Safari 8</a></p>

<p>表ではデータの内容を高速にスキャンできるように様々な工夫をすることがある。セル内での改行や行揃えの位置の調節が主なものだろう。折り返しをつぶすのもそのひとつで、「単語」という概念がなく変なところで改行を入れられやすい日本語では使う機会も多い。そういうところで起こるこの現象は困るが、致命的ではないので無視しても良さそうだ。</p>

<p>Mobile Safari 8と書いたがMobile Safari 9でも起こる。Dynamic Typeと呼ばれているiOS側の機能に起因するのではないかと推測している。もうちょっとはっきりさせることができたら改めて報告したい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Sass変数の（ダメそうな）案</title>
      <link>http://hail2u.net/blog/coding/sass-vars-wip.html</link>
      <description>時代はとっくにSass 3.4なのでローカル変数メインにしたいということが前提にある。そうすることで変数名にBEM等のしっかりとした命名規則を使わずに済み、自己言及的な変数名と数文字の変数名でおおむね完結することになる。パーシャル間で共有したい場合はしょうがないので!globalを使ってローカル変数をグローバルへエクスポートするようなあきらめを許容して誤魔化す。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/sass-vars-wip.html</guid>
      <pubDate>Sat, 19 Sep 2015 00:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>時代はとっくにSass 3.4なのでローカル変数メインにしたいということが前提にある。そうすることで変数名にBEM等のしっかりとした命名規則を使わずに済み、自己言及的な変数名と数文字の変数名でおおむね完結することになる。パーシャル間で共有したい場合はしょうがないので<code>!global</code>を使ってローカル変数をグローバルへエクスポートするようなあきらめを許容して誤魔化す。</p>

<p>まずある程度はグローバル変数として定義しておく必要がある。それらグローバル変数は自己言及的なもの（それこそ<code>$color-black: #000;</code>といったようなもの）で、実際にウェブサイトで使われる要素やクラスとは無関係に定義していく。</p>

<pre><code >// _variables.scss
$ratio: 1.7;

$ratio-text: 1;
$ratio-text-large: 1.5;

$line-height-default: $ratio;
</code></pre>

<p>BEMで言うところのブロックのような意味のある単位で切り分けたパーシャルでは、グローバル変数を使いつつ、繰り返し使うならローカル変数を作る。ローカル変数はちゃんとスコープを抜けたら破棄されるので、短い名前で良い。が、ロゴとサイト・ナビゲーションで高さを揃えたいという要件があった場合、ルールセットの最後（他のスコープが始まる<em>前</em>）で<code>!global</code>フラグを使ってグローバル変数へとエクスポートする。</p>

<pre><code >// _logo.scss
.logo {
  $fs: ($ratio-text-large * 1rem);
  $lh: $line-height-default;

  font-size: $fs;
  line-height: $lh;

  <mark>$height-logo: ($lh * $fs) !global;</mark>
}
</code></pre>

<p>サイト・ナビゲーションでは定義済みのグローバル変数を参照するだけだ。</p>

<pre><code >// _site-navigation.scss
.site-navigation {
  height: $height-logo;
}
</code></pre>

<p>こうすると長い変数名を極力減らすことが可能になる。グローバル変数へとエクスポートする時だけ他との衝突が起こりうるので、その時だけ工夫した長い名前を付ける。</p>

<hr>

<p>どうやってもきれいに書けない。変数の命名パターンが3つになるのも死の香りが漂っている。変数を一箇所にまとめることのできるグローバル変数のみ使う手法は書きやすさで優る。ただローカル変数メインで書くと、特定のウィジェットを削除する時にそのファイルを削除するだけで終わりになり、一箇所に変数をまとめた場合にグローバルに定義しておくことになるそのウィジェット向けの変数がゴミとして残らないという保守性での見逃せないメリットがある。</p>

<p>まずは自分のウェブサイトでローカル変数メインに書き換えて運用しはじめた。結論はもうちょっと先になりそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>レスポンシブ・タイポグラフィーなど</title>
      <link>http://hail2u.net/blog/webdesign/on-responsive-typography.html</link>
      <description>ウィンドウや画面のサイズに合わせて文字の大きさを自動的に変更するテクニックは、俗にレスポンシブ・タイポグラフィーまたはフルイド・タイプと呼ばれている。当初は僕も良いアイディアだと思い多用していたが、重要なのはビューポートの大きさではなくデバイスとの距離だろうと思い直したためもうほとんど使うことはない。当初から嫌いといっていた人はこの辺にしっかりとした意識があったのだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/on-responsive-typography.html</guid>
      <pubDate>Thu, 17 Sep 2015 08:46:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ウィンドウや画面のサイズに合わせて文字の大きさを自動的に変更するテクニックは、俗に<a href="http://www.smashingmagazine.com/2015/06/responsive-typography-with-sass-maps/">レスポンシブ・タイポグラフィー</a>または<a href="http://trentwalton.com/2012/06/19/fluid-type/">フルイド・タイプ</a>と呼ばれている。当初は僕も良いアイディアだと思い多用していたが、重要なのはビューポートの大きさではなく<em>デバイスとの距離</em>だろうと思い直したためもうほとんど使うことはない。当初から嫌いといっていた人はこの辺にしっかりとした意識があったのだろう。</p>

<p>使うことをやめた理由は、単純に技術的制約によってユーザーとデバイスの距離を知るすべがないからに過ぎない。レスポンシブ・タイポグラフィーが目指す、適切な文字の大きさを環境ごとに提示することそのものについては正しい考え方であると思う。ただ今利用されている「ビューポートが768px以下なら文字を小さめにする」というようなアバウトな実装だと問題がある。もちろん<code>vw</code>単位を使ったフォント・サイズ指定でも同じだ。</p>

<p>なぜならばデスクトップPCでもそれくらいのビューポートになるようなウィンドウ・サイズでブラウザーを開いているかもしれないからだ。TwitterやFacebookを小さいウィンドウでデスクトップの端に表示しておくことはよくあるだろう。その場合ユーザーとデバイスの距離がある程度あるにもかかわらず文字が小さくなってしまうため、制作者が意図した読みやすさにはならない。iOS 9のアプリ分割表示なども（致命的ではなさそうではあるが）それに類する状況となるかもしれない。</p>

<p>つまり<em>ビューポートの大きさとデバイスとの距離は一貫した関係にない</em>ということだ。これくらいのビューポートならデバイスとの距離はこれくらいだろう、とはならない。つまりそういったギャップを想定していない実装には大きな問題があるということになる。</p>

<hr>

<p>ユーザーとデバイスとの距離を決定付ける要因は以下の4つになるように思う。</p>

<ol>
<li>画面サイズ</li>
<li>タッチ操作可能かどうか</li>
<li>可搬性</li>
<li>重量</li>
<li>設置（利用）場所</li>
</ol>

<p>1と2は今でも知ることができるが、3から5はなかなか難しそうだ。例えば<a href="https://www.microsoft.com/microsoft-surface-hub/ja-jp">Surface Hub</a>のようなものは設置場所（壁か机か）によってユーザーとの距離が大きく変わるデバイスで、デバイスの特定が距離の判定にはつながらない。もちろん普通のSurfaceのようないわゆる2in1も机に置いて使う場合と手で持って使う場合で距離は変化するので、これもまた距離を判定することはできない。</p>

<p>ジャイロ・センサーのようなものがあるなら手に持たれているかどうかは判定可能だと思うので、レスポンシブ・タイポグラフィーは完全な絵空事とまでは言えない。しかし「レスポンシブ」と付くその魅惑的な名前とは裏腹に、今は実装が非常に難しい、またはほとんど不可能なテクニックであると言って良いだろう。</p>

<hr>

<p>どうしても実装したいのならCSSで行うよりもJavaScriptでデバイス（ビューポートではなく）を特定し、ページ読み込み時に一度だけフォント・サイズを設定するというようなやり方が良さそうだ。デフォルトのフォントサイズをベースラインとして提供した上で、なんとかデバイスとの距離を判定することができそうなスマホやデスクトップPCなどのみに限って調整してやるに留めるという形にできるだろう。</p>

<p>パフォーマンスや振る舞いを考えるとCSSで<code>*-device-width</code>を使ってやりたいところだが、画面に直接触れるタブレット機器と触れることのないモバイル・ノートブックPCを同じにみなすことになりかねず、うまくいかないだろう。<a href="http://www.w3.org/TR/mediaqueries-4/#issue-e310bdfa">Media Queries 4で削除される方向</a>で話が進んでいることも避ける理由になる（このあたりの話を聞いた時にデバイスとの距離を参照できる機能が追加されるというような話をどこかで聞いたような気がするが定かではない）。</p>]]></content:encoded>
    </item>

    <item>
      <title>FOUTはプログレッシブ・エンハンスメントだ</title>
      <link>http://hail2u.net/blog/webdesign/fout-is-progressive-enhancement.html</link>
      <description>僕はウェブフォントの実装はFOUTを強いる形がベストだと今のところは考えている。とにかく文章が読める状態をできる限り確保するべきだと思うからだ。だがなかなかFOUTの良さを説明することは難しい。どうしても他の手法の欠点を強調しがちで終わっていた。そういう時にFOUTをプログレッシブ・エンハンスメントととらえて説明するのは良さそうだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/fout-is-progressive-enhancement.html</guid>
      <pubDate>Tue, 15 Sep 2015 08:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
  <a href="https://twitter.com/kay_spiegel/status/643374629176934400"><img alt="FOUT is Progressive Enhancement" height="627" src="http://hail2u.net/images/blog/fout-is-progressive-enhancement.png" width="1200"></a>
</figure>

<p>僕はウェブフォントの実装はFOUTを強いる形がベストだと今のところは考えている。とにかく文章が読める状態をできる限り確保するべきだと思うからだ。だがなかなかFOUTの良さを説明することは難しい。どうしても他の手法の欠点を強調しがちで終わっていた。そういう時に<a href="https://twitter.com/kay_spiegel/status/643374629176934400">FOUTをプログレッシブ・エンハンスメント</a>ととらえて説明するのは良さそうだ。</p>

<p>ウェブフォントの読み込み状況と文書のレンダリング状態を分けてとらえ、前者の状況の変化を後者へと<em>段階的に反映させる</em>というわけだ。そうすることで常に最低限の形で文書が表示されることが担保され、ネットワーク状況の劣悪さにユーザーの読者としての体験が左右されなくなる。</p>

<hr>

<p>このウェブサイトではFOUTに近い形になるようにしているが、ウェブフォントを読み込むためのCSSを非同期に読み込ませているだけだ。<a href="http://www.w3.org/TR/css-font-loading/">CSS Font Loading Module</a>で定義されているウェブ標準APIや<a href="https://github.com/typekit/webfontloader">Web Font Loader</a>は利用しておらず、クラスによる制御もしていない。これはフォントの読み込みを待つのにくらべ実装が簡単な点で大きく勝るが、フォントの読み込みに時間がかかると文字が読めなくなる可能性があるという欠点もある。</p>

<p>その欠点はウェブフォントが500KBを超えるあたりで表面化する。幸い<a href="https://github.com/bramstein/fontloader">CSS Font Loadingのpolyfill</a>がしばらく前に書き直されたようで、まずはこちらに期待すると良さそうだ。その一方で<a href="https://tabatkins.github.io/specs/css-font-display/">ウェブフォントの反映の仕方を制御するためのCSS仕様</a>も提案されているようで、こちらだと更にコストは下がるだろう。未来は明るい。</p>]]></content:encoded>
    </item>

    <item>
      <title>v6.78.0</title>
      <link>http://hail2u.net/blog/webdesign/version-six-point-seventy-eight-point-zero.html</link>
      <description>画像をなくすみたいなことをやっていた（画像をなくしたいわけではない）。あんまり変わってないけれども、画像がなくなると文字の大きさのバリエーションが非常に目立つようになるので、全体的に控えめにしたりもしてた。その過程でいろいろなところで利用していた枠線もほとんどなくなった。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/version-six-point-seventy-eight-point-zero.html</guid>
      <pubDate>Sun, 13 Sep 2015 07:34:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
<a href="http://hail2u.net/images/blog/version-six-point-seventy-eight-point-zero.png"><img alt="v6.78.0" height="627" src="http://hail2u.net/images/blog/version-six-point-seventy-eight-point-zero.png" width="1200"></a>
</figure>

<p>画像をなくすみたいなことをやっていた（画像をなくしたいわけではない）。あんまり変わってないけれども、画像がなくなると文字の大きさのバリエーションが非常に目立つようになるので、全体的に控えめにしたりもしてた。その過程でいろいろなところで利用していた枠線もほとんどなくなった。</p>

<p>黄金比もついにあきらめ<code>1.7</code>まで上げた。<code>line-height</code>プロパティーの値として考えると、ヒラギノでは良くなって、メイリオでは悪くなった。游やNoto Sans JP、M+あたりを想定するとこれも良くなっているので、メイリオのことは忘れたい。</p>

<p>ついでにリンクに使っていたアクセント色をちょっと変えて、リンクでも背景色とのコントラストがWCAG 2 AAに合格するようにもしておいた。数値としては<code>4.67</code>なのでギリギリ合格してるけれど、リンクの視認性そのものは下がったような気がする。これは僕の目が青をうまく見えてないだけかもしれない。</p>

<hr>

<p>最近、紺色の識別率がガクッと落ちてる。ブライトなカラーパレットが推奨されているのは、ウェブにおけるリード・デザイナーの高年齢化が進み、発言力のある彼らに最適化されているのではないだろうか。とか3秒くらい考えた。</p>]]></content:encoded>
    </item>

    <item>
      <title>Drawic v2.11.0</title>
      <link>http://hail2u.net/blog/webdesign/drawic-v2.11.0.html</link>
      <description>Drawicへ使い始めたInstapaperを始めFeedly、CloudFlare、Slackとウェブサービスのアイコンを4つ追加してv2.11.0に更新した。もう#でSlackみたいな感じになっててすごい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/drawic-v2.11.0.html</guid>
      <pubDate>Wed, 09 Sep 2015 06:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
  <a href="http://hail2u.github.io/drawic/"><img alt="Instapaper, Feedly, CloudFlare, and Slack" height="627" src="http://hail2u.net/images/blog/drawic-v2.11.0.png" width="1200"></a>
</figure>

<p><a href="http://hail2u.github.io/drawic/">Drawic</a>へ使い始めた<a href="https://www.instapaper.com/">Instapaper</a>を始め<a href="https://feedly.com/">Feedly</a>、<a href="https://www.cloudflare.com/">CloudFlare</a>、<a href="https://slack.com/">Slack</a>とウェブサービスのアイコンを4つ追加してv2.11.0に更新した。もう#でSlackみたいな感じになっててすごい。</p>

<p>いつの間にやら80個目だ。108個くらいまでは作りたい。その頃にはEPSとかいうフォーマットが絶滅してますように。</p>

<p>あと、こっそりアレをアレしてv2.11.1になってたりもする。</p>]]></content:encoded>
    </item>

    <item>
      <title>丸いチェックボックス</title>
      <link>http://hail2u.net/blog/webdesign/rounded-checkboxes.html</link>
      <description>Checkboxes Are Never Roundという記事を読んでいた。チェックボックスの見た目をちょっと変えて丸くしてしまうと、ラジオボタンとまったく変わらなくなり、ユーザーがその機能に戸惑う可能性があるので、知覚されたアフォーダンスを破壊するという風に読んだ。丸いチェックボックスだけでなく、下線だけのテキスト入力コントロールやクリックしてもフォーカスの移らないラベルなども似た問題を持つ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/rounded-checkboxes.html</guid>
      <pubDate>Sun, 06 Sep 2015 02:48:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://danieldelaney.github.io/checkboxes/">Checkboxes Are Never Round</a>という記事を読んでいた。チェックボックスの見た目をちょっと変えて丸くしてしまうと、ラジオボタンとまったく変わらなくなり、ユーザーがその機能に戸惑う可能性があるので、<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%82%A9%E3%83%BC%E3%83%80%E3%83%B3%E3%82%B9#.E3.83.8E.E3.83.BC.E3.83.9E.E3.83.B3.E3.81.AE.E8.AA.A4.E7.94.A8">知覚されたアフォーダンス</a>を破壊するという風に読んだ。丸いチェックボックスだけでなく、下線だけのテキスト入力コントロールやクリックしてもフォーカスの移らないラベルなども似た問題を持つ。</p>

<p>こういった妙なフォーム・コントロール要素は、実際に操作するまで気づくことはないので、問題として表面化することはなかなかない。そのため作る方が常に意識して避けないとならない。フォーム・コントロール要素の見た目はいじらないくらいに意識しても良い、と僕は考えている。</p>

<p>また、他のプラットフォームのフォーム・コントロール要素に似せたがその持つ機能を完璧に再現出来ていないようなものも同じような意味で問題がある。iOSなどで使われているドラッグできる形式のトグル・ボタンに似せてあっても、ドラッグできないのでは使いやすさという点に大きく疑問が残るだろう。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
