<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Fri, 8 May 2015 00:55:24 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>woff2_compress.exeとwoff2_decompress.exe</title>
      <link>http://hail2u.net/blog/software/woff2_compress.exe-and-woff2_decompress.exe.html</link>
      <description>あるフォント・ファイルをWOFF2フォーマットへ変換するには、現状google/woff2をビルドするしかない。FontSquirrelはかなり優秀ではあるが若干不安定で苦労する。他にもいくつかあるが、大きなファイルを食わせることのできるオンライン・コンバーターは皆無に等しい。ということで2855ee7をクローンして、ビルドし、ローカルで頑張ることにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/woff2_compress.exe-and-woff2_decompress.exe.html</guid>
      <pubDate>Fri, 08 May 2015 00:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>あるフォント・ファイルをWOFF2フォーマットへ変換するには、現状<a href="https://github.com/google/woff2"><code>google/woff2</code></a>をビルドするしかない。<a href="http://www.fontsquirrel.com/">FontSquirrel</a>はかなり優秀ではあるが若干不安定で苦労する。他にもいくつかあるが、大きなファイルを食わせることのできるオンライン・コンバーターは皆無に等しい。ということで<a href="https://github.com/google/woff2/commit/2855ee7b8bf6a46ec3a10f773f358c8c0f808b74"><code>2855ee7</code></a>をクローンして、ビルドし、ローカルで頑張ることにした。</p>

<p>Download: <a href="/pub/woff2_windows_x64.zip">woff2_windows_x64.zip</a></p>

<p>ビルドはそんなに苦労することはないが、Brotliが<code>cc</code>でコンパイルしようとするので工夫が少し必要だった。僕は別のやり方でやったが、<code>gcc.exe</code>をコピーして<code>cc.exe</code>にリネームするという力技でも大丈夫だろう。</p>

<pre><samp>$ <kbd>git clone https://github.com/google/woff2.git</kbd>
$ <kbd>cd woff2</kbd>
$ <kbd>git submodule init</kbd>
$ <kbd>git submodule update</kbd>
$ <kbd><mark>LFLAGS=&quot;--static -s&quot;</mark> make clean all</kbd>
</samp></pre>

<p>ほとんどREADMEと同じだが、静的リンクするための環境変数を設定しつつ<code>make</code>してやる。</p>

<hr>

<p>ここで使っているフォント・ファイルも全て圧縮しなおしたため、少し変わってしまった……。サイズ自体は小さくなったので良しとしよう。</p>

<p>最近はこういったものをビルドするには<a href="http://mingw-w64.yaxm.org/doku.php">MinGW-w64</a>を使っている。パッケージ・マネージャーとかなしの全部入りで配布されており、ガッと入ってピュッと設定してエイヤッと使えるようになる。たまに何かをビルドするだけの人には面倒くさくなくて良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>相対命名ルール</title>
      <link>http://hail2u.net/blog/coding/relative-naming-rules.html</link>
      <description>スケールしていく変数のバリエーションを作る際の命名規則を変えていた。今まではalphaから始めて下にどんどん増やせるようにしていたのだけど、調整コストがかかる。plus1やminus3などとすると無限にスケールできそうだが読みづらい。下に3レベル、上に5レベルくらいまででだいたい足りそうな気がするので、全部で9レベルまで作った。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/relative-naming-rules.html</guid>
      <pubDate>Thu, 07 May 2015 03:45:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/relative-naming-rules.png"><img alt="Minimal, tiny, small, medium, large, huge, gargantuan, enormous, and maximal." src="/images/blog/relative-naming-rules.png"></a>
</figure>

<p>スケールしていく変数のバリエーションを作る際の命名規則を変えていた。今まではalphaから始めて下にどんどん増やせるようにしていたのだけど、調整コストがかかる。plus1やminus3などとすると無限にスケールできそうだが読みづらい。下に3レベル、上に5レベルくらいまででだいたい足りそうな気がするので、全部で9レベルまで作った。</p>

<ol>
<li>Minimal</li>
<li>Tiny</li>
<li>Small</li>
<li>(Medium)</li>
<li>Large</li>
<li>Huge</li>
<li>Gargantuan</li>
<li>Enormous</li>
<li>Maximal</li>
</ol>

<p>Meidumは省略する。下に3レベル、上に5レベルというのは、タイプフェイスのウェイトにおけるバリエーション(100–900)を参考にしている。</p>

<hr>

<p>こういう相対的な命名は一般に悪だと考えられている。実際コーディングにおいて、多くの場合はその通りだ。しかしビジュアル・デザインをコントロールすることになるCSSでだけは事情が変わってくる。えてして「ここはあそこより非常に大きく」や「ここはあそこより少し小さく」などという指示に終わり、それが本質であるととらえることができるからだ。</p>

<p>CSS (とHTML)のみではコンポーネントのクラス名という、俗にセマンティックなクラス名という単位で帰結し、そういった相対的なニュアンスという文脈は埋もれることになるが、CSSプリプロセッサーではそういった曖昧な相対的なニュアンスを変数として定義することが可能であり、かつ必須だろう。</p>

<p>そういった相対的なスケーリングを表現するための一貫した命名規則は重要であるわけだが、多くは場当たり的に`large`だとか`grande`だとか`mini`だとか付けるくらいで終わる。実際には色定義の命名くらい気を使っても良い部分なのではないだろうか。</p>]]></content:encoded>
    </item>

    <item>
      <title>Git for Windows v2.x.xのインストール</title>
      <link>http://hail2u.net/blog/software/install-git-for-windows-v2.html</link>
      <description>Git v2系のWindows版がGit for Windowsの方で少し前から公開され始めていたことを今さら知ったので、更新した。2015/05/05現在はv2.4.0がリリースされている。インストールから動かすまでけっこう手間取ったので、メモがてら記事に残しておく。Git v2の使い勝手とかについては特に書かない。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/install-git-for-windows-v2.html</guid>
      <pubDate>Wed, 06 May 2015 00:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Git v2系のWindows版が<a href="http://git-for-windows.github.io/">Git for Windows</a>の方で少し前から公開され始めていたことを今さら知ったので、更新した。2015/05/05現在はv2.4.0がリリースされている。インストールから動かすまでけっこう手間取ったので、メモがてら記事に残しておく。Git v2の使い勝手とかについては特に書かない。</p>

<h2>~/.bashrcの読み込み</h2>

<p>このGit for Windowsでは、デフォルトで<em>無理やり</em><code>~/.bashrc</code>を読みに行くことがなくなった。<code>~/.bash_profile</code>は読みに行くので、<code>~/.bash_profile</code>から<code>~/.bashrc</code>を読みに行くように、つまり普通にBashを設定してやれば良い。</p>

<pre><code>if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
</code></pre>

<p>これだけ書いた<code>~/.bash_profile</code>を作成するのが良い。<a href="https://github.com/git-for-windows/git/issues/86">あまり関係ないイシュー</a>ではそのうち<code>~/.bash_profile</code>がなかったら作成するようにするというような事を言っているので、これについてはそのうち直りそうだ。</p>

<h2>OpenSSLのアップデート</h2>

<p>様々なコマンドから使われる<code>libeay32.dll</code>が、その読み込み優先順の問題で、システムにインストールされている<code>libeay32.dll</code>を呼びに行ってしまうようだ。もしバージョンが古いOpenSSLが何らかの理由でシステムにインストールされていたりすると、エラーで落ちたりする。僕の場合は<code>git-remote-https.exe</code>が<q>プロシージャ エントリ ポイント EVP_aes_128_ctr がダイナミック リンク ライブラリ LIBEAY32.dll から見つかりませんでした。</q>というエラーで落ち、<code>push</code>や<code>fetch</code>などがまったくできなかった。</p>

<p><code>libeay32.dll</code>がらみでエラーが出る人は、Git for Windows v2.4.0では最新版の1.0.2aを使っているようなので、それと同じものをシステムにインストールするのが良いだろう。インストーラーで配布しているところもあるが、<a href="http://indy.fulgan.com/SSL/">OpenSSLの公式サイトからリンクされているページで配布されているZIPアーカイブ</a>を展開してコピーする方が良い。</p>

<p>64bit版Windowsを使っている人は<code>openssl-1.0.2-x64_86-win64.zip</code>をダウンロードして、展開し、中に入っている<code>libeay32.dll</code>と<code>ssleay32.dll</code>を<code>C:\Windows\System32</code>へコピーする。</p>

<h2>環境変数MSYSTEM</h2>

<p>デフォルトでインストールされるGit Bash (実体はMinTTY)を使う場合は問題ないが、他のターミナルを使うとうまく判定されない事があり、パスが上手く通らないことがあるようだ(ConEmuで上手く通らなかった)。パスの最適化は環境変数<code>MSYSTEM</code>を見て行われるようなので、新規ユーザー環境変数として<code>MSYSTEM</code>を作り、その値を<code>MINGW64</code> (32bit版をインストールした人は<code>MINGW32</code>)に設定してやれば良い。</p>

<p>上記OpenSSLがらみのエラーもこのあたりが怪しいが、Git CMDでも同じエラーでダメだったので、アップデートは必須だと思われる。</p>

<h2>git.exe他、実行ファイル群のパス</h2>

<p>全て一箇所に集約されていたv1系とは違い、多くの実行ファイルがインストール先フォルダーの<code>mingw64/bin/</code>以下に移動した。<code>curl.exe</code>などもここにある。またその他の実行ファイルも<code>usr/bin/</code>に移動されている。<code>bash.exe</code>や<code>vim.exe</code>など、MSYS関係の実行ファイルはこちらにある。</p>

<p>Vimなど他のプログラムから気軽に呼び出したい場合、両者にパスが通っていることが必要になることもあるので、うまいことパスを通す方法を模索する必要がある。僕は<code>~/.vim/vimrc</code>の先頭で無理やり<code>$PATH</code>を最適化してお茶を濁した。</p>

<pre><code>if has(&#39;win32&#39;)
  let $PATH = substitute($PATH, &#39;\\&#39;, &#39;/&#39;, &#39;g&#39;);

  if $PATH !~? &#39;\(^\|;\)C:/git/usr/bin\(;\|$\)&#39;
    let $PATH = &#39;C:/git/usr/bin;&#39; . $PATH
  endif

  if $PATH !~? &#39;\(^\|;\)C:/git/mingw64/bin\(;\|$\)&#39;
    let $PATH = &#39;C:/git/mingw64/bin;&#39; . $PATH
  endif
endif
</code></pre>

<hr>

<p>ちゃんとインストールできた状態だと、HTTPSでの認証もそのまま継承され、ちゃんと<code>push</code>することができた。問題なく動いている。とはいっても特に何もすごく良くなったところもない気がしないでもないので、興味ある人だけいれるのが良いだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>Infield Top Aligned Labelパターン</title>
      <link>http://hail2u.net/blog/webdesign/infield-top-aligned-label-pattern.html</link>
      <description>Why Infield Top Aligned Form Labels are Quickest to Scanという記事を読んだ。Infield Top Aligned Labelとは上記スクリーンショットのように入力ボックス内の上端に置かれたラベルのことだ。記事ではラベルと入力ボックスを上下に並べるごく一般的なパターンとプレースホルダーをラベル代わりにするゴミ大人気のパターンと比較している。確かにわかりやすく、スムーズにフォームを埋められそうな印象を受ける。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/infield-top-aligned-label-pattern.html</guid>
      <pubDate>Tue, 05 May 2015 00:16:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/pub/test/626.html"><img alt="ラベルが入力ボックス内の上端に置かれるパターンの例" src="/images/blog/infield-top-aligned-label-pattern.png"></a>
</figure>

<p><a href="http://uxmovement.com/forms/why-infield-top-aligned-form-labels-are-quickest-to-scan/">Why Infield Top Aligned Form Labels are Quickest to Scan</a>という記事を読んだ。Infield Top Aligned Labelとは上記スクリーンショットのように入力ボックス内の上端に置かれたラベルのことだ。記事ではラベルと入力ボックスを上下に並べるごく一般的なパターンとプレースホルダーをラベル代わりにする<del>ゴミ</del><ins>大人気</ins>のパターンと比較している。確かにわかりやすく、スムーズにフォームを埋められそうな印象を受ける。</p>

<p>記事では紙媒体の書類でもこのようになっていることがよくあり、それがメタファーとして機能することも強く後押しすると書かれており、なるほどと感じた。書類やテスト(もう記憶はあやふやだが)などの詰め々々のフォームにはあまり良い印象はないが、間違いなく慣れてはいるので、わかりづらさとは無縁だろう。それを考えると効果的なラベル・レイアウトだという主張は納得のいくところだ。</p>

<p>とにかくこのような良いデザイン・パターンが広まることで、プレースホルダーをラベル代わりにするパターンが滅亡することを願ってやまない。</p>

<hr>

<p>実際にCSSでデザインする場合にはどうするのが良いのだろうか。まずは複数列のことは考えずに、ただ垂直に並ぶものを最小限に実現してみよう。</p>

<p>View Demo: <a href="/pub/test/626.html">Infield Top Aligned Label</a></p>

<p><code>label</code>要素の子に<code>input</code>要素が来るという普通のマークアップを想定すると、それぞれ<code>display: block</code>するだけでほとんど完成することがわかった。あとは枠線をうまく間引きしたり、余白をうまく調節するだけであっさりとデザインできそうだ。複数列にする場合は<del>テーブル・レイアウト</del><ins>Flexbox</ins>の出番ということになるだろう。</p>

<hr>

<p>そもそもの収まりの良さや実装の容易さも含め、ほとんど欠点らしい欠点が見つからない。強いて欠点を挙げるとすれば<code>fieldset</code>要素とは少し相性が悪そうなので、大きくその見た目を調整する必要があり、それはかなりの茨の道と思われる点だろうか。他にはこれといって欠点はなさそうなので、1カテゴリーで済むようなフォームでは積極的に、そうでない場合もできるだけ使っていきたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>HSTS: HTTP Strict Transport Security</title>
      <link>http://hail2u.net/blog/internet/hsts.html</link>
      <description>強まるHTTPS化の圧力の中で、その移行を円滑に進めるための仕組みであるHTTP Strict Transport Securityについてちょっと調べていた。HTTPでアクセスした際にStrict-Transport-Securityヘッダーがあった場合、その後その指定期間はHTTPでアクセスしようとしてもブラウザー側でHTTPSでアクセスするように処理されるという仕組みだ。HTTPからHTTPSへのリダイレクトが不要になるというわけでもないが、ブラウザー側で処理されることによりよりセキュアにHTTPSへの移行を勧めることができるということだろう。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hsts.html</guid>
      <pubDate>Mon, 04 May 2015 14:04:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>強まるHTTPS化の圧力の中で、その移行を円滑に進めるための仕組みである<a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HTTP Strict Transport Security</a>についてちょっと調べていた。HTTPでアクセスした際に<code>Strict-Transport-Security</code>ヘッダーがあった場合、その後その指定期間はHTTPでアクセスしようとしても<em>ブラウザー側で</em>HTTPSでアクセスするように処理されるという仕組みだ。HTTPからHTTPSへのリダイレクトが不要になるというわけでもないが、ブラウザー側で処理されることによりよりセキュアにHTTPSへの移行を勧めることができるということだろう。</p>

<p>Chrome 42では307 Internal Redirectで処理されるようだ。開発者ツールで確認できる。</p>

<figure>
  <a href="/images/blog/hsts-example.png"><img alt="Chrome 42ではHTTPへアクセスした場合、仕様通りネットワーク・アクセスなしでちゃんとHTTPSへリダイレクトされる" src="/images/blog/hsts-example.png"></a>

  <figcaption>307 Internal Redirect</figcaption>
</figure>

<p>HSTSを利用する際に気をつけることはあまりないが、HTTPSの利用を停止する際には十分な準備期間が必要になる。少なくとも<code>max-age</code>に指定した期間はHTTPSのページを提供していないと、HTTPのページに到達できなくなる。</p>]]></content:encoded>
    </item>

    <item>
      <title>カラーEmojiのテキスト化</title>
      <link>http://hail2u.net/blog/software/un-color-emoji.html</link>
      <description>Emoji (ユニコード絵文字)はOSやフォントによって色々挙動が変わる。その代表的なものがOS XやiOSでのApple Color Emojiによるフルカラーの画像形式だ。概ねこのカラーで画像形式のEmojiはうまく機能するが、稀にテキスト形式である方が都合が良いこともある。そういった場合は異体字セレクターであるU+FE0Eを使うとテキスト形式に変換できる。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/un-color-emoji.html</guid>
      <pubDate>Sun, 03 May 2015 12:21:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Emoji (ユニコード絵文字)はOSやフォントによって色々挙動が変わる。その代表的なものがOS XやiOSでのApple Color Emojiによるフルカラーの画像形式だ。概ねこのカラーで画像形式のEmojiはうまく機能するが、稀にテキスト形式である方が都合が良いこともある。そういった場合は異体字セレクターである<code>U+FE0E</code>を使うとテキスト形式に変換できる。</p>

<p>View Demo: <a href="/pub/test/625.html">Can Un-color?</a></p>

<p>デモはEmojiの一部をリスト化したものだ。それぞれのEmojiには全て<code>&amp;#xFE0E;</code>が追加されている。OS XやiOSのブラウザーで見ると、いくつかのEmojiがテキスト化されていることがわかる。しかし、多くのEmojiは対応がほとんどなされておらず、カラーで画像形式のままだ。それだけならまだ良いが、一部のEmojiは元の文字がわからないようなものへと変換されてしまってもいる。</p>

<p><code>U+FE0E</code>を追加した時の挙動は機種依存と言えるが、私用領域のEmojiを使うこととは違ってユニコード仕様できちんと決まっているものなので、気軽に使っても問題はないだろう。だが思ってもみない文字に変わってしまう可能性があることは頭に入れておき、なるべくなら確認することを心がけるべきではある。</p>]]></content:encoded>
    </item>

    <item>
      <title>Dribbble Highlights of the dayのフィード</title>
      <link>http://hail2u.net/blog/rss/dribbble-highlights-of-the-day-feed.html</link>
      <description>ちょっとした考えがあってパーソナライズされたフィードをフィード・リーダーで読むことをやめはじめた。そこでDribbbleはPopularフィードを読みはじめたのだけど、とてもじゃないけど読める量ではない。Popular以外にも前日に人気のあったショットが9つほどピックアップされるHighlights of the dayというページがあるので、このページからPipesでフィードを作成して読むことにした。</description>
      <category>RSS</category>
      <guid isPermaLink="true">http://hail2u.net/blog/rss/dribbble-highlights-of-the-day-feed.html</guid>
      <pubDate>Sat, 02 May 2015 13:23:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ちょっとした考えがあってパーソナライズされたフィードをフィード・リーダーで読むことをやめはじめた。そこで<a href="https://dribbble.com/">Dribbble</a>はPopularフィードを読みはじめたのだけど、とてもじゃないけど読める量ではない。Popular以外にも前日に人気のあったショットが9つほどピックアップされる<a href="https://dribbble.com/highlights/">Highlights of the day</a>というページがあるので、このページから<a href="http://pipes.yahoo.com/pipes/pipe.info?_id=915d1f1c636a69ccb208488fdbd330b9">Pipesでフィード</a>を作成して読むことにした。</p>

<p>1日に100以上記事が流れてくるPopularと違って、Highlights of the dayだと多くても10記事くらいに抑えられる。そのままだとサムネイルが小さいが、<a href="https://feedly.com/i/subscription/feed/http://pipes.yahoo.com/pipes/pipe.run?_id=915d1f1c636a69ccb208488fdbd330b9&amp;_render=rss">少しいじって大きなものに</a>しておいた。Pipesなのでやはり常に遅延があるけれども、元が前日のダイジェストなので数時間の遅延は問題にならないはずだ。更新も日本時間の9時くらい(UTCで日付が変わる辺りに更新されているようだ)とタイミングが良い。</p>

<hr>

<p>パーソナライズされたフィードはやはり普通のフィード・リーダーで読むのはあまり良くない。流し読みすべきではない記事が多いこともそうだが、情報の収集元としては他のフィードと決定的に佇まいが違うことがもっと大きい。となると専用アプリなのかなと思うけれど、それはそれでまた面倒だったりもする。</p>

<p>今はフィード・リーダーを使い分ける方向で色々模索している。なかなかこれといった解が思いつかない。</p>]]></content:encoded>
    </item>

    <item>
      <title>PostCSSとPromise</title>
      <link>http://hail2u.net/blog/coding/postcss-and-promise.html</link>
      <description>PostCSSのv4.1.0からprocess()などがPromiseを返すようにもなったようだ。Promiseで処理するようにすると、何かのエラーで強制的に例外が吐かれて止まることがなくなり、エラーや警告をまとめて拾えるようになる。つまりPostCSSプロセッサーを連結して処理するツールでは非常に重要な変更だと言えそう。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/postcss-and-promise.html</guid>
      <pubDate>Fri, 01 May 2015 00:44:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/postcss/postcss">PostCSS</a>のv4.1.0から<code>process()</code>などが<a href="https://github.com/postcss/postcss/blob/482281b80031ef15b398b6ce7e6060fd299a1837/API.md#lazyresult-class">Promiseを返すように</a>もなったようだ。Promiseで処理するようにすると、何かのエラーで強制的に例外が吐かれて止まることがなくなり、エラーや警告をまとめて拾えるようになる。つまりPostCSSプロセッサーを連結して処理するツールでは非常に重要な変更だと言えそう。</p>

<p>合わせてプラグインやツール側から警告を渡せるようにもなっている。今まで例外を返していたようなケース(または例外を吐くべきだが止めたくないので握りつぶしていたケース)では、この警告機能を使った方が良いようなことが多そうだ。僕のPostCSSプロセッサー達ではほとんどないが、極稀に<a href="https://github.com/One-com/one-color">one.color</a>に変な色を投げてしまって落ちるバグのアドホックな対応にちゃんと警告を仕込んでやると、そのうちにどんなバグで落ちてるのか正確にわかることにはなりそうだ。</p>

<p>また単機能のツールであっても、Node.jsのスタックトレースの代わりに処理しやすい形(GNU error formatなど)でエラーを出力することが可能になる。活躍の機会はなかなかないと思うが、うまくハマればエディターで自動的にエラー箇所へジャンプとかも可能になることだろう。</p>

<hr>

<p>CSSWringとCSS MQPackerのCLIではCSSのパースエラーをうまいこと表示されるようにしているところだ。だけどイマイチ複数のエラーをきれいに拾って処理する方法がわからず、四苦八苦している。このケースでは最初のパースエラーで止まるのでこれでもまぁ良いと思うのだけど。</p>]]></content:encoded>
    </item>

    <item>
      <title>ESLintの設定継承システム</title>
      <link>http://hail2u.net/blog/software/eslint-configuration-cascading.html</link>
      <description>ESLintのv0.20.0からプロジェクト・ローカルに.eslintrcがある場合は~/.eslintrcから設定を読まなくなった。つまりESLintのデフォルトの設定をユーザー・レベルで調節する術がほぼなくなったと言って良い。そうなった理由はわからないこともないのだけど、改悪な気がしてならない。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/eslint-configuration-cascading.html</guid>
      <pubDate>Thu, 30 Apr 2015 09:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://eslint.org/">ESLint</a>のv0.20.0からプロジェクト・ローカルに<code>.eslintrc</code>がある場合は<code>~/.eslintrc</code>から設定を読まなくなった。つまりESLintのデフォルトの設定をユーザー・レベルで調節する術がほぼなくなったと言って良い。そうなった理由はわからないこともないのだけど、改悪な気がしてならない。</p>

<p>確かにプロジェクト・ローカルの<code>.eslintrc</code>だけしか見ないようにすると、プロジェクト・メンバー間でのコーディング・スタイルが統一しやすくなる。しかしそれはいわゆるフォーマッターの役目で、リンターの役目ではないように思う。リンターの段階でコーディング・スタイルへの準拠を強いられると、普段それと違う書き方をしている人達にものすごいフラストレーションを与えることだろう。</p>

<p>強いられたスタイルのうちいくつかは<a href="http://editorconfig.org/">EditorConfig</a>などの併用により自動的に対応することはできる。その状態で書かれたコードは確かにコーディング・スタイルに沿っているだろうが、普段インデント幅を半角空白2つに設定している人が半角空白4つのインデントを強いられた場合、普段通りの感覚で書くことができるわけがない。つまり成果物の体裁の保証ができる代わりに、その質の保証が失われるという結果になる。</p>

<hr>

<p>とにかくどれくらい辛いのかと、僕は<code>rules</code>フィールドを書かなくて済むように自分を調教する道をあえて選んで色々書いているところだ。率直な感想としてはこれを他の開発者に強いるのはちょっと僕にはできそうもない。</p>

<p>他の開発者との兼ね合いだけではなく、自分だけのプロジェクトの時もいちいち設定してあげなくてはならないことが辛い。そういう場合はプロジェクト・ローカルの<code>.eslintrc</code>を作らなければ良いようにも思えるが、実際にはまだ多くのプロジェクトで<code>env</code>フィールドを使ってNode.js向けかブラウザー向けかを<code>.eslintrc</code>で設定してやる必要があり、そういう運用は難しいだろう。</p>

<hr>

<p>ESLintでは将来的には<a href="https://github.com/eslint/eslint/issues/2302">ウィザードでルールを設定して<code>.eslintrc</code>を吐くこと</a>ができるように考えられているようだ。<code>~/.eslintrc</code>の継承を元に戻して、強いルール付けを課したいプロジェクトではこのウィザードを使って全ルールを出力するというような形がバランスが良いのかなと思う。とにかくリンターとしては良いツールだとは思っているので、プロジェクトごとにルールを柔軟かつ手軽に設定できるようになってほしいものだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>サインアップ・ボタンでログイン</title>
      <link>http://hail2u.net/blog/internet/login-with-signup-button.html</link>
      <description>Google Analyticsで「ログイン」と間違えて「アカウントを作成」というサインアップのボタンを押したところ、それでもログインすることができた。Googleアカウントへログイン済みでAnalyticsアカウントを作成済みだとわかった場合はサインアップのボタンを押してもログインできるようになっているようだ。ログインとサインアップのボタンが横に並んでいると、間違えて違う方を押した結果サインアップ・フォームを見せられてイラッとすることがあるので、うまくできているなと感じた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/login-with-signup-button.html</guid>
      <pubDate>Wed, 29 Apr 2015 10:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://www.google.com/analytics/">Google Analytics</a>で「ログイン」と間違えて「アカウントを作成」というサインアップのボタンを押したところ、それでもログインすることができた。Googleアカウントへログイン済みでAnalyticsアカウントを作成済みだとわかった場合はサインアップのボタンを押してもログインできるようになっているようだ。ログインとサインアップのボタンが横に並んでいると、間違えて違う方を押した結果サインアップ・フォームを見せられてイラッとすることがあるので、うまくできているなと感じた。</p>

<p>別のアカウントを作成したい場合は一旦Googleアカウントからログアウトしなくてはならない。同じGoogleアカウントで複数のAnalyticsアカウントを作成することは出来ないことを考えると、それほど大きな問題ではないとは言えそうだが、アカウントを切り替えるための何らかの動線くらいはあっても良さそうだ。</p>

<p>実際にはGoogleのような大きな括りのアカウントとそれを使ってログインするアプリケーションという組み合わせでしか提供できなそうではある。しかし自動的にログインさせることは無理でも、過去にログインした形跡があればログイン・フォームの方を出すなどは可能だろう。</p>

<p>ユーザーは間違えるものという前提は浸透したと思うが、それへの対応の多くはその間違いの指摘に留まる。間違いをさりげなくフォローする仕組みが提供されるようになるともっと良いインターネットになるはずだ。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
