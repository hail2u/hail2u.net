<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Thu, 15 Oct 2015 10:37:15 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>ブックマークのおっかけ</title>
      <link>http://hail2u.net/blog/internet/tracking-bookmarks.html</link>
      <description>ソーシャル・ブックマークはまだそれなりに機能するが、いまだに追いかけるのが難しい。その中ではてなブックマークのお気に入り機能は出色の出来栄えと言えそうだが、やはりブラウザーであのページを見るのは辛い。かといってRSSリーダーで読むのもなかなか難しいと感じる。HBFavは良いものだが、やはりデスクトップでどうにかしたい。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/tracking-bookmarks.html</guid>
      <pubDate>Thu, 15 Oct 2015 10:35:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ソーシャル・ブックマークはまだそれなりに機能するが、いまだに追いかけるのが難しい。その中ではてなブックマークのお気に入り機能は出色の出来栄えと言えそうだが、やはりブラウザーであのページを見るのは辛い。かといってRSSリーダーで読むのもなかなか難しいと感じる。<a href="http://hbfav.bloghackers.net/">HBFav</a>は良いものだが、やはりデスクトップでどうにかしたい。</p>

<p>ストック型では色々試した末にはてなブックマークのお気に入りRSSから<a href="https://ifttt.com/email_digest">IFTTTのEmail Digest</a>に貯めて毎日深夜に送っておくという形でしばらく落ち着いた。RSSリーダーでお気に入りフィード読むのは本当に苦行だったが、相当マシな気もする。特に気が向かなかったら読まずにとっておくこと（未読でプレッシャーかかったりしない）も、捨てることもできる。僕は送る時間を夜中の3時にして余裕のある朝にチェックできるようにしているが、みながウェブページを見てブックマークし終わる午後3時くらいも悪くはない（休み明けに大量に来やすいのには注意が必要）。</p>

<p>ただやはりSlackを使っているならこれかなと思う。個人で管理できて、かつクライアントを問わないというのはかなりのメリットだ。個人でドメインを作って#generalに流すだけで良いし、既読位置もわかるのでストック型のようにも利用できる。Slackの提供するFeedインテグレーションを使っても良さそうだが、シンプルにURLだけ流したかったのでIFTTTを挟んで流している。</p>

<figure>
  <a href="http://hail2u.net/images/blog/favorite-bookmarks-in-slack.png"><img alt="IFTTT経由ではてなブックマークのお気に入りフィードを流す場合、リンクが張られたタイトルと投稿者と投稿日時が表示されるだけのシンプルな形でチャンネルに流すことができる" src="http://hail2u.net/images/blog/favorite-bookmarks-in-slack.png"></a>
  <figcaption>Hatena Bookmark on Slack</figcaption>
</figure>

<p>他にGitHub（スターだけ）やDribbble、VimeoなどもRSSリーダーはやめてダラダラとSlackに流し続けるようにしてみたけれど、それはやりすぎだった。少なくともパーソナライズされたものとは非常に相性が良いことがわかったので、うまくチャンネルを分けてミュートしたりすれば良いのではないかと思う。</p>

<hr>

<p>その一方で、もう今やソーシャル・ブックマークという時代ではない感じもあり、このような手段を考えるのも馬鹿々々しいという思いもある。若いウェブデザイナーがはてなブックマークを使っているとも思えないし、その他のソーシャル・ブックマークに至ってはその存在すら知らなそうだ。</p>

<p>本当はそういう人たちのアンテナの先に触れたものが知りたい。きっとそういう人たちもPocketであったり、何かしらの形で読んだウェブページを記録してたりするのだろう。でもそれがRSSのような誰にでもアクセスでき、扱いやすい形で表に出てくることはない。</p>

<hr>

<p>こういう時にウェブは進化してるのか退化してるのかよくわからなくなる。今さらのアプリ化の流れなども含めて、それに違和感を感じることが正しいのかどうかまったく自信が持てない。</p>]]></content:encoded>
    </item>

    <item>
      <title>システム・フォントのショートカット</title>
      <link>http://hail2u.net/blog/webdesign/css-system-font-shortcut.html</link>
      <description>システム・フォントのリフレッシュが各OSで進んでいる。かといって無指定の場合はそれらシステム・フォントが利用されるというわけでもない。あまり長いfont-familyプロパティーを書くのは好きではないので、@font-faceで抽象化したい。それを試すついでに、srcデスクリプターで-apple-systemキーワードが利用できるかどうかの確認もした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/css-system-font-shortcut.html</guid>
      <pubDate>Tue, 13 Oct 2015 10:04:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>システム・フォントのリフレッシュが各OSで進んでいる。かといって無指定の場合はそれらシステム・フォントが利用されるというわけでもない。あまり長い<code>font-family</code>プロパティーを書くのは好きではないので、<code>@font-face</code>で抽象化したい。それを試すついでに、<code>src</code>デスクリプターで<code>-apple-system</code>キーワードが利用できるかどうかの確認もした。</p>

<p >See Also: <a href="http://hail2u.net/pub/test/641.html">The “System” Font Shortcut</a></p>

<p>ざっと確認する限りはうまく反映されているようだ。こういうものを書いていると<code>system</code>汎用フォントファミリーなどなくてもどうにかなると思うが、同時にこういう形でしかどうにかできないからこそ必要なのかもしれないとも思う。少なくともSan Franciscoによってフォント指定の概念が覆されてしまい、リニアーなスタックでは表現することができなくなったので、必要な方向になっていくのだろう。</p>

<p>懸念だった<code>-apple-system</code>の<code>src</code>デスクリプターでの利用も問題ないようだが、これは今のところOSレベルでエイリアスとして機能しているというだけなのかもしれない。後々標準仕様で汎用フォントファミリーとして<code>system</code>などと定義された場合、<code>src(&quot;system&quot;)</code>とは書くことができないと考えられる。これをそのまま使うのはやめておいた方が無難と感じた。</p>

<p>普通のウェブページにおいてはシステム・フォントはそれほど重要ではない（San Franciscoは例外）が、ウェブ・アプリケーションとなるとその重要性は飛躍的に上がる。そういう点を考えると、CSSレベルでどうにかできる<code>system</code>汎用フォントファミリーのような仕組みがあっても良いのかもしれない。</p>

<hr>

<p>久しぶりにTahomaと書こうとしたせいか、Tahomeになっていた。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20151009.html</link>
      <description>父親が帰ってきたので、食事の用意をして一緒に食べる。後片付けをしていると客用の茶碗を出していたことに気付き、「あっ親父死んだよな」と考える。父親に「死んだよね」って聞いてみると、「そうだよーそれで言うことあったんだよ」と軽く言われたところで目が覚める。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20151009.html</guid>
      <pubDate>Mon, 12 Oct 2015 08:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>父親が帰ってきたので、食事の用意をして一緒に食べる。後片付けをしていると客用の茶碗を出していたことに気付き、「あっ親父死んだよな」と考える。父親に「死んだよね」って聞いてみると、「そうだよーそれで言うことあったんだよ」と軽く言われたところで目が覚める。</p>

<p>気づき方がちょっと凝ってて、ビックリした。あと夢なので冷静だった。</p>]]></content:encoded>
    </item>

    <item>
      <title>ベースライン</title>
      <link>http://hail2u.net/blog/webdesign/baseline.html</link>
      <description>復帰してからこっちウェブページから色々削除していた。Facebook向けのOGPやTwitter Cards用のmeta要素、ほぼGoogle向けのMicrodataなどを削除して、HTMLでは必要最小限のところまで絞った。CSSでは主にNormalize.cssを削除する作業と、SCSSでの変数のローカル化なので、結果はほとんど変わっていない。JavaScriptは元々それほど使っていないので変わっていない。この状態をベースラインにして、何をどう積み上げるか、だ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/baseline.html</guid>
      <pubDate>Sun, 11 Oct 2015 09:07:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>復帰してからこっちウェブページから色々削除していた。Facebook向けのOGPやTwitter Cards用の<code>meta</code>要素、ほぼGoogle向けのMicrodataなどを削除して、HTMLでは必要最小限のところまで絞った。CSSでは主にNormalize.cssを削除する作業と、SCSSでの変数のローカル化なので、結果はほとんど変わっていない。JavaScriptは元々それほど使っていないので変わっていない。この状態をベースラインにして、何をどう積み上げるか、だ。</p>

<p>FacebookのOGPやTwitter Cardsはいらないかなと強く感じる（同じことを何度も書きたくない）が、逆にMicrodataは追加したい気持ちが強まった。しかしそれなら<a href="http://microformats.org/wiki/h-entry">h-entry</a>の方が良いなという気もし、難しいところだ。Microdata自体はオープンな標準仕様ではあるものの、併せて利用することになるShcema.orgのボキャブラリーが事実上Googleのものなので、FacebookのOGPとTwitter Cardsとなんら変わりはない。でも今さらMicroformatsに戻るのかというと抵抗はある上、hAtomではなくh-entryにしてしまうとサポートされている環境が大きく減ることにもなる。</p>

<p>CSSでは必要なノーマリゼーションのコードをどう取り込むかを一から考え直したい。</p>

<p>今年中にHTTPSにしよう、と決めた。どうやら2000円/年くらいでHTTPSを安定して運用できそうな状況になりつつあるようで、<a href="https://tools.ietf.org/html/rfc6797">HTTP Strict Transport Security</a>を利用して移行させたとしても、取り返しのつかない事態におちいるということはなさそうだ。まずはCloudFlareを使い、半年以内に避難場所を確保するという形にしたい。</p>

<hr>

<p>ウェブフォントも削除してるが、これは一時的なもの（San Franciscoファミリーの実験のため）だ。が、久々にウェブフォントなしにするとやはり快適で、個人のウェブサイトのようなキャッシュ効果が低いページでウェブフォントを使うにはかなりの工夫が必要そうだと改めて感じた。ローカルストレージに突っ込む手法は大手よりも小規模なウェブサイトでこそ威力を発揮するのかもしれない。</p>]]></content:encoded>
    </item>

    <item>
      <title>毎日575</title>
      <link>http://hail2u.net/blog/misc/everyday575.html</link>
      <description>毎日の 日課を何か 増やしたい</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/everyday575.html</guid>
      <pubDate>Fri, 09 Oct 2015 12:57:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure >
  <a href="http://everyday575.tumblr.com/"><img alt="5, 7, and 5" height="1254" src="http://hail2u.net/images/blog/everyday575.png" width="2400"></a>
</figure>

<p>毎日の 日課を何か 増やしたい</p>

<p>でも別に 毎日ちゃんと 書いてはない</p>

<p>続くかな？ 今のところは 飽きなさそう</p>]]></content:encoded>
    </item>

    <item>
      <title>誤審と肯定、その結末</title>
      <link>http://hail2u.net/blog/sports/misjudgement-acceptance-and-its-result.html</link>
      <description>少し前にかなりの誤審があり、そこそこの確率で勝利していたと思われる試合が引き分けに終わった。2日後にその誤審は認められ謝罪はなされたものの、試合結果は引き分けのまま修正されることはなかった。その結末は勝っていたかもしれないチームはその相手チームと半ゲーム差でポストシーズン出場を逃すというかなり後味の悪いものになった。</description>
      <category>Sports</category>
      <guid isPermaLink="true">http://hail2u.net/blog/sports/misjudgement-acceptance-and-its-result.html</guid>
      <pubDate>Thu, 08 Oct 2015 09:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>少し前にかなりの誤審があり、そこそこの確率で勝利していたと思われる試合が引き分けに終わった。2日後にその誤審は認められ謝罪はなされたものの、試合結果は引き分けのまま修正されることはなかった。その結末は<em>勝っていたかもしれないチームはその相手チームと半ゲーム差でポストシーズン出場を逃す</em>というかなり後味の悪いものになった。</p>

<p>過ちを認めたことは正しいことである。それは大前提ではあるが、認めたらそれで終わりということにはならない。それを皆が受け入れる仕組み、もしくはできうる限り誰も利益を得ないような仕組みがあるべきだが、そういうものは何もなくただただ誤審を肯定しただけだった。そのためその誤審により損をしていない側のみが一方的に利益を得る結果に終わった。</p>

<p>もちろん誤審を覆してそこからやり直しというのは認められない。その場であったならそれで良いが、後に続きを行うのではあまりにも不公平だろう。1イニングしか残っていないこともあり、疲労なしで1イニング守るだけだからだ。没収試合か再試合が妥当だったのではないかという思いが強い。</p>

<hr>

<p>このもやもやした気持ちを誰にぶつければいいのかわからないのでブログにぶつけた。もう済んだことなので忘れるためにも吐き出しておく。</p>]]></content:encoded>
    </item>

    <item>
      <title>モバイル広告益と回線益</title>
      <link>http://hail2u.net/blog/internet/ad-revenue-vs-data-cost.html</link>
      <description>広告パブリッシャーは広告の表示で利益を得る。キャリアーは回線の利用量が利益に直結する。モバイル広告の表示には当然回線を利用するわけで、その時にどちらがより利益を得るのかという記事を読んだ。記事ではキャリアーの方がより稼いでいるというデータの提示のみだが、そう考えるとモバイル広告の持つ（とされる）宣伝効果がその分減殺されているということになりそうだ。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/ad-revenue-vs-data-cost.html</guid>
      <pubDate>Wed, 07 Oct 2015 02:36:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>広告パブリッシャーは広告の表示で利益を得る。キャリアーは回線の利用量が利益に直結する。モバイル広告の表示には当然回線を利用するわけで、<a href="https://medium.com/@robleathern/carriers-are-making-more-from-mobile-ads-than-publishers-are-d5d3c0827b39">その時にどちらがより利益を得るのか</a>という記事を読んだ。記事ではキャリアーの方がより稼いでいるというデータの提示のみだが、そう考えるとモバイル広告の持つ（とされる）宣伝効果がその分減殺されているということになりそうだ。</p>

<p>キャリアーの回線の利用方法については大きな欠点が僕はあると思っている。それは制限に達するまで常にフルスピードで使わざるを得ないというところだ。それほど回線速度がいらない作業しかしない時、データ利用量に加算されない代わりに速度制限されるモードに切り替えたりできれば……。あるところにはあるのかもしれない。</p>

<p>あまり関係ない話だった。</p>

<p>ともかく広告を表示したユーザーが失うものとして、プライバシーやページの表示速度以外のものをこの記事は具体的に示したと言える。そのことはモバイル広告がその存在意義に対して、ユーザーから多くを得すぎているということを示してもいるのだろう。</p>

<hr>

<p>モバイル広告についてはみな色々あると思うが、僕はネイティブ広告のようなものがはびこるよりはマシかなという程度だ。コンテンツ・ブロッカーのあおりをくってウェブフォントが完膚なきまでに潰されるとか比較的公平なウェブページから独裁的なアプリ化に流れるとか、そういうことにならないことだけは祈っている。</p>

<section>
<h2>追記</h2>

<p>低速モードに切り替えてデータ利用料に加算しないようにする機能が<a href="https://www.iijmio.jp/hdd/coupon/">IIJmioならある</a>と<a href="https://twitter.com/_tsmd/status/651527693800882176">@_tsmd</a>に教えてもらった。乗り換えたい感じがしてきた。2年縛り切れるあたりまでにちゃんと考えよう。</p>
</section>]]></content:encoded>
    </item>

    <item>
      <title>半角カッコから全角カッコ</title>
      <link>http://hail2u.net/blog/software/hankaku-to-zenkaku-parentheses.html</link>
      <description>このウェブログの本文で使っていた半角カッコを全角カッコに変えたくなった。文章校正的な理由ではなく、将来の縦書き化を見据えて今のうちに調節しておこうかなという程度の理由だ（半角カッコに戻すのは簡単そうだ、ということもある）。だが単純な置換ではなかなか難しく、手作業でやろうかと思ったが開き半角カッコだけで8000近くあったので無理そう……ということで一時間くらい色々考えた結果、ASCII範囲外の文字を含む開き半角カッコと閉じ半角カッコのペアを探して置換するのがよさそうという結論に至った。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/hankaku-to-zenkaku-parentheses.html</guid>
      <pubDate>Tue, 06 Oct 2015 03:52:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>このウェブログの本文で使っていた半角カッコを全角カッコに変えたくなった。文章校正的な理由ではなく、将来の縦書き化を見据えて今のうちに調節しておこうかなという程度の理由だ（半角カッコに戻すのは簡単そうだ、ということもある）。だが単純な置換ではなかなか難しく、手作業でやろうかと思ったが開き半角カッコだけで8000近くあったので無理そう……ということで一時間くらい色々考えた結果、<em>ASCII範囲外の文字を含む開き半角カッコと閉じ半角カッコのペア</em>を探して置換するのがよさそうという結論に至った。</p>

<p>Perlの正規表現ならばかなりかっこよく書けそうだったが、ファイル探索から読み込み、置換、保存まで書くのはさすがに面倒そうだ。普通にVimで<a href="https://github.com/thinca/vim-qfreplace">qfreplace</a>を使って行うようにした。</p>

<pre><code >:%s/(\(.*[^!-~ ].\{-}\))/（\1）/gc
</code></pre>

<p>Vimの正規表現なので気持ち悪いやつになっている。ASCII範囲外の文字はアバウトに<code>!</code>から<code>~</code>と半角スペースを指定して反転するというアバウトなものにした。これで大抵のプログラム・コードでの半角カッコはスキップすることができる。問題は半角カッコのネストと同じ行に半角カッコを使うコードが複数回出てくるパターン（「`foo()`や`bar()`」というようなパターンだと「()`や`bar()」にマッチしてしまう）だが、うろ覚えのVimの正規表現では考慮するのが厳しく、そこは<code>c</code>フラグも付けて手作業で行うことにした。</p>

<p>だいたい<a href="https://github.com/hail2u/hail2u.net/commit/4258eec859c25ed60f27be8066b66b2ef7a2f3e1">うまくいった</a>のではないかと思う。後処理として<code>（</code>や<code>）</code>といった全角カッコに半角空白がついてしまっているパターンから半角空白を削除しておいたりもした。</p>

<p>本当はHTML断片としてパースして、<code>code</code>や<code>pre</code>要素の子ではないものを置換するという、HTMLから見て真っ当なやり方がベストに近そうだ。しかしHTML断片をパースするためのライブラリーの選定を始めとして、書き捨てになりそうなコードを書くには面倒極まりないので、雑な正規表現で誤魔化した。なんでもエクセルでやる人の気持ちがちょっとわかった。</p>

<hr>

<p>qfreplaceが同じファイルに複数の置換対象があると「既に変更があります」的なエラー・メッセージを出してスキップするようになった気がする。前は普通に動いていたので、最近のVimになって発症したのではないかと思うが、たまにしか使わないので何かVimの設定に依存しているのかもしれない。そのうち調べよう。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150929.html</link>
      <description>ガスと電気と水道、電話の名義変更を行うが失敗し、すべて止まる。暗闇に包まれ、何もできない家でじっとしていると、市役所の人が来る。「ちょっとした手違いで……すみません！」とあんぱんを3つ渡される。食べたらすごいおいしかった。が数分後に腹痛になり、トイレに入るも水が流れない。というところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150929.html</guid>
      <pubDate>Mon, 05 Oct 2015 03:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ガスと電気と水道、電話の名義変更を行うが失敗し、すべて止まる。暗闇に包まれ、何もできない家でじっとしていると、市役所の人が来る。「ちょっとした手違いで……すみません！」とあんぱんを3つ渡される。食べたらすごいおいしかった。が数分後に腹痛になり、トイレに入るも水が流れない。というところで目が覚めた。</p>

<p>だいたい名義変更が終わった記念の夢のようだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>srcset属性を使ったSVGフォールバック・ハック</title>
      <link>http://hail2u.net/blog/webdesign/srcset-svg-fallback-hack.html</link>
      <description>SVGをサポートする環境がほとんどになってきた。それでもなんとか8であったり、かんとか2.3であったりのことを考慮せざるをえないという状況はありうる。それにはonerror属性を使った対応が有力だが、srcset属性でSVGファイルを指定するだけというハックのことを知った。将来的に使えなくなるわけではないが、やりたいことと実装に食い違いが少なからずあるのでハックと言って良いだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/srcset-svg-fallback-hack.html</guid>
      <pubDate>Sun, 04 Oct 2015 03:31:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>SVGをサポートする環境がほとんどになってきた。それでもなんとか8であったり、かんとか2.3であったりのことを考慮せざるをえないという状況はありうる。それには<code>onerror</code>属性を使った対応が有力だが、<code>srcset</code>属性でSVGファイルを指定するだけというハックのことを知った。将来的に使えなくなるわけではないが、やりたいことと実装に食い違いが少なからずあるのでハックと言って良いだろう。</p>

<pre><code >&lt;img src=&quot;foo.png&quot; srcset=&quot;foo.svg&quot;&gt;
</code></pre>

<p>表示したいSVGを<code>srcset</code>属性で、フォールバックに使いたいPNGを<code>src</code>属性で指定するだけだ。これで<code>srcset</code>属性をサポートしているブラウザーではSVGが、そうでないブラウザーではPNGが表示される。<a href="http://caniuse.com/#search=srcset"><code>srcset</code>属性のサポート</a>に対して、<a href="http://caniuse.com/#search=svg">より多くのブラウザーがSVGをサポート</a>していることから成立する。もちろん食い違いがあるのでSVGをサポートしているブラウザーではSVGを、とはいかない。</p>

<p>ただし<code>onerror</code>属性を使ったテクニックと比較すると、画像へのリクエストが必ず1回で収まるという利点がある。<code>onerror</code>属性では古い環境へ負担を強いることに対し、公平な負担（十数文字の追加）だけで済むというのはかなり魅力的だ。</p>

<p>SVGと<code>srcset</code>属性のサポートの食い違いが問題だが、ハック臭なしできれいに書ける<code>picture</code>要素よりはカバー範囲が広いようだ（Safari 8やEdge 12がカバーできる）。<code>srcset</code>属性をサポートしない環境が後ろ向きな環境であること（OSレベルでレガシーであったり、Chromeへと切り替わっていなかったり）することを考えると、妥協点としても見るべきところはある。</p>

<p><a href="http://lynn.ru/examples/svg/en.html">インラインSVGでのフォールバック・テクニック</a>とこれでかなりの範囲をカバーできることだろう。</p>

<hr>

<p>初期からこのハックの利用を想定して実装を進めるのは薦められないが、SVGで良いと言われていたのにも関わらず急にPNGでフォールバックして欲しいと言われた時の緊急手段などとしては抗いがたい魅力がある。つまり計画的に利用しないことは意識したい。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
