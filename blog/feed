<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Fri, 15 May 2015 04:38:46 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>ConEmuのタブごとにカレント・ディレクトリーを復元</title>
      <link>http://hail2u.net/blog/software/restoring-current-directory-of-conemu-tabs.html</link>
      <description>ConEmuでは、再起動した際にタブを復元するように設定することができるが、うまくカレント・ディレクトリーが復元されないことがある。各タブで使っているシェルに依存するので、シェル側で設定してやる必要がある。例えばGit for Windowsのbash.exeでは、~/.bashrcでシェル変数PROMPT_COMMANDを使ってカレント・ディレクトリーを明示的に記憶させる。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/restoring-current-directory-of-conemu-tabs.html</guid>
      <pubDate>Fri, 15 May 2015 04:38:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://conemu.github.io/">ConEmu</a>では、再起動した際にタブを復元するように設定することができるが、うまくカレント・ディレクトリーが復元されないことがある。各タブで使っているシェルに依存するので、シェル側で設定してやる必要がある。例えばGit for Windowsの<code>bash.exe</code>では、<code>~/.bashrc</code>でシェル変数<code>PROMPT_COMMAND</code>を使ってカレント・ディレクトリーを明示的に記憶させる。</p>

<pre><code>PROMPT_COMMAND=&#39;ConEmuC -StoreCWD&#39;
</code></pre>

<p>これだけではなく、<code>ConEmuC.exe</code>にパスを通さなければならない。ConEmuのSettings→Startup→ComSpecで<q>Add %ConEmuBaseDir% to %PATH%</q>を有効にすることで可能だ。もちろんシステムの<code>PATH</code>環境変数を編集しても良い。</p>

<p>これでSettings→Startupで<q>Auto save/restore opened tabs</q>を有効にしていると、再起動時に<code>bash.exe</code>をシェルにしたタブがうまく復元されるようになる。</p>]]></content:encoded>
    </item>

    <item>
      <title>Safariにおける日本語の文章に対する下線</title>
      <link>http://hail2u.net/blog/webdesign/underline-of-japanese-text-on-safari.html</link>
      <description>(Mobile )Safari 7.1より下線がディセンダーに重ならずに引かれるようになった。主にリンクの下線で確認することができる。概ね問題なく期待通りにうまく機能しているものと考えていたが、日本語の文章ではそれなりの確率(再現条件はよくわからない)でおかしくなることを知った。例えば上記スクリーンショットでは、大きめのグリフを持つ「作」や「安」などで下線が途切れているように見える。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/underline-of-japanese-text-on-safari.html</guid>
      <pubDate>Thu, 14 May 2015 03:41:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/safari-text-underline-and-japanese-text.png"><img alt="(Mobile )Safari 7.1以降では、アルファベットのディセンダーのみでなく、日本語の一部グリフでも下線が途切れることがある" src="/images/blog/safari-text-underline-and-japanese-text.png"></a>
</figure>

<p>(Mobile )Safari 7.1より下線がディセンダーに重ならずに引かれるようになった。主にリンクの下線で確認することができる。概ね問題なく期待通りにうまく機能しているものと考えていたが、日本語の文章ではそれなりの確率(再現条件はよくわからない)でおかしくなることを知った。例えば上記スクリーンショットでは、大きめのグリフを持つ「作」や「安」などで下線が途切れているように見える。</p>

<p>Safariでこの機能は、現状では一部実装に留まるものの、CSSの<a href="http://www.w3.org/TR/css-text-decor-3/#text-decoration-skip-property"><code>text-decoration-skip</code>プロパティー</a>を使って実装されている。仕様で定義されている<code>ink</code>という値の実装というわけだ。つまり同じくこのプロパティーを利用することで、挙動を他のブラウザーと合わせることが可能になる。</p>

<pre><code>a {
  -webkit-text-decoration-skip: none;
}
</code></pre>

<hr>

<p>下線がきれいに見えるかどうかは、ディセンダーとの重なりよりもその色と太さにあると考えられる。またこのディセンダーとの重なりをスキップする機能は、日本語のウェブサイトで大きな力を発揮するわけでもない。対して日本語の文章で一部完全に途切れたような形になることは大きな欠点と言えそうだ。安定した表示を求めるのなら、この機能は無効にしておいたほうが無難だろう。</p>

<p><code>text-decoration-color</code>プロパティーを始めとした<a href="http://www.w3.org/TR/css-text-decor-3/">CSS Text Decoration Module Level 3</a>で定義されているプロパティー群の実装は進みつつある。下線、ことリンクの下線の改良については、それらが安心して使えるようになってから改めて考えることにしたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150505.html</link>
      <description>口内炎が歯茎に出きてた日の夜、痛すぎて病院に行ったところなぜか「あーこれは頭蓋骨全部交換しないとダメですね」と言われ、下半身の部分麻酔で手術が始まる。いや無理だろって思ったところで目が覚める。手術系の夢はあまり見た記憶がなく新鮮だった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150505.html</guid>
      <pubDate>Wed, 13 May 2015 04:08:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>口内炎が歯茎に出きてた日の夜、痛すぎて病院に行ったところなぜか「あーこれは頭蓋骨全部交換しないとダメですね」と言われ、下半身の部分麻酔で手術が始まる。いや無理だろって思ったところで目が覚める。手術系の夢はあまり見た記憶がなく新鮮だった。</p>

<p>もう治ったけど、今回の口内炎は3日くらい辛くて、熱が出たりもした。初めてトラフル錠で凌いだけど、軟膏を買った方が良かったっぽい気がする。</p>]]></content:encoded>
    </item>

    <item>
      <title>WOFF2への変換にかかる時間</title>
      <link>http://hail2u.net/blog/software/woff2-compression-time.html</link>
      <description>自前でビルドすることによってwoff2_compress.exeを手に入れたので、ウェブサイトのビルドに組み込もうと考えていたが、微妙そうだということがわかった。まず元となるファイルが更新されることがあまりないこともそうだが、WOFF2への変換にかなり時間を取られるということが大きい。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/woff2-compression-time.html</guid>
      <pubDate>Tue, 12 May 2015 02:26:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="/blog/software/woff2_compress.exe-and-woff2_decompress.exe.html">自前でビルドすること</a>によって<code>woff2_compress.exe</code>を手に入れたので、ウェブサイトのビルドに組み込もうと考えていたが、微妙そうだということがわかった。まず元となるファイルが更新されることがあまりないこともそうだが、WOFF2への変換にかなり時間を取られるということが大きい。</p>

<p>実際にどれくらい遅いのだろうか。Surce Sans ProとM+ 1p、そしてSource Han Sans JPの変換にかかる時間を、<code>time</code>コマンドを使って計測したところ、以下のような結果になった。</p>

<pre><samp>$ <kbd>. ./convert.sh</kbd>
Processing SourceSansPro-Regular.ttf =&gt; SourceSansPro-Regular.woff2

real    0m22.593s
user    0m0.000s
sys     0m0.015s

Processing mplus-1p-regular.ttf =&gt; mplus-1p-regular.woff2

real    1m21.508s
user    0m0.000s
sys     0m0.015s

Processing SourceHanSansJP-Regular.otf =&gt; SourceHanSansJP-Regular.woff2

real    30m50.434s
user    0m0.000s
sys     0m0.015s
</samp></pre>

<p>ファイル・サイズが増えるにつれ変換に大きな時間がかかっていることがわかる。Source Sans Proでも厳しく、M+ 1pで限界、Source Han Sans JPに至っては言語道断という結果だ。WOFFへの変換は概ね高速(数秒)に終わるため、WOFF2で採用された新圧縮アルゴリズムBrotliでの再圧縮に時間がかかっているということだろう。</p>

<p>とてもではないがウェブサイトのビルドに組み込める速度ではない。ファイル・サイズに応じて組み込むかどうか考えるという手もあるだろうが、どのあたりをしきい値とするかで悩むことにもなりそうだ。上述のようにあまり頻繁に更新されるわけではないので、必要な際にバッチ処理してやるくらいで十分だと言えそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSS Transitionを使ったスムーズにスクロールしてトップに戻る機能</title>
      <link>http://hail2u.net/blog/webdesign/scroll-smoothly-to-top-with-css-transition.html</link>
      <description>前に作ったスクロールした時に位置固定のロゴをトップに戻る機能にすり替えるものを少し手直しして再導入した。今回はスムーズにスクロールさせようかと色々考えていたが、やはりJavaScriptでscrollTo()を制御するのはコストが高い。CSSならどうだと試行錯誤したところ、どうやらbody要素への負のマージンをCSS Transitionで滑らかに変化させれば良いようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/scroll-smoothly-to-top-with-css-transition.html</guid>
      <pubDate>Mon, 11 May 2015 04:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/scroll-smoothly-to-top-with-css-transition.png"><img alt="スムーズニトップヘモドル" src="/images/blog/scroll-smoothly-to-top-with-css-transition.png"></a>
</figure>

<p>前に作った<a href="/blog/webdesign/fixed-logo-with-to-top-function.html">スクロールした時に位置固定のロゴをトップに戻る機能にすり替えるもの</a>を少し手直しして再導入した。今回はスムーズにスクロールさせようかと色々考えていたが、やはりJavaScriptで<code>scrollTo()</code>を制御するのはコストが高い。CSSならどうだと試行錯誤したところ、どうやら<code>body</code>要素への負のマージンをCSS Transitionで滑らかに変化させれば良いようだ。</p>

<p>View Demo: <a href="/pub/test/628.html">Scroll Smoothly with CSS Transition</a></p>

<p>デモのページにはダミーテキストの各セクションの最後にそれぞれ⇑ Back to Topというリンクがある。それをクリックすると1秒かけてスムーズにスクロールしながらトップに戻る。トリガーとスクロール自体はJavaScriptで行っているが、スクロールのアニメーション自体はCSS Transitionで行っている。具体的には以下のような処理と仕組みになる。</p>

<ol>
<li>トップに戻るリンクをクリック</li>
<li>現在のスクロール距離(<code>window.pageYOffset</code>)分だけ<em>マイナスに</em><code>body</code>要素の<code>margin-top</code>プロパティーを設定する</li>
<li>スクロールしてトップへ戻す</li>
<li><code>transition</code>プロパティーを<code>body</code>要素の<code>margin-top</code>プロパティーへ仕込む</li>
<li><code>body</code>要素の<code>margin-top</code>プロパティーの値を<code>0</code>にする</li>
<li>CSS Transitionで<code>margin-top</code>プロパティーの値を戻すアニメーションが起こる</li>
</ol>

<p>スクロールバー(があるなら)を注意深く見るとわかるが、実際にはスムーズにスクロールしているわけではなく、<em>そのように見える</em>というだけである。CSS Transitionによるアニメーションはユーザーが途中で止める手段もないので、実用上はほとんど問題ないだろう。</p>

<p>実装のコードも9行ほどと短く、色々なものに組み込みやすいと思われる。コードも順序良くCSSを割り当てていくだけだ。</p>

<pre><code>document.getElementById(&quot;to-top&quot;).addEventListener(&quot;click&quot;, function (evt) {
  var styleBody = document.body.style;
  styleBody.transition = &quot;<mark>initial</mark>&quot;;
  styleBody.marginTop = &quot;-&quot; + (<mark>window.pageYOffset - 1</mark>) + &quot;px&quot;;
  window.scrollTo(0, 0);
  styleBody.transition = &quot;<mark>margin-top 1s ease-in-out</mark>&quot;;
  styleBody.marginTop = &quot;0&quot;;
  evt.preventDefault();
});
</code></pre>

<p>最初に<code>body</code>要素の<code>transition</code>プロパティーを<a href="http://www.w3.org/TR/css3-values/#common-keywords"><code>initial</code></a>に戻すことで、負のマージンを与えた時にアニメーションしないようにすることができる。最初にこうしておかないと、複数回このトップに戻る機能を利用した場合におかしなことになってしまう。<code>initial</code>というキーワードの値はInternet Explorer 11を始めいくつかのブラウザーでまだサポートされていないが、不正な値を仕込んでも目的である<em>アニメーションを潰すこと</em>は可能だ。そのため行儀が良いとは言えないが、このままでも良いだろう。気になる人は<a href="http://www.w3.org/TR/css3-transitions/#transition-shorthand-property">その仕様</a>で決まっている初期値である<code>all 0s ease 0s</code>にすると良い。</p>

<p>この辺りのアニメーションに使ったスタイルの後始末は、<a href="http://www.w3.org/TR/css3-transitions/#transitionend"><code>transitionEnd</code>イベント</a>できれいに行える。明示的にスタイルをきちんと元に戻すことができるので、バグが潜みづらい実装になるはずだ。複雑なCSSを持つウェブサイトではそうすることも考えるべきだ。</p>

<p>スクロール位置を取得する<code>window.pageYOffset</code>から<code>1</code>を引いているのは、スクロールバーが一瞬消えてしまわないようにするためのおまじないだ。これは僕は気づいておらず、<a href="https://twitter.com/ginpei_jp/status/597253862798438400">@ginpei_jpが考えてくれた</a>。これがないとスクロールしきった状態でこのトップに戻る機能を利用すると、スクロールバーが一瞬消え、場合によってはレイアウトが一瞬ずれる可能性がある。</p>

<p><code>transition</code>プロパティーの長さとアニメーション関数は自分の好みでもっと色々試してみると良い。僕の感触では、長さが<code>.5s</code>でアニメーション関数は<code>ease-in-out</code>とするのが一番スカッとスクロールしてくれると感じた。長さは移動距離に応じて調節しても良さそうだが、同じ時間で動かした方が好ましく感じる人が多いだろう。</p>

<hr>

<p>このウェブサイトでは位置固定のロゴも同じようにスムーズにスクロールさせる必要があるので、<a href="https://github.com/hail2u/hail2u.net/blob/da911847f7a5a18b1bbd47f11b6c4e33780136bd/scripts/toggle-logo-action.js#L45-L56">ほんの少し実装がややこしく</a>なっている。といってもロゴの<code>margin-top</code>プロパティーで<code>body</code>要素とは逆に正のマージンでずらしてやり、同じようにアニメーションさせているだけだ。うまく機能しているように思う。</p>

<p>ここまでくればPure CSSでもいけそうに思えるが、それはちょっと難しそうだ。アニメーションまではHTMLの助けを借りれば容易に実装することができるが、<code>transition</code>プロパティーのリセットまたは<code>:target</code>の解除がCSSだけではできない。</p>

<p>昨今は、とにかくCSSをうまく利用してアニメーションをさせた方が軽いものになることが多い。機能の発動のためのイベントなどでJavaScriptを使う事にはなるだろうが、それ以外では頭をひねってCSS Transition (またはAnimation)でやることを念頭に置くと、挙動と実装が共にスカッとしたアニメーションを提供できることだろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>git grepをVimで使う #2</title>
      <link>http://hail2u.net/blog/software/using-git-grep-with-vim-2.html</link>
      <description>Git for Windowsをv2に上げる過程でいろいろ調べていたところ、git grepの良さそうなオプションを見逃していたことに気付いた。僕は半年くらい前からVimのgrepprgでgit grepを使っているので、その設定にいくつかオプションを追加することにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/using-git-grep-with-vim-2.html</guid>
      <pubDate>Sun, 10 May 2015 02:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Git for Windowsをv2に上げる過程でいろいろ調べていたところ、<a href="http://git-scm.com/docs/git-grep"><code>git grep</code></a>の良さそうなオプションを見逃していたことに気付いた。僕は<a href="/blog/software/using-git-grep-with-vim.html">半年くらい前</a>からVimの<code>grepprg</code>で<code>git grep</code>を使っているので、その設定にいくつかオプションを追加することにした。</p>

<pre><code>set grepprg=git\ grep\ --no-index\ --exclude-standard\ -I\ --perl-regexp\ --line-number
</code></pre>

<p>新たに追加したのは<code>.gitignore</code>を考慮するようになる<code>--exclude-standard</code>オプションとPerl互換の正規表現で検索できるようになる<code>--perl-regexp</code>の2つだ。これでインデックスしていないファイルを含むが、<code>.gitignore</code>で無視設定されているファイルとバイナリー・ファイルは含まないようになる。Perl互換の正規表現を有効にするオプションは<code>-P</code>という短いオプションでも良いので、普段はオフで使いたい時だけ<code>:grep</code>コマンドに渡すみたいな運用の方が良いかもしれない。</p>]]></content:encoded>
    </item>

    <item>
      <title>Niconneの&amp;</title>
      <link>http://hail2u.net/blog/webdesign/niconne-ampersand.html</link>
      <description>&amp;だけ別のフォントで置き換えるのをまたやりたくなったので復活させた。今回はNiconneを使った。Google Fontsで人気のあるOswaldやIngressで使われているCodaも作成しているVernon Adamsのスクリプト系のタイプフェイス。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/niconne-ampersand.html</guid>
      <pubDate>Sat, 09 May 2015 02:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/niconne-ampersand.png"><img alt="&amp;" src="/images/blog/niconne-ampersand.png"></a>
</figure>

<p>&amp;だけ別のフォントで置き換えるのをまたやりたくなったので復活させた。今回は<a href="https://www.google.com/fonts/specimen/Niconne">Niconne</a>を使った。Google Fontsで人気のある<a href="https://www.google.com/fonts/specimen/Oswald">Oswald</a>やIngressで使われている<a href="https://www.google.com/fonts/specimen/Coda">Coda</a>も作成しているVernon Adamsのスクリプト系のタイプフェイス。</p>

<p><a href="http://hail2u.github.io/google-webfonts-ampersands.html">アンパサンド</a>。</p>]]></content:encoded>
    </item>

    <item>
      <title>woff2_compress.exeとwoff2_decompress.exe</title>
      <link>http://hail2u.net/blog/software/woff2_compress.exe-and-woff2_decompress.exe.html</link>
      <description>あるフォント・ファイルをWOFF2フォーマットへ変換するには、現状google/woff2をビルドするしかない。FontSquirrelはかなり優秀ではあるが若干不安定で苦労する。他にもいくつかあるが、大きなファイルを食わせることのできるオンライン・コンバーターは皆無に等しい。ということで2855ee7をクローンして、ビルドし、ローカルで頑張ることにした。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/woff2_compress.exe-and-woff2_decompress.exe.html</guid>
      <pubDate>Fri, 08 May 2015 00:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>あるフォント・ファイルをWOFF2フォーマットへ変換するには、現状<a href="https://github.com/google/woff2"><code>google/woff2</code></a>をビルドするしかない。<a href="http://www.fontsquirrel.com/">FontSquirrel</a>はかなり優秀ではあるが若干不安定で苦労する。他にもいくつかあるが、大きなファイルを食わせることのできるオンライン・コンバーターは皆無に等しい。ということで<a href="https://github.com/google/woff2/commit/2855ee7b8bf6a46ec3a10f773f358c8c0f808b74"><code>2855ee7</code></a>をクローンして、ビルドし、ローカルで頑張ることにした。</p>

<p>Download: <a href="/pub/woff2_windows_x64.zip">woff2_windows_x64.zip</a></p>

<p>ビルドはそんなに苦労することはないが、Brotliが<code>cc</code>でコンパイルしようとするので工夫が少し必要だった。僕は別のやり方でやったが、<code>gcc.exe</code>をコピーして<code>cc.exe</code>にリネームするという力技でも大丈夫だろう。</p>

<pre><samp>$ <kbd>git clone https://github.com/google/woff2.git</kbd>
$ <kbd>cd woff2</kbd>
$ <kbd>git submodule init</kbd>
$ <kbd>git submodule update</kbd>
$ <kbd><mark>LFLAGS=&quot;--static -s&quot;</mark> make clean all</kbd>
</samp></pre>

<p>ほとんどREADMEと同じだが、静的リンクするための環境変数を設定しつつ<code>make</code>してやる。</p>

<hr>

<p>ここで使っているフォント・ファイルも全て圧縮しなおしたため、少し変わってしまった……。サイズ自体は小さくなったので良しとしよう。</p>

<p>最近はこういったものをビルドするには<a href="http://mingw-w64.yaxm.org/doku.php">MinGW-w64</a>を使っている。パッケージ・マネージャーとかなしの全部入りで配布されており、ガッと入ってピュッと設定してエイヤッと使えるようになる。たまに何かをビルドするだけの人には面倒くさくなくて良い。</p>]]></content:encoded>
    </item>

    <item>
      <title>相対命名ルール</title>
      <link>http://hail2u.net/blog/coding/relative-naming-rules.html</link>
      <description>スケールしていく変数のバリエーションを作る際の命名規則を変えていた。今まではalphaから始めて下にどんどん増やせるようにしていたのだけど、調整コストがかかる。plus1やminus3などとすると無限にスケールできそうだが読みづらい。下に3レベル、上に5レベルくらいまででだいたい足りそうな気がするので、全部で9レベルまで作った。</description>
      <category>Coding</category>
      <guid isPermaLink="true">http://hail2u.net/blog/coding/relative-naming-rules.html</guid>
      <pubDate>Thu, 07 May 2015 03:45:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="/images/blog/relative-naming-rules.png"><img alt="Minimal, tiny, small, medium, large, huge, gargantuan, enormous, and maximal." src="/images/blog/relative-naming-rules.png"></a>
</figure>

<p>スケールしていく変数のバリエーションを作る際の命名規則を変えていた。今まではalphaから始めて下にどんどん増やせるようにしていたのだけど、調整コストがかかる。plus1やminus3などとすると無限にスケールできそうだが読みづらい。下に3レベル、上に5レベルくらいまででだいたい足りそうな気がするので、全部で9レベルまで作った。</p>

<ol>
<li>Minimal</li>
<li>Tiny</li>
<li>Small</li>
<li>(Medium)</li>
<li>Large</li>
<li>Huge</li>
<li>Gargantuan</li>
<li>Enormous</li>
<li>Maximal</li>
</ol>

<p>Meidumは省略する。下に3レベル、上に5レベルというのは、タイプフェイスのウェイトにおけるバリエーション(100–900)を参考にしている。</p>

<hr>

<p>こういう相対的な命名は一般に悪だと考えられている。実際コーディングにおいて、多くの場合はその通りだ。しかしビジュアル・デザインをコントロールすることになるCSSでだけは事情が変わってくる。えてして「ここはあそこより非常に大きく」や「ここはあそこより少し小さく」などという指示に終わり、それが本質であるととらえることができるからだ。</p>

<p>CSS (とHTML)のみではコンポーネントのクラス名という、俗にセマンティックなクラス名という単位で帰結し、そういった相対的なニュアンスという文脈は埋もれることになるが、CSSプリプロセッサーではそういった曖昧な相対的なニュアンスを変数として定義することが可能であり、かつ必須だろう。</p>

<p>そういった相対的なスケーリングを表現するための一貫した命名規則は重要であるわけだが、多くは場当たり的に`large`だとか`grande`だとか`mini`だとか付けるくらいで終わる。実際には色定義の命名くらい気を使っても良い部分なのではないだろうか。</p>]]></content:encoded>
    </item>

    <item>
      <title>Git for Windows v2.x.xのインストール</title>
      <link>http://hail2u.net/blog/software/install-git-for-windows-v2.html</link>
      <description>Git v2系のWindows版がGit for Windowsの方で少し前から公開され始めていたことを今さら知ったので、更新した。2015/05/05現在はv2.4.0がリリースされている。インストールから動かすまでけっこう手間取ったので、メモがてら記事に残しておく。Git v2の使い勝手とかについては特に書かない。</description>
      <category>Software</category>
      <guid isPermaLink="true">http://hail2u.net/blog/software/install-git-for-windows-v2.html</guid>
      <pubDate>Wed, 06 May 2015 00:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>Git v2系のWindows版が<a href="http://git-for-windows.github.io/">Git for Windows</a>の方で少し前から公開され始めていたことを今さら知ったので、更新した。2015/05/05現在はv2.4.0がリリースされている。インストールから動かすまでけっこう手間取ったので、メモがてら記事に残しておく。Git v2の使い勝手とかについては特に書かない。</p>

<h2>~/.bashrcの読み込み</h2>

<p>このGit for Windowsでは、デフォルトで<em>無理やり</em><code>~/.bashrc</code>を読みに行くことがなくなった。<code>~/.bash_profile</code>は読みに行くので、<code>~/.bash_profile</code>から<code>~/.bashrc</code>を読みに行くように、つまり普通にBashを設定してやれば良い。</p>

<pre><code>if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
</code></pre>

<p>これだけ書いた<code>~/.bash_profile</code>を作成するのが良い。<a href="https://github.com/git-for-windows/git/issues/86">あまり関係ないイシュー</a>ではそのうち<code>~/.bash_profile</code>がなかったら作成するようにするというような事を言っているので、これについてはそのうち直りそうだ。</p>

<h2>OpenSSLのアップデート</h2>

<p>様々なコマンドから使われる<code>libeay32.dll</code>が、その読み込み優先順の問題で、システムにインストールされている<code>libeay32.dll</code>を呼びに行ってしまうようだ。もしバージョンが古いOpenSSLが何らかの理由でシステムにインストールされていたりすると、エラーで落ちたりする。僕の場合は<code>git-remote-https.exe</code>が<q>プロシージャ エントリ ポイント EVP_aes_128_ctr がダイナミック リンク ライブラリ LIBEAY32.dll から見つかりませんでした。</q>というエラーで落ち、<code>push</code>や<code>fetch</code>などがまったくできなかった。</p>

<p><code>libeay32.dll</code>がらみでエラーが出る人は、Git for Windows v2.4.0では最新版の1.0.2aを使っているようなので、それと同じものをシステムにインストールするのが良いだろう。インストーラーで配布しているところもあるが、<a href="http://indy.fulgan.com/SSL/">OpenSSLの公式サイトからリンクされているページで配布されているZIPアーカイブ</a>を展開してコピーする方が良い。</p>

<p>64bit版Windowsを使っている人は<code>openssl-1.0.2-x64_86-win64.zip</code>をダウンロードして、展開し、中に入っている<code>libeay32.dll</code>と<code>ssleay32.dll</code>を<code>C:\Windows\System32</code>へコピーする。</p>

<h2>環境変数MSYSTEM</h2>

<p>デフォルトでインストールされるGit Bash (実体はMinTTY)を使う場合は問題ないが、他のターミナルを使うとうまく判定されない事があり、パスが上手く通らないことがあるようだ(ConEmuで上手く通らなかった)。パスの最適化は環境変数<code>MSYSTEM</code>を見て行われるようなので、新規ユーザー環境変数として<code>MSYSTEM</code>を作り、その値を<code>MINGW64</code> (32bit版をインストールした人は<code>MINGW32</code>)に設定してやれば良い。</p>

<p>上記OpenSSLがらみのエラーもこのあたりが怪しいが、Git CMDでも同じエラーでダメだったので、アップデートは必須だと思われる。</p>

<h2>git.exe他、実行ファイル群のパス</h2>

<p>全て一箇所に集約されていたv1系とは違い、多くの実行ファイルがインストール先フォルダーの<code>mingw64/bin/</code>以下に移動した。<code>curl.exe</code>などもここにある。またその他の実行ファイルも<code>usr/bin/</code>に移動されている。<code>bash.exe</code>や<code>vim.exe</code>など、MSYS関係の実行ファイルはこちらにある。</p>

<p>Vimなど他のプログラムから気軽に呼び出したい場合、両者にパスが通っていることが必要になることもあるので、うまいことパスを通す方法を模索する必要がある。僕は<code>~/.vim/vimrc</code>の先頭で無理やり<code>$PATH</code>を最適化してお茶を濁した。</p>

<pre><code>if has(&#39;win32&#39;)
  let $PATH = substitute($PATH, &#39;\\&#39;, &#39;/&#39;, &#39;g&#39;);

  if $PATH !~? &#39;\(^\|;\)C:/git/usr/bin\(;\|$\)&#39;
    let $PATH = &#39;C:/git/usr/bin;&#39; . $PATH
  endif

  if $PATH !~? &#39;\(^\|;\)C:/git/mingw64/bin\(;\|$\)&#39;
    let $PATH = &#39;C:/git/mingw64/bin;&#39; . $PATH
  endif
endif
</code></pre>

<hr>

<p>ちゃんとインストールできた状態だと、HTTPSでの認証もそのまま継承され、ちゃんと<code>push</code>することができた。問題なく動いている。とはいっても特に何もすごく良くなったところもない気がしないでもないので、興味ある人だけいれるのが良いだろう。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
