<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>http://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Tue, 26 May 2015 12:49:22 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="http://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>夢</title>
      <link>http://hail2u.net/blog/misc/dreaming-20150523.html</link>
      <description>メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/dreaming-20150523.html</guid>
      <pubDate>Tue, 26 May 2015 12:49:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>メールで連絡があり、詳細は添付したZIPファイルにあると書いてあった。ZIPファイルを展開したら、中からZIPファイルが出てきて、それを展開したら、また中からZIPファイルが……というのを永遠に繰り返していた。その間、ちょくちょくFacebookメッセージで中身確認できましたかと聞かれていたため、すみませんまだですという返事もまた永遠に繰り返していた。ずっと同じZIPファイルを展開していたことに気づき、頭がカーッとなったところで目が覚めた。</p>

<p>めっきり圧縮ファイルを展開することもなくなった。あんまりメールで添付ファイルのやりとりをしなくなったとか、そのまま見れるツールが増えたとか理由はいろいろある。だからたとえ夢であってもこういう間違いを起こすことはきっとある。たぶん。</p>]]></content:encoded>
    </item>

    <item>
      <title>DuckDuckGoでサイト内検索</title>
      <link>http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</link>
      <description>このウェブサイトの全文検索フォームをDuckDuckGoによるものに変えた。公式にはiframe要素によるものが推奨されているが、そのページからリンクされている更なるカスタマイズを解説した記事のように、form要素を直接書いても良いようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/site-search-with-duckduckgo.html</guid>
      <pubDate>Mon, 25 May 2015 00:17:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>このウェブサイトの全文検索フォームを<a href="https://duckduckgo.com/">DuckDuckGo</a>によるものに変えた。公式には<a href="https://duckduckgo.com/search_box"><code>iframe</code>要素によるもの</a>が推奨されているが、そのページからリンクされている<a href="http://hardik.org/2013/06/01/stylising-duckduckgo-site-search/">更なるカスタマイズを解説した記事</a>のように、<code>form</code>要素を直接書いても良いようだ。</p>

<p>サイト内検索を実現するための最小限のコードは以下のようになる。</p>

<pre><code>&lt;form
  <mark>action=&quot;https://duckduckgo.com/&quot;</mark>
  role=&quot;search&quot;&gt;
  &lt;input
    <mark>name=&quot;sites&quot;</mark>
    type=&quot;hidden&quot;
    <mark>value=&quot;hail2u.net&quot;</mark>&gt;
  &lt;input
    <mark>name=&quot;q&quot;</mark>
    type=&quot;search&quot;&gt;
  &lt;input
    type=&quot;submit&quot;
    value=&quot;Search&quot;&gt;
&lt;/form&gt;
</code></pre>

<p><code>form</code>要素の<code>action</code>属性でトップページのURLを、<code>name</code>属性の値を<code>sites</code>に設定した隠れコントロールで検索したいドメインを、<code>name</code>属性の値が<code>q</code>のテキスト入力コントロールが必須になる。<code>methodo</code>属性はデフォルトで<code>GET</code>なので必要なく、送信ボタンにも特に名前を付ける必要はない。ドメインはカンマで区切って複数指定することもできる。</p>

<p>これに加えて<a href="https://duckduckgo.com/params"><em>検索結果のページでの表示</em>を制御するパラメーター</a>を隠れコントロールで指定することができる。柔軟にカスタマイズできてすごい……ように思えるが、色を変えたりという程度なのでそれほどでもなく、<a href="https://cse.google.com/cse/">Googleカスタム検索エンジン</a>の方がそういう点では優る。手軽にちょっとだけ体裁を変えるということが可能ではあるけれども、HTMLの書き換えを伴うのであまり意味はない。</p>

<hr>

<p>肝心の検索結果はというと、サイト内検索なら問題は感じられない。確かにDuckDuckGoはGoogleと比べるとかなり検索結果のクオリティーは落ちる。普通に謎の業者が勝手に作った丸パクリのウェブサイトがかなり上位に出てきたりもするし、日本語のウェブサイトを検索しているのに延々と中国語のスパム・ウェブサイトが出てきたりもする。しかしサイト内検索で使う場合はそういったゴミが混ざることもなく、順位付けの精度も悪くはない。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSS Transformによるセンタリングのベスト・プラクティス</title>
      <link>http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</link>
      <description>上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/best-practice-for-css-transform-centering.html</guid>
      <pubDate>Sun, 24 May 2015 02:59:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>上下左右のセンタリングには様々な手法が編み出されてきた。最近はCSS Transformを使う方法がメジャーになりつつある。コンテナーとセンタリングしたい要素のサイズが共に不明でもうまくいくところなど、そこそこ万能感があるのがポイントだろうか。このCSS Transformによるセンタリングは左下に動かしてから右上に戻すパターンと、その逆の右上に動かしてから左下に動かすパターンがある。どちらでも理論的には上手くいくが、ベスト・プラクティスとなりうるのは後者だけだろう。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/631-1.html">Centering Unknown with CSS Transform (top/left)</a></p>

<p>このデモは実際に不具合が起こりうるパターンになっている。センタリングする要素を<code>top</code>と<code>left</code>プロパティーで動かした後、<code>transform: translate(-50%, -50%)</code>で元に戻しているわけだが、Internet Explorer 11では横スクロールバーが出る原因となる。どうやら<code>left</code>と<code>top</code>プロパティーで動かした時点で横スクロールバーの有無が確定してしまうようだ。コンテナー側で<code>overflow</code>プロパティーを使えばアドホックに対処することは可能ではあるが、副作用を伴うのでやらない方が良いだろう。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/631-2.html">Centering Unknown with CSS Transform (right/bottom)</a></p>

<p>対して<code>right</code>と<code>bottom</code>プロパティーで動かした後、<code>transform: translate(50%, 50%)</code>するパターンでは横スクロールバーが出ることはない。描画領域が拡大しない方向へ動かしているからだ。こちらのパターンには特にデメリットもなく、<code>top</code>と<code>left</code>プロパティーのパターンと比べても極端にコード量が増えるわけでもない(2文字増えるだけだ)。</p>

<p>CSS Transformによるセンタリングの説明では多くの場合、前者の<code>top</code>と<code>left</code>プロパティーを使ったパターンが使われている。その解説は間違っているわけではないが、Internet Explorer 11の挙動を考慮すると<code>right</code>と<code>bottom</code>プロパティーを使ったパターンが安定していると言え、ベスト・プラクティス足りえる。</p>

<hr>

<p>僕はこのCSS Transformによるセンタリングには欠点があると感じていて、あまり多用はしないようにしている。その欠点とは動かした要素がブラーがかかったようにぼやけることがあることだ。以前からWindowsのChromeでは多発する。文字はぼやけないのでわかりづらい(気づきづらい)が、幾何学的なシャープな画像を動かしてみたりすると気づきやすい。再現条件がよくわからないのでサンプルもうまく作れない。</p>

<p>ともあれ上下左右の中央寄せには選択肢は多くないので、結局は使わざるを得ない。<code>position</code>プロパティーでも<code>background-position</code>プロパティーのような配置ができれば良いのになとたまに思う。</p>]]></content:encoded>
    </item>

    <item>
      <title>Instapaper</title>
      <link>http://hail2u.net/blog/internet/hello-instapaper.html</link>
      <description>Readabilityを愛して止まないのだけど、結構な頻度で読めない、または画像がうまく出ないみたいな感じになってきたので、遂に諦めてInstapaperに乗り換えた。特に良いなと思ったところもないけれど、悪いと思ったところもまるでない。日付やお気に入りを維持してインポートすることができ、スムーズに乗り換えることができた。</description>
      <category>Internet</category>
      <guid isPermaLink="true">http://hail2u.net/blog/internet/hello-instapaper.html</guid>
      <pubDate>Sat, 23 May 2015 10:57:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://www.readability.com/">Readability</a>を愛して止まないのだけど、結構な頻度で読めない、または画像がうまく出ないみたいな感じになってきたので、遂に諦めて<a href="https://www.instapaper.com/">Instapaper</a>に乗り換えた。特に良いなと思ったところもないけれど、悪いと思ったところもまるでない。日付やお気に入りを維持してインポートすることができ、スムーズに乗り換えることができた。</p>

<p>ウェブ側では不満はまったくないけれど、Chrome拡張はReadabilityのものの方が即読み始めることができて良いかなと思った。このあたりの読むフローを変える必要がありそう。送って後で読むというスタイルだと読むの忘れるので、送りつつ読む方が性に合っていそうなことを考えると、公式の拡張ではないやつを使った方が良いのかもしれない。</p>

<p>もうひとつ想定外だったのはReederが読む方に対応していなかったこと。てっきりサポートされているかと思ったけどそんなことは全然なかった。これは公式アプリに慣れるしかなさそうだ。</p>

<hr>

<p><a href="https://github.com/hail2u/drawic/blob/master/instapaper.svg">アイコン</a>は作った。</p>]]></content:encoded>
    </item>

    <item>
      <title>main//main</title>
      <link>http://hail2u.net/blog/webdesign/main-in-main.html</link>
      <description>遂に&lt;div itemprop=&quot;articleBody&quot;&gt;というタグに耐え切れなくなったので、main要素をネストする方向に書き換えた。HTML5仕様ではmain要素はドキュメントごとにひとつしか許されないが、WHATWG版HTML仕様ではそのような縛りはない。すっきりした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/main-in-main.html</guid>
      <pubDate>Fri, 22 May 2015 13:16:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>遂に<code>&lt;div itemprop=&quot;articleBody&quot;&gt;</code>というタグに耐え切れなくなったので、<code>main</code>要素をネストする方向に書き換えた。HTML5仕様では<a href="http://www.w3.org/TR/html5/grouping-content.html#the-main-element"><code>main</code>要素はドキュメントごとにひとつしか許されない</a>が、WHATWG版HTML仕様ではそのような縛りはない。すっきりした。</p>

<p>それだけだと中途半端なので、見出し要素だけで暗黙のセクションを生成させていた箇所をすべて<code>section</code>要素でマークアップした。明確な切れ目があるわけではないので、雑にgrepから置換してから目で確認していった。これからはちゃんと<code>section</code>要素を書くことにする。</p>

<p>インデントしたらそのインデント・レベルのテキストを<code>section</code>要素でマークアップしてくれるMarkdownプリプロセッサーとか欲しいかなとかちょっとだけ考えた。けどそれはそれでMarkdownの良いところである読みやすさが失われる。やっぱり色んな意味でMarkdownは簡易HTML記法ではないなと思う。</p>

<p>とりあえず魔改造したMarkedで<code>section</code>要素内も普通にMarkdownと解釈されるようにしたけど、ついに普通にHTMLガシガシ書く生活に戻りそうな予感がする。技術者としてダメな感じでテンション上がる。</p>

<p>他HTTPS化に備えた作業の続きをしたりもしている。HTTPS化はとても魅力的なんだけど、HTTPに戻るということが事実上不可能と考えるべきだと思うので、もうちょっとどのくらいのお金と労力で運営できるかを確認してからにしたい。CloudFlareに依存した形での運営を、無料で永遠に続けられると仮定するのは危険すぎる。</p>]]></content:encoded>
    </item>

    <item>
      <title>a:visited</title>
      <link>http://hail2u.net/blog/webdesign/a-visited.html</link>
      <description>ウェブページのCSSでa:visitedを使うと、リンク先が訪問済みの場合にリンクの色を替えることができる。ちゃんと設定してやることによりユーザビリティーが上がるというのが定説だろう。訪問済みならばもう開く必要はなく、結果そのページに集中することができるというわけだ。この論理には3つ疑問がある。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/a-visited.html</guid>
      <pubDate>Thu, 21 May 2015 07:01:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ウェブページのCSSで<code>a:visited</code>を使うと、リンク先が訪問済みの場合にリンクの色を替えることができる。ちゃんと設定してやることによりユーザビリティーが上がるというのが定説だろう。訪問済みならばもう開く必要はなく、結果そのページに集中することができるというわけだ。この論理には3つ疑問がある。</p>

<section>
<h2>人の記憶</h2>

<p>メールのようにそれなりに内容が簡潔にまとまっているようなものの場合、一度読めば二度と読む必要はない。しかしウェブページは違う。人はウェブページを流し読みするものだし、その結果として内容を誤解するものだ。ウェブページの内容に対する人の記憶はまったくあてにならない。</p>

<p>訪問済みのウェブページを開かずに読み進めるということは、その内容をうろ覚えで誤解したままウェブページを読み進めるということに他ならない。ユーザーに優しくしたつもりが、結果としてウェブページの誤読を加速することになりうる。</p>
</section>

<section>
<h2>リンク先</h2>

<p>リンクを張った文字列は必ずしもリンク先のウェブページのタイトルと同じではない。そのため訪問済みであったとしても、そのリンク先がどのようなページであるのかを類推することは難しい。わかることは訪問したことがあるという事実だけで、それ以上は何も知ることはできない。</p>

<p>それでもデスクトップ・ブラウザーならばステータス・バーなどでリンク先を確認することはできるし、モバイル・ブラウザーではロングタップして確認することはできる。確認するのはいかにも面倒だし(特にロングタップによる確認)、もしユーザーが確認することを前提とするのならば、<code>a:visited</code>を使って訪問済みかどうかの情報を提供する意味はほとんどなくなるだろう。</p>
</section>

<section>
<h2>a:visitedの色</h2>

<p>色を変えることで訪問済みであることがわかると言うが、本当にそうだろうか。リンクの色が青で訪問済みの色が紫だとすると、確かにわかるかもしれない。しかし実際にそうであることはまずないだろう。その場合、ユーザーが訪問済みのリンクであることを知るためには、制作者の指定した訪問済みリンクの色を知っていることが条件になるが、知っているわけがない。</p>

<p>コントラストを落とすと訪問済みであるといった経験則は多分存在するが、それも訪問済みのリンクと未訪問のリンクが比較できる状態でのみ通用する。もし訪問済みのリンクのみ(またはその逆)だった場合、その色がコントラストが落ちているかどうかを判断することはできない。</p>

<p>下線を消し、本文と同じ色にすることで、未訪問のリンクと大きく差をつけることは可能だ。しかしそれは単にリンクとして認識できなくさせるだけで、訪問済みだということを知ることはできない。</p>

<p>何かわかりやすい形で表示できれば良いのだが、セキュリティの関係から多くのブラウザーで色以外を変えることはできない。またJavaScriptなどからも扱うことは難しい。つまり訪問済みであることを訪問者に誤解なく伝えるためには、リンク色をデフォルトのままにする必要があり、結果<code>a:visited</code>は無用の長物と化す。</p>
</section>

<hr>

<p><code>a:visited</code>がうまく機能するのは限られた状況でだけだろう。例えばニュース見出しの一覧や検索結果の一覧のウェブページはその良い例だ。そのページ自体に特に意味は無いこと、リンク先の内容がわかりやすいこと、繰り返し訪問する可能性が高いことが条件になる。普通に文章を書いて普通にリンクを張ったごく普通のウェブページではほとんど意味をなさないはずだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>Formspree</title>
      <link>http://hail2u.net/blog/webdesign/formspree.html</link>
      <description>Infield Top Aligned Labelの実験がてら、Formspreeでコンタクト・フォームを作成して設置していた。Formspreeは登録不要で使えるメール・フォームの設置をサポートするウェブサービスだ。提供するのはほぼエンドポイントのURLのみで、それに自分のメール・アドレスを追加したURLへPOSTするフォームを作るだけで設置が完了する。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/formspree.html</guid>
      <pubDate>Wed, 20 May 2015 11:11:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="http://hail2u.net/blog/webdesign/infield-top-aligned-label-pattern.html">Infield Top Aligned Label</a>の実験がてら、<a href="https://formspree.io/">Formspree</a>でコンタクト・フォームを作成して設置していた。Formspreeは登録不要で使えるメール・フォームの設置をサポートするウェブサービスだ。提供するのはほぼエンドポイントのURLのみで、それに自分のメール・アドレスを追加したURLへ<code>POST</code>するフォームを作るだけで設置が完了する。</p>

<p>設置完了後に1回だけ自分で設置したフォームを使いメールを送信すると、設置したURLとメール・アドレスの紐付けを確認するメールが来る。その手順に従い確認すると、あとはそのフォームで送られた内容が指定したメール・アドレスへ転送されてくるようになる。</p>

<hr>

<figure>
  <a href="http://hail2u.net/images/blog/infield-top-aligned-label-pattern-example.png"><img alt="テキスト・フィールド内にラベルが配置されているパターン" height="627" src="http://hail2u.net/images/blog/infield-top-aligned-label-pattern-example.png" width="1200"></a>
</figure>

<p>Infiled Top Aligned Labelの実装では多少複雑な形になっているが、それほどややこしくもしなかった。複数列にしたのでFlexboxを使う方が良さそうだったが、結局<code>float</code>と<code>clear</code>プロパティーでレイアウトした。</p>

<p>入力フィールドの収まりはすごく良いものの、反面それらと著しく佇まいの違うボタンの配置と見た目の調整が難しいというのが実装した感想だ。入力フィールドと同じように枠を付けてその中にボタンを配置すると、余白の統一感がなくなる。かといって枠いっぱいにボタンを広げると見た目の圧が強すぎるきらいがある。枠の外に少し離して普通のボタンを配置するのは悪くはないが、前後のコンテンツとのバランスが取りづらいように感じた。</p>

<p>インラインで埋め込むフォームよりも、サインアップやログインなどの完全に独立しててそれだけしかないようなフォームに向いているのかもしれない。</p>

<hr>

<p>Formspreeはエンドポイントへ向けてJSONを投げるという形でもメールの送信が可能になっている。ウェブサイトへの設置でそうした場合、ページ遷移なしでメールの送信が可能になる。リファラーのチェックやURLとの紐付けの関係上、ネイティブ・アプリへの組み込みは難しそうだが、ウェブ・アプリなら可能だろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>CSSWring v3.0.5</title>
      <link>http://hail2u.net/blog/webdesign/node-csswring-v3.0.5.html</link>
      <description>2つのバグを修正してCSSWringのv3.0.5をリリースした。#で始まるコメントが全てソース・マップ用の埋め込みコメントとみなされていたバグと、url(&quot;&quot;)内に対応しない閉じ括弧が含まれている場合に引用符の削除に失敗するバグが修正された。あわせてCLIプログラムのちょっとした修正も行っておいた。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/node-csswring-v3.0.5.html</guid>
      <pubDate>Tue, 19 May 2015 07:33:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>2つのバグを修正して<a href="https://github.com/hail2u/node-csswring">CSSWring</a>のv3.0.5をリリースした。<code>#</code>で始まるコメントが全てソース・マップ用の埋め込みコメントとみなされていたバグと、<code>url(&quot;&quot;)</code>内に<em>対応しない</em>閉じ括弧が含まれている場合に引用符の削除に失敗するバグが修正された。あわせてCLIプログラムのちょっとした修正も行っておいた。</p>

<p>PostCSS周辺では少し動きがあった。Twitter Bootstrapが次のバージョンでSCSSベースになり、その次のバージョンではPostCSSをバックエンドとした統合的なシステムになるという話だ(あまり信憑性はないが)。このおかげでPostCSSへの注目度が一気に上がったような形だ。CSSフレームワークごとにプリプロセッサー(に近い何か)が用意される時代と考えるとちょっとびっくりするが、標準に寄せた形ならそれでも良いのかなとも思える。そうなって初めて今まで<em>フレームワークもどき</em>に過ぎなかったCSSフレームワークが本当にフレームワークとなる、と言えるのかもしれない。</p>

<p>僕はそれよりもまずはPostCSSベースでSCSS (のようなもの)が分割・再構成されないかなとか考えている。<a href="http://sass-lang.com/libsass">libSass</a>による高速なSCSSの実装は魅力的ではあるが、前段で触れた<em>CSSフレームワークごとのプリプロセッサー</em>という未来がありうることを考えると、独立したプリプロセッサー言語というものそれ自体に未来はあまり感じることはできない。それならばSCSSの様々な機能をモジュール化してPostCSS上で再構成してくれると色々使いでがありそうだ。</p>]]></content:encoded>
    </item>

    <item>
      <title>下方向にもCSS Transitionでスムーズにスクロール</title>
      <link>http://hail2u.net/blog/webdesign/scroll-down-smoothly-with-css-transition.html</link>
      <description>少し前のCSS Transitionを使ったスムーズにスクロールしてトップに戻る機能という記事では、CSS Transitionを使ってスムーズにスクロールさせるためにbody要素のmargin-topプロパティーを負の値を設定した。これはとにかく上方向へのスクロールにしか使うことは出来ない。下方向にスムーズにスクロールさせるためにはまた別のアプローチが必要になるようだ。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">http://hail2u.net/blog/webdesign/scroll-down-smoothly-with-css-transition.html</guid>
      <pubDate>Mon, 18 May 2015 06:55:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.net/images/blog/scroll-down-smoothly-with-css-transition.png"><img alt="下方向へスムーズにスクロール" src="http://hail2u.net/images/blog/scroll-down-smoothly-with-css-transition.png"></a>
</figure>

<p>少し前の<a href="http://hail2u.net/blog/webdesign/scroll-smoothly-to-top-with-css-transition.html">CSS Transitionを使ったスムーズにスクロールしてトップに戻る機能という記事</a>では、CSS Transitionを使ってスムーズにスクロールさせるために<code>body</code>要素の<code>margin-top</code>プロパティーを負の値を設定した。これはとにかく上方向へのスクロールにしか使うことは出来ない。下方向にスムーズにスクロールさせるためにはまた別のアプローチが必要になるようだ。</p>

<p>何かしらのCSSプロパティーを使い、<code>body</code>要素を上方向にずらすということになる。つまり<code>transform</code>プロパティーで<code>translate()</code>や<code>translate3d()</code>を使いY方向のマイナスへ動かすのが向いているようだ。あとは<code>transition</code>プロパティーを組み合わせるだけでスムーズにスクロール(しているように見せる)ことができる。</p>

<p>View Demo: <a href="http://hail2u.net/pub/test/630.html">Scroll Down Smoothly with CSS Transition</a></p>

<p>デモではJump to Bottomというボタンを押すとページの最下部までスクロールするようになっている。スムーズなことがわかりやすいように長めのアニメーションにしておいた。今回のものは任意の要素の位置へにもスクロールすることが可能だ。Jump to Middleというボタンでは中程までスクロールしてピタッと止まる。また上方向にも対応させた。Back to Topというボタンではページの先頭にスムーズにスクロールしながら戻ることができる。</p>

<pre><code>function scrollToElm(to) {
  var root = document.documentElement;
  var styleRoot = root.style;
  var doScroll = function () {
    styleRoot.transition = styleRoot.transform = &#39;initial&#39;;
    <mark>window.scrollTo(0, to.offsetTop)</mark>;
    root.removeEventListener(&#39;transitionend&#39;, doScroll, false);
  };
  var scrollDistance = <mark>window.pageYOffset - Math.min(
    to.offsetTop,
    root.scrollHeight - window.innerHeight
  )</mark>;
  root.addEventListener(&#39;<mark>transitionend</mark>&#39;, doScroll, false);
  styleRoot.transition = &#39;transform 1s ease-in-out&#39;;
  styleRoot.transform = <mark>&#39;translate3d(0, &#39; + scrollDistance + &#39;px, 0)&#39;</mark>;
}
</code></pre>

<p>少しややこしくなったが、それでも16行程度で実装することができる。上下へスクロールさせる場合、後処理が重要になるので<code>transitionend</code>イベントを使うことが必須になる(使わなくても不可能ではない)。</p>

<p>まずは必要なスクロール量を考える。通常は現在のスクロール位置からスクロールして表示したい要素の<code>offsetTop</code>を引いた量で良いが、ページの最後付近にある場合はページの最大スクロール量(ここでは<code>root.scrollHeight - window.innerHeight</code>で求めた)を引いた量に制限する必要がある。つまりこの2つのどちらか小さい方<code>Math#min()</code>を使って求め、現在のスクロール位置から引けば良い。</p>

<p><code>transform</code>プロパティーでは<code>translate3d()</code> (<code>translateY()</code>でも悪くはない)を使い、ドキュメント全体を動かす。そうするとスクロールしたように見える。もしスクロールバーがあるなら、それを注視すれば実際にはスクロールしていないことがわかるだろう。既にスクロール量の引き算で調節されているため、文字列連結でマイナスへ変換したりする必要はない。これに<code>transition</code>プロパティーで適当にアニメーションを追加すればスムーズになる。</p>

<p>実際のスクロールはアニメーションの終了後に行うことになる。CSS Transitionの終了時には<code>transitionend</code>というイベントが発火するので、これを使ってスクロール系のメソッドを使いスクロールさせる……前に<code>transform</code>プロパティーをリセットしてやる。もちろん<code>transition</code>プロパティーも同時にリセットする必要がある。スクロールは<code>Element.scrollIntoView()</code>が一番直感的だが、要素のマージンなどにより微妙にずれることがあるため、<code>window.scrollTo()</code>を使う方が良いだろう。最後にこのもう必要のないイベント・ハンドラーは削除しておく。</p>

<hr>

<p>これでCSS Transitionを利用したスムーズなスクロールを上下に行うことができるようになった。<code>margin-top</code>プロパティーを使ったものがハックに近い印象を受けるのと違って、この<code>transform</code>プロパティーを使ったものは自然な実装に近いのもポイントが高い。</p>

<p>実際にはそれほど<code>scrollTo()</code>を使ったスムーズなスクロールは重くない。だがそれは普通の状態であるなら、だ。最近は非常に巨大な動画や埋め込み<code>iframe</code>要素、スクロールを阻害するもの(<code>scroll</code>イベントを使うもの)は多い。それらを考慮するとCSS Transitionのようなコストが低いかコストを他に(ここではCSS Transformに)丸投げできる技術を流用すると、安定した結果を得られるはずだ。</p>

<p>またスクロールのスムーズさを<code>transition-timing-function</code>プロパティーで容易にカスタマイズできる点も魅力的だ。<code>ease-in-out</code>でのなめらかな加速と減速はもちろん、<code>linear</code>をかわりに使えば平坦にもできる。ちょっと戻って勢いを付けてガッとスクロールさせる……といった更なるカスタマイズも<code>cubic-bezier()</code>を使えば不可能ではない(<code>cubic-bezier(0.4, -0.4, 0.8, 1)</code>とか)。<code>steps()</code>を使えばスキップしながらスクロールさせることすらできるだろう。現行の一部ブラウザーの開発者ツールには、そのアニメーションをGUIでプレビューしながら編集する機能もあり、その時には大いに助けになるはずだ。</p>

<p>このCSS TransitionとCSS Transformによるスムーズなスクロールの実装が万能なわけではない。ブラウザー側で全て制御させることになるので、場合によってはスムーズさとは無縁の結果になりうる。どう動くかはブラウザーの気分次第ということだ。その一方で<em>アニメーションの制御コストと挙動カスタマイズ</em>という難題をブラウザーに丸投げできるという大きなメリットがある。ウェブページのコンテンツ次第では、スムーズにスクロールさせるための選択肢として最右翼になり得るはずだ。</p>

<section>
<h2>追記</h2>

<p>デモにいくつかあったバグを潰しておいた。うまく動かなかったと思った人は再度見てみてほしい。潰したバグは、Internet Explorer 11で<code>CSSStyleDeclaration.transform = &#39;initial&#39;</code>が無視されるバグと、ベンダー拡張プリフィックスのつけ忘れにより(Mobile )Safari 8でアニメーションできないバグの2つ。</p>
</section>]]></content:encoded>
    </item>

    <item>
      <title>The End (SVG)</title>
      <link>http://hail2u.net/blog/misc/the-end-svg.html</link>
      <description>重い腰を上げ、そこかしこで使っているプロフィール画像のSVG化を始めた。再現度は7割くらいまでは到達したように思う。この画像はその未完のものをPNGにエクスポートした。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">http://hail2u.net/blog/misc/the-end-svg.html</guid>
      <pubDate>Sun, 17 May 2015 06:24:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://hail2u.net/images/blog/the-end.png"><img alt="The End" height="627" src="http://hail2u.net/images/blog/the-end.png" width="1200"></a>
</figure>

<p>重い腰を上げ、そこかしこで使っているプロフィール画像のSVG化を始めた。再現度は7割くらいまでは到達したように思う。この画像はその未完のものをPNGにエクスポートした。</p>

<p>ビットマップをトレースするのではなく、長方形でちゃんと作り、それを変形することで再現している。変形のパラメーターの調節よりも元の長方形の再現が大変で苦労している。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
