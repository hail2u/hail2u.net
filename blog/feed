<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:lang="ja"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Weblog - Hail2u.net</title>
    <link>https://hail2u.net/blog/</link>
    <description>ウェブ制作やウェブ標準の話題が中心ですが、それに限らず備忘録や日々の記録までを含めることで、10年以上続けることができたウェブログです。Blosxomを使って作られています。</description>
    <language>ja</language>
    <managingEditor>hail2u@gmail.com (Kyo Nagashima)</managingEditor>
    <lastBuildDate>Mon, 9 Nov 2015 15:15:23 +0900</lastBuildDate>
    <generator>blosxom v2.1.2+dev</generator>
    <atom:link rel="self" href="https://hail2u.net/blog/feed"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <creativeCommons:license>http://creativecommons.org/licenses/by-nc/3.0/</creativeCommons:license>


    <item>
      <title>リンク先が訪問済みかどうかのCSSによる表示</title>
      <link>https://hail2u.net/blog/webdesign/show-visited-status-with-css.html</link>
      <description>DuckDuckGoでは、検索結果に出てきたページが訪問済みかどうかをわかりやすくアイコンで表示してくれる。Googleではトリッキーなことはせずに、色を変えるだけだ。もちろん色を変えるのが簡単だが、色を増やさずに訪問済みかどうかを示すことも不可能ではないようだ。まずはテスト実装ということで擬似要素がユニバーサル・セレクターにはマッチしないことを利用して考えることにした。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/show-visited-status-with-css.html</guid>
      <pubDate>Mon, 09 Nov 2015 15:14:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://duckduckgo.com/">DuckDuckGo</a>では、検索結果に出てきたページが訪問済みかどうかをわかりやすくアイコンで表示してくれる。<a href="https://www.google.com/">Google</a>ではトリッキーなことはせずに、色を変えるだけだ。もちろん色を変えるのが簡単だが、色を増やさずに訪問済みかどうかを示すことも不可能ではないようだ。まずはテスト実装ということで擬似要素がユニバーサル・セレクターにはマッチしないことを利用して考えることにした。</p>

<p>See also: <a href="https://hail2u.net/pub/test/644.html">Show :visited Status</a></p>

<p>デモ・ページでは訪問済みのリンクであった場合に「訪問済み」という文字列を赤で表示するようになっている。「訪問済み」という文字列の代わりにアイコン・フォントを使えばこのインジケーターをDuckDuckGoのそれに似たようなものにできるのではないかと思う。その場合は「訪問済み」とかいう妙な文字列をクローラーに拾われなくなり、より良い実装となりうる。</p>

<p><code>:visited</code>擬似クラスでは特定のCSSプロパティーしか利用できない。仕組みそのものは単純だが、いくつかCSSの独特の仕組みを利用しており、実装は少しややこしくなる。</p>

<ol>
<li><code>a</code>要素の<code>color</code>プロパティーを背景色と同じにする</li>
<li><code>a:visited</code>擬似クラスの<code>color</code>プロパティーでインジケーターの前景色を指定する</li>
<li><code>a:before</code>擬似要素でインジケーターになる文字列を仕込む</li>
<li><code>a &gt; *</code>の<code>color</code>プロパティーでリンクの前景色を指定する</li>
</ol>

<p>本来は1か2で指定した前景色がすべての子要素へ適用されることになるが、実際にリンクを張った文字列の前景色は4での指定により上書きされる。ただし4のセレクターは擬似要素にマッチしないので、擬似要素だけは1か2での指定が適用される。ということで訪問済みの場合のみ文字列が見えるようになるという仕組みだ。</p>

<pre><code>&lt;li&gt;
  &lt;a href=&quot;https://example.com/&quot;&gt;
    &lt;span&gt;Example&lt;/span&gt;
  &lt;/a&gt;
&lt;/li&gt;
</code></pre>

<p>デモ・ページではこのようなマークアップに依存している。必要な条件を単純化すると<code>a</code>要素の直下がなんらかの要素ですべて括られていれば良いということになる。つまり以下のようなマークアップでもうまくいく。</p>

<pre><code>&lt;a href=&quot;https://example.com/&quot;&gt;
  &lt;section&gt;
    &lt;h1&gt;Example&lt;/h1&gt;
  &lt;/section&gt;
&lt;/a&gt;
</code></pre>

<p>利用を想定している箇所はこのようなセクション全体にリンクを張るパターンなので、概ね問題なさそうだ。</p>

<hr>

<p>訪問済みかどうかの表示はユーザーの不安感を煽るとも考えられる。多用は……というよりも、ユーザーのメリットが明らかでない場合は利用するべきではないだろう。しかしながらいざ必要となった時にアイディアがまったくないというのも芸がないので、このような工夫は常に数個ストックしておきたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>Dropboxの(S)CSSスタイル・ガイドの所感</title>
      <link>https://hail2u.net/blog/webdesign/first-impression-of-dropbox-s-css-style-guide.html</link>
      <description>Dropbox社内のスタイル・ガイドを読んでいた。スタイル・ガイドとなっているがCSSのコーディング規約の方のスタイル・ガイドだ。最近のシンプル回帰の傾向と違い、かなり厳しいようだ。完全に守ってるとしたらかなりすごい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/first-impression-of-dropbox-s-css-style-guide.html</guid>
      <pubDate>Sun, 08 Nov 2015 02:56:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p><a href="https://github.com/dropbox/css-style-guide">Dropbox社内のスタイル・ガイド</a>を読んでいた。スタイル・ガイドとなっているがCSSのコーディング規約の方のスタイル・ガイドだ。最近のシンプル回帰の傾向と違い、かなり厳しいようだ。完全に守ってるとしたらかなりすごい。</p>

<p>特に特徴的だったのはCSSプロパティーの記述順だろう。近頃は「もう面倒なのでアルファベット順で……」という規約が多い。対して<a href="https://github.com/dropbox/css-style-guide#rule-ordering">Dropboxのそれ</a>はいくつかに大きくジャンル分けして記述するようになっているようだ。そのジャンルの中では順不同なのも面白い。そのカテゴリ分けもレイアウト、インラインの見た目、ブロックの見た目、その他と妥当に分かれている。</p>

<p>コンポーネント分けのパターンも考慮すると、多くはその分けられたカテゴリのどれかひとつだけを使うようにクラス分けされるはずなので、実質意味がないようにも見えるところに興味を持った。複数のカテゴリのプロパティーが混ざったらそのクラスはおかしいというような判断も下せるのではないかと推測している。</p>

<p>4スペースでのインデントは好みかと思うが、ネストする機会が少ないことを考えると問題なさそうだ。Markdownが界隈を完全に制圧したためか、4スペース・インデント派が地味にマジョリティーと化している気がする。</p>

<p>ただ<code>margin-top</code>プロパティーは使わないという点はちょっとなんかこう冷静になれないところがある。マージンの相殺も理解できない人はCSSを書くべきじゃないというようなスタンスでいたい。</p>

<p>それはともかく全体的に見るべきところは多い。ちょっと厳しめのコーディング規約を課したいと考えている場合は大いに参考にできそうだ。</p>

<hr>

<p>スタイル・ガイドという言葉が2通りの使い方をされている現状はどうにかならないかな。</p>]]></content:encoded>
    </item>

    <item>
      <title>夢</title>
      <link>https://hail2u.net/blog/misc/dreaming-20151101.html</link>
      <description>冬服を衣装箱から出したところ、去年買ったお気に入りのセーターが虫食いでボロボロになっていた。どうにかならないかと穴を調べるために着てみたら、穴の方が大きいくらいだった。どうしようかなと着たまま呆然としていたらいきなり現れた見知らぬ人に「グランジだ！オシャレ！」って言われたので、調子に乗って玄関を出たところで目が覚める。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">https://hail2u.net/blog/misc/dreaming-20151101.html</guid>
      <pubDate>Sat, 07 Nov 2015 12:24:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>冬服を衣装箱から出したところ、去年買ったお気に入りのセーターが虫食いでボロボロになっていた。どうにかならないかと穴を調べるために着てみたら、穴の方が大きいくらいだった。どうしようかなと着たまま呆然としていたらいきなり現れた見知らぬ人に「グランジだ！オシャレ！」って言われたので、調子に乗って玄関を出たところで目が覚める。</p>

<p>もう1着セーターが欲しい。サムホールの開いてるとてもお高いセーター買っちゃいなよっていう悪魔の囁きとシーズンをまたいで2年くらい戦っているがそろそろ負けそうだ。去年はそれよりも前から欲しかったセーターを優先するという強い心があったが、今年はない。しかも近所に扱ってる店ができてしまったので更に厳しそうだ。頑張ろう。</p>]]></content:encoded>
    </item>

    <item>
      <title>ドットで始まるファイルのWindowsでの作成方法</title>
      <link>https://hail2u.net/blog/software/creating-dot-start-file-in-windows.html</link>
      <description>チャットの類いを見ているとたまに「Windowsでドットで始まるファイルが作れないんだけど」というような発言を見かけることが多くなった。Windows 10のおかげかSurfaceの好調さか、ウェブ開発でWindowsを使っている人が増えつつあるようで、こういう質問が出てくるのかもしれない。簡単に言うと.filename.と最後にもドットを付けると、それが削除されてドット始まりのファイルがWindowsでも簡単に作成できる。</description>
      <category>Software</category>
      <guid isPermaLink="true">https://hail2u.net/blog/software/creating-dot-start-file-in-windows.html</guid>
      <pubDate>Fri, 06 Nov 2015 13:31:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
<a href="https://hail2u.net/images/blog/creating-dot-start-file-in-windows.png"><img alt="Windowsでドット始まりのファイルを作成しようとすると、拡張子だけとみなされて「ファイル名を入力してください。」と丁寧に叱られる" height="720" src="https://hail2u.net/images/blog/creating-dot-start-file-in-windows.png" width="1280"></a>
</figure>

<p>チャットの類いを見ているとたまに「Windowsでドットで始まるファイルが作れないんだけど」というような発言を見かけることが多くなった。Windows 10のおかげかSurfaceの好調さか、ウェブ開発でWindowsを使っている人が増えつつあるようで、こういう質問が出てくるのかもしれない。簡単に言うと<code>.filename.</code>と最後にもドットを付けると、それが削除されてドット始まりのファイルがWindowsでも簡単に作成できる。</p>

<p>この手法はたいていのケースで利用できる。最後に拡張子の変更を警告するダイアログが出るが、それはだいたいそうなので気にならないだろう。</p>

<figure>
<img alt="Windowsにより.bashrc.というファイル名が.bashrcへ自動的に補正される様子" height="360" src="https://hail2u.net/images/blog/creating-bashrc-in-windows.gif" width="640">
<figcaption><code>.bashrc.</code> will become <code>.bashrc</code></figcaption>
</figure>

<hr>

<p>これはもう知っているか知らないかの問題にすぎないので、知っていると便利だぞ、という話だ。かなり前のWindowsからこの手法でいけたと思う。僕の記憶が定かならばWindows Meでも大丈夫だったはずだ。ちゃんと広まって「コマンド・プロンプトを開いて<code>ren</code>コマンドを使うとできるよ」などと言う人が減ると良いなと思う。</p>

<p>この答えは間違ってはいないのだが、「すみません、コマンド・プロンプトってなんですか？」とか「このフォルダーでコマンド・プロンプトを開くにはどうすれば良いですか？」（<kbd>Shift</kbd>キーを押しながら右クリックして、コマンド ウィンドウをここで開くを選択する）と更に聞かれてしまう。最悪の場合「コマンド・プロンプトで別ドライブに移動するにはどうすれば良いんですか？」などといった別の答えるのが面倒くさそうな質問に派生することもある。</p>

<hr>

<p>そもそもドット始まりのファイルみたいな運用でカバーみ……ということを書くとこんがり燃えそう。</p>]]></content:encoded>
    </item>

    <item>
      <title>英語で書かれた記事を優先的に読むこと</title>
      <link>https://hail2u.net/blog/media/preferring-to-read-tech-articles-in-english.html</link>
      <description>ウェブ開発・デザイン関係の記事は、英語で書かれたものを主に読むようにしている。英語が一次ソースなことが多いということもあるが、それは理由の2割くらいにしかならない。残りの8割の半分は先入観の排除で、もう半分は読み返しの促進だ。</description>
      <category>Media</category>
      <guid isPermaLink="true">https://hail2u.net/blog/media/preferring-to-read-tech-articles-in-english.html</guid>
      <pubDate>Thu, 05 Nov 2015 12:35:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>ウェブ開発・デザイン関係の記事は、英語で書かれたものを主に読むようにしている。英語が一次ソースなことが多いということもあるが、それは理由の2割くらいにしかならない。残りの8割の半分は先入観の排除で、もう半分は読み返しの促進だ。</p>

<p>どうしても日本語の記事は書いている人の背景が見えてきてしまう。するとその人の開発者としての得意な分野や場合によっては所属に対して先入観を持って読み進めることになる。そのことが良い方向へ転がることもあるが、悪い目が出たことの方が圧倒的に記憶に残る。そういった悪い目の記憶の積み重ねは先入観を更に補強してしまう。英語の記事では超有名人でもない限りよく知らないし、知ろうとも思わないので、先入観なしに読み始めることができる。</p>

<p>また、英語の記事はどうしても読む速度が落ちる。その結果読み飛ばし過ぎることもあるが、流し読みしてわかった気になるよりはマシだろう。落ちた読む速度は短期記憶の喪失に直結し、読んでる途中ですぐわからなくなるため、自然と読み返しを促される。技術的な記事の場合、そういった読む作業により消費する時間というデメリットより、噛みくだいた状態で知識を得られるというメリットの方が多い。</p>

<hr>

<p>こと効率という点で、自分をまったく信用していないため、こういうアプローチをとっている。若いころからもっと素直に色々文章を読む訓練を積んでいれば良かった。そう考えると身近に肩ひじを張らずに読むことのできる文章があふれている今の時代に青少年期を過ごしている人たちがうらやましいな、と感じる。</p>]]></content:encoded>
    </item>

    <item>
      <title>Encoding</title>
      <link>https://hail2u.net/blog/internet/encoding-specification.html</link>
      <description>2年弱くらい作業が続いているEncoding仕様を、新たなCRが出た機会に改めて読んでいた。このような仕様に人を浪費することがないように、どのような手間とヒマをかけてもUTF-8に変更していくべきなのかな、と感じる。</description>
      <category>Internet</category>
      <guid isPermaLink="true">https://hail2u.net/blog/internet/encoding-specification.html</guid>
      <pubDate>Tue, 03 Nov 2015 13:05:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>2年弱くらい作業が続いている<a href="http://www.w3.org/TR/encoding/">Encoding</a>仕様を、新たなCRが出た機会に改めて読んでいた。このような仕様に人を浪費することがないように、どのような手間とヒマをかけてもUTF-8に変更していくべきなのかな、と感じる。</p>

<p>UTF-8を使わない理由はあまりないが、同時にレガシーなEUC-JPやShift_JISを捨てる理由もあまりないことは確かだ。強い反論が思いつかないためそのまま残る。それはしょうがないが、問題はそれに釣られてしまうことがあることだ。新しいプロジェクトでも建設的な議論の末にUTF-8に落ち着きそうだったにも関わらず、ウェブサイトの変えられない他のページがShift_JISだからという消極的な理由でそれになりそうになることもある。</p>

<p>使い続けられるレガシーな文字コードという鎖の環を断ち切る地道な活動を続けたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>HTTPSにした時に気を付けたこと</title>
      <link>https://hail2u.net/blog/webdesign/https-checklist.html</link>
      <description>何回かやる必要が出てきそうなので、どういう形でやったのかをアバウトに記録しておく。本当は何もせずできればいいのだけど、世の仕様はそんなにうまくできてはいない。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/https-checklist.html</guid>
      <pubDate>Mon, 02 Nov 2015 11:58:00 +0900</pubDate>
      <content:encoded><![CDATA[
<p>何回かやる必要が出てきそうなので、どういう形でやったのかをアバウトに記録しておく。本当は何もせずできればいいのだけど、世の仕様はそんなにうまくできてはいない。</p>

<section>
<h2>内部リンク</h2>

<p>事前に徹底的に書き換えておくのが良い。内部リンクにはドメインも不要なので<code>/</code>で始まる絶対パスで全部書くように統一するのが楽だろう。</p>

<p>ただし<code>rel=canonical</code>は色々なウェブサービスから（時々考えなしにプロトコル・スキームから始まっていると仮定されて）使われるため、<code>http:</code>から始める方が安全かもしれない。そもそもFacebook向けのOGPで<code>og:url</code>を書いている場合もあり、この類もプロトコル・スキームから始める必要があり、どうせ書き換える必要は出てくる。諦めて機械的に書き換えができる仕組みを作っておくのも良い。</p>

<p>このウェブサイトの場合は、OGP他を消した上で全て絶対パスにしておくという手法を取ったが、おすすめしない。</p>
</section>

<section>
<h2>Amazonアソシエイトの画像URL</h2>

<p>通常、Amazonアソシエイトを使って画像を得ようとするとHTTPの画像になる。一応リダイレクトで振り分けられるのだが、元々のURLはHTTPなためどうしてもMixed Contentにはなる。リダイレクトされて<code>images-fe.ssl-images-amazon.com</code>配下を参照する画像に書き換えるか、リダイレクト元の方をHTTPSに書き換えておくとうまくいく。</p>

<p>HTTPからHTTPSの画像を参照する分には問題は少ないので、これも事前に作業しておくことができる。</p>
</section>

<section>
<h2>RSSフィードの再構築</h2>

<p>RSSフィードでは絶対URLでリンクは書く。そのためすべてのリンクを書き換える必要がある。あまり忘れない上、概ねブログ・ツール等から自動的に更新されることになるので、大丈夫だろう。RSSリーダーからは全部新着になったり、IFTTTのようなウェブサービスが暴発することがあることには気を付けた方が良い。</p>

<p>僕のように魂を込めてRSS（一部だが）をテキスト・エディターで書いている人は忘れないようにする。</p>
</section>

<section>
<h2>サイトマップの再構築</h2>

<p>RSSフィードは忘れないだろうが、サイトマップは忘れる可能性が高い。それなりに自動生成していない人もいると思うので、再構築した方が良い。</p>

<p>301でのURLの移動とサイトマップのURLが食い違ってると何らかの悪影響がある可能性を否定できないので、特に気を付ける必要がある。</p>
</section>

<section>
<h2>連携ウェブサービスの再設定</h2>

<p>HTTPで始まるURLを登録しているウェブサービスを利用している場合は忘れずに書き換える。FacebookページやTwitterアカウントなどは忘れがちだろう。</p>

<p>IFTTTやDlvr.itのようなRSSフィードをトリガーとしているものは注意を要する。これらは新着記事かそうでないかをURLで判断し、多くの場合HTTPのURLとHTTPSのURLを区別する。そのため今までの設定を書き換えて使おうとすると、全部新着とみなされ暴発する（僕はまんまと暴発させた）。面倒だが新しく作り直す必要があるだろう。</p>
</section>

<section>
<h2>Search Consoleの再設定</h2>

<p>Googleの検索結果での表示などを制御するSearch ConsoleではHTTPとHTTPSが別のプロファイルになる。そのため改めて追加する必要がある。それだけでなくすべて設定のやり直しなので、ウェブサイトの認証やサイトマップの送信も行う。</p>

<p>特に何かこうというわけではないが、ウェブサイトについてGoogleへの連絡する際の要になるので、作っておいた方が無難だろう。</p>
</section>

<section>
<h2>Analyticsの設定変更</h2>

<p>AnalyticsはHTTPとHTTPSの両対応であるが、設定内に優先するプロトコルの設定が複数ある。プロパティのプロパティ設定にあるデフォルトのURLとビューのビュー設定にあるウェブサイトのURLの2つだ。どちらも書き換えておく必要が出てくるだろう。</p>

<p>思い切ってAnalysticsを捨てるという選択もなくはない。どちらにせよ設定は書き換えておいても損はないだろう。</p>
</section>

<section>
<h2>他</h2>

<p>HTML生成に使うツールなどでプロトコル・スキームを切り替えられるようにしておくと書き換える場所が少なくて済むので、作業がスムーズに進む。といってもそういうことができることはあまりないので、どこを書き換えればうまく切り替わるかを事前に色々実験しておくと良い。</p>

<p>もう誰が使っているか知らないが<a href="http://blosxom.sourceforge.net/">Blosxom</a>では<code>$blog_url</code>という設定変数で集中管理されるので、それをうまく利用する。</p>

<pre><code>$scheme = &quot;https:&quot;;
$domain = &quot;hail2u.net&quot;;
$blog_url = &quot;$scheme//$domain/blog&quot;;
</code></pre>

<p>このように<code>blosxom.conf</code>で設定を分離させ、切り替えられるようにしたうえで、プラグインやフレーバーから必ず<code>$blog_url</code>を使うようにしておいた。たまにどうしようもないプラグインもあったりするので、その場合に<code>$blosxom::scheme</code>で拾えるようにするためこうなっている。</p>
</section>

<hr>

<p>grepして置換など必要のない形に事前に整えるのが<em>最低限のライン</em>で、HTTPで公開済みのHTMLがそのままHTTPSで機能するようになっているのが理想だ。HTTPSへの移行を発動させる直前の作業は、HTTPな参照が残っていないかgrepして確認するくらいで終えたい。</p>]]></content:encoded>
    </item>

    <item>
      <title>HTTPSへ</title>
      <link>https://hail2u.net/blog/webdesign/moved-to-https.html</link>
      <description>宣言通りHTTPSに移行した。まずはCloudFlareの無料HTTPSを利用している。CloudFlareでは設定でHTTP Secure Transport Securityも有効にできるので、HTTPのままであろう旧URLからもスムーズに移行されるはずだ。RSSリーダー等で全部新着になったなどがあったら申し訳ないが諦めてほしい。</description>
      <category>Web Design</category>
      <guid isPermaLink="true">https://hail2u.net/blog/webdesign/moved-to-https.html</guid>
      <pubDate>Sun, 01 Nov 2015 10:15:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
<a href="https://hail2u.net/images/blog/moved-to-https.png"><img alt="HTTPS" height="1440" src="https://hail2u.net/images/blog/moved-to-https.png" width="2560"></a>
</figure>

<p>宣言通りHTTPSに移行した。まずは<a href="https://www.cloudflare.com/">CloudFlare</a>の無料HTTPSを利用している。CloudFlareでは設定で<a href="https://support.cloudflare.com/hc/en-us/articles/204183088-Does-CloudFlare-offer-HSTS-HTTP-Strict-Transport-Security-">HTTP Secure Transport Security</a>も有効にできるので、HTTPのままであろう旧URLからもスムーズに移行されるはずだ。RSSリーダー等で全部新着になったなどがあったら申し訳ないが諦めてほしい。</p>

<p>移行にはなおかなり不安が残る。しかし<a href="http://www.coreserver.jp/info/sni.html">CORESERVER.JPが無料でHTTPSを有効に</a>できるようになったので、いざという時の避難場所は確保できるだろうと考えている。他のいくつかのホスティング・サービスでも無料だったり、年1000円程度で提供されていることは確認したので、もしCORESERVER.JPがダメでもなんとかなるだろう。</p>

<p>このままCloudFlareが無料で提供し続けてくれると楽でよいが、そう楽観視することも難しいと感じる。明らかに金のなる木でありそうだからだ。</p>

<hr>

<p>HTTPSへの移行の際にはGoogleのSearch Console（旧Webmaster Tools）のヘルプにある<a href="https://support.google.com/webmasters/answer/6073543?hl=ja">HTTPS でサイトを保護</a>というドキュメントを参考にした。気を付けるのはHSTSの提供だけでは不十分で、HTTPからHTTPSへのサーバー側での301リダイレクトも必要だということくらいだろう。HSTSをサポートしていない環境のためというよりは、サポートしている環境でスムーズな移行を促すために必要だ。</p>

<p>概ねうまくいった。事前にありとあらゆるページから絶対URLを排していたこともあり、ほとんどページの修正は必要なく、せいぜいRSSフィードのURLとサイトマップのURLを書き直すくらいだった。Googleのインデックス更新はまだ確認していないが、経験上大丈夫だろう。</p>

<p><del>ただFeedlyがHTTPからHTTPSへの301によるRSSの移動に追随してくれないようで、ちょっと困っている。とここで書いてもみな気づかないわけなので、なかなかな感じでハマった予感がする。半日待っても追随されなかったらサポートに問い合わせてみようと考えている。</del><ins>Feedlyも大丈夫そうで一安心だ。</ins></p>

<hr>

<p>ともあれこれでめでたくHTTPSかつSPDY/3.1になった。いずれCloudFlare側がHTTP/2にしてくれるだろう……と思いたいが、これが有料オプションというのは十分ありうるのかもしれない。Proの月20ドルというのはちょっと手が出ない……。</p>]]></content:encoded>
    </item>

    <item>
      <title>鎌倉散歩</title>
      <link>https://hail2u.net/blog/misc/kamakura-20151027.html</link>
      <description>鎌倉あたりまで散歩していた。週間予報ではずっと雨っぽい予報が続いていたが、晴れて暑いくらいですごく気持ち良かった。</description>
      <category>Misc.</category>
      <guid isPermaLink="true">https://hail2u.net/blog/misc/kamakura-20151027.html</guid>
      <pubDate>Sat, 31 Oct 2015 14:02:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-1.jpg"><img alt="七里ガ浜からの海" height="1440" src="https://hail2u.net/images/blog/kamakura-20151027-1.jpg" width="2560"></a>
</figure>

<p>鎌倉あたりまで散歩していた。週間予報ではずっと雨っぽい予報が続いていたが、晴れて暑いくらいですごく気持ち良かった。</p>

<p>鎌倉……の前に、10/29に正式オープンの<a href="http://www.lalaport-ebina.com/">ららぽーと海老名</a>を見てみたりする。ロータリーも完成しており、すでにバスの路線は変更になったようで、神奈中バスが通っていた。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-2.jpg"><img alt="駅側のプロムナード側から見て正面" height="405" src="https://hail2u.net/images/blog/kamakura-20151027-2.jpg" width="720"></a>
</figure>

<p>一方でロータリー及びららぽーと周辺には横断歩道及び入り口があまりなく、駅側ではない方からは微妙に面倒そうかなという印象だ。周辺にも店屋が進出しており、ららぽーとにはテナントとして入れなかったゴミのような店が散在する。居酒屋もついにできてしまった。それでもパチンコ屋が進出してこなければ、このままこぎれいな駅前を維持できそうだ。</p>

<p>周辺はさすがに道路が大幅に拡張整備されていた。とは言っても、もちろんそこにつながる道は古い狭い道路ばかりのままだ。しばらくは歩行者は大変そうだ（実際オープン当日はいきなりUターンする車や横断歩道にかまわず突っ込んでくる車が多くかなり厄介だった）が、相鉄線の改札が増える頃には改善されるらしいので、それに期待したい。</p>

<hr>

<p>改めて鎌倉……の前に相模線に乗るのも久しぶり、茅ヶ崎方面に乗るのは更に久々なので、案内表示を眺めていたりする。茅ヶ崎まで1時間くらいとか勝手に想像していたが、30分ちょっとくらいで着いて驚いた。</p>

<p>茅ヶ崎で東海道線に乗り換えて藤沢へ向かうが、<a href="http://www.jreast.co.jp/hitachi_tokiwa/uenotokyoline/">上野東京ライン</a>とか言われると慣れていない人には何がなんだかわからない。藤沢に着き、開けてるなーという感想を持ったものの、ルミネ藤沢を見るとららぽーと海老名に不安しか湧いてこなかったので、早々に江ノ電の駅へ移動した。</p>

<figure>
  <img alt="江ノ電のりばのレトロというほどではない、ただただ古い案内表示" height="360" src="https://hail2u.net/images/blog/kamakura-20151027-3.jpg" width="480">
</figure>

<p>藤沢で小田急百貨店の壁についている江ノ電の案内を見て、江の島・鎌倉気分になってきた。まずは用があったので由比ガ浜まで一気に行く。</p>

<p>サクッと用をこなし、そのまま海へいそいそと移動する。午前中はまだ寒くて人が全然いなかったものの、海岸にゴミひとつなく気持ち良かった。周辺のどうということもない街中もうろうろする。家が立派なものが多いだけでなく、どこの家も生け垣がちゃんと剪定されているか、そうでない場合もむやみに伐られたりしておらず、街の雰囲気はこの辺りで決まってくるのかなと感じた。</p>

<hr>

<p>そのまま歩いて和田塚の近くにある洋服屋で<a href="http://www.shoeslikepottery.com/">Moonstarの靴</a>を見ようと行ったら12時開店で30分ほど時間が残ってしまった。時間つぶしに更に散歩しようと、そういや<a href="http://makeitreal.jp/">Make It Real Inc.</a>がこの辺だったなと探すものの見つからなかった。見つかるのは猫ばかりだ。青いロードスターは見た気がするので、某さんには会ったということにしておく。</p>

<p>迷いすぎて時間を浪費し、12時を過ぎたので洋服屋に行き、靴を見る。すごく良さそうだったので、普段履いてる安い靴がダメになったら買いに来よう。</p>

<hr>

<p>腹が減ったので、七里ガ浜に戻り<a href="http://www.sangosho.net/">珊瑚礁</a>へ。本店は遠そうなので海っぺたにあるモアナマカイという方へ行った。野菜カレーにし、焼いたレンコンやカブを堪能した。レンコンとカブは今度家でもやってみよう。</p>

<p>暑かったので一緒に頼んだジンジャーエールは、まさかのウィルキンソンの瓶そのままで、氷入りのグラスに手酌でどうぞというものだった。瓶ままなこととKALDIで80円で売っているものが450円というあたりに観光地を感じた。当たり前だけど安定のおいしさだった。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-6.jpg"><img alt="七里ガ浜からの江の島" height="1440" src="https://hail2u.net/images/blog/kamakura-20151027-4.jpg" width="2560"></a>
  <figcaption>七里ガ浜</figcaption>
</figure>

<p>七里ガ浜も少し歩く。由比ガ浜よりも商売っ気を出している店ばかりで、あまり歩くには向いてないようだ。</p>

<p>今度は終点の鎌倉へ向かう。行ったり来たりすることになったので600円の江ノ電フリーパス買ったのは正解だった。鎌倉で降りて<a href="http://spingle.jp/">SPINGLE MOVE</a>へ。また靴か。路面店ということで期待していたが、思ったよりも小さかった。しかしSPINGLE MOVEのスニーカーだけを見れる空間というのはすごく良い。Moonstarのスニーカーに傾いていたが、SPINGLE MOVEとPatrickだけで生きていくのも良さそうとも思い始めている。</p>

<hr>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-8.jpg"><img alt="鶴岡八幡宮の森と共に建物" height="1836" src="https://hail2u.net/images/blog/kamakura-20151027-5.jpg" width="3264"></a>
  <figcaption>神奈川県立近代美術館・鎌倉館</figcaption>
</figure>

<p>ようやく目的の<a href="http://www.moma.pref.kanagawa.jp/public/HallTop.do?hl=k">神奈川県立近代美術館・鎌倉館</a>へ。建物自体の保存は決まったものの美術館ではなくなるようで、今開催中のものが最後の展覧会になるそうだ。展示は所蔵品をノンジャンルでずらっと並べたもので、あまり考えずに見れた。展覧会らしくはなかったけれど、これはこれで……というところだ。Part 1と2も行けば良かった。</p>

<p>江ノ電フリーパスを持っていると100円引きで入館できる。年明けまでやっており、11/03は無料で中に入れるようだ。新館が閉鎖されており、入れなかったのが残念だ。</p>

<figure>
  <a href="https://hail2u.net/images/blog/kamakura-20151027-9.jpg"><img alt="朱・黄・緑できれいに塗られた楼門" height="1836" src="https://hail2u.net/images/blog/kamakura-20151027-6.jpg" width="3264"></a>
  <figcaption>鶴岡八幡宮・本宮の楼門</figcaption>
</figure>

<p>最後に鶴岡八幡宮を見にいって、鎌倉駅から帰途へ。表参道はいつ頃完成するんだろうか。完成の暁には、ぜひ桜の季節に行きたい。</p>

<hr>

<p>ただ歩いただけだったが楽しかった。鎌倉館へ向かう途中に通った小町通りも、あれはあれで手軽に観光地感を味わえて面白い。</p>]]></content:encoded>
    </item>

    <item>
      <title>山崎実業 ドアストッパー キューブ（グリーン）</title>
      <link>https://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</link>
      <description>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、山崎実業というところのキューブというものにした。色はグリーンにした。</description>
      <category>Gadget</category>
      <guid isPermaLink="true">https://hail2u.net/blog/gadget/yamazaki-jitsugyo-door-stopper-cube-green.html</guid>
      <pubDate>Fri, 30 Oct 2015 12:39:00 +0900</pubDate>
      <content:encoded><![CDATA[
<figure>
  <a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22"><img alt="山崎実業 ドアストッパーキューブ グリーン 7108" src="https://images-fe.ssl-images-amazon.com/images/I/31TqLvm7Y1L.jpg"></a>
</figure>

<p>ドアストッパーはたまに欲しくなるものの、必要なところには大体あり、なければ段ボールのきれっぱしでも突っ込んでおけばいいか、とあまり買うまではいかなかった。洗面所兼脱衣所と風呂場がきれいになったの期に、ここには取りあえず何か買おうと決めた。コンパクトでドアノブにかけておけ、重くなく、床を傷つけなさそうなものという条件で、<a href="http://www.amazon.co.jp/gp/product/B007PYP0I6/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B007PYP0I6&amp;linkCode=as2&amp;tag=hail2unet-22">山崎実業というところのキューブ</a>というものにした。色はグリーンにした。</p>

<p>条件は完全に満たしていて、色もAmazonの画像で見るよりも落ち着いたグリーンで申し分なかった。6cm四方程度とスマホの半分くらいの大きさで、重さも65gと軽量で良い。</p>

<p>ストッパーとしての力はそれなりで、玄関ドアだと力不足だろうけれど、屋内のドアで床が変わった素材でもなければ十分に機能するようだ。フローリングや撥水コートしている床では大丈夫だった。それほど深くグッと差し込まずともドアを止めてくれる。</p>

<p>ネックは価格（購入時は1300円強）だったけど、今は800円を切っていてうらやましい。もうひとつ必要そうだったら色違いを買おうと思う。</p>]]></content:encoded>
    </item>

  </channel>
</rss>
